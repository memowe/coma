% layout 'default';
% my $title = 'Map ' . $map->{name};
% title $title, breadcrumbs => [[Home => 'home'], $title];
<h1><%= $title %></h1>

%# map description
<hr />
<div id="description">
    %== markdown $map->{description}
</div>

%# visualization container
<hr />
<h2>Visualization</h2>
<p>Double click to view entity details!</p>
<svg id="graph" width="800" height="600"></svg>

%# FORCE-DIRECTED GRAPH VISUALIZATION
%
%   my $entity_style = {
%       radius          => 15,
%       border_width    =>  3,
%       color           => '#fd9',
%       border          => '#999',
%   };
%   my $label_style = {
%       width   => 40,
%       height  => 20,
%       color   => 'black',
%   };
%   my $link_style = {
%       thickness   => 5,
%       color       => 'lightgrey',
%   };
%
%= include 'graph_css', entity => $entity_style, label => $label_style, link => $link_style;
%= javascript begin

var graph   = d3.select('svg#graph');
var width   = + graph.attr('width');
var height  = + graph.attr('height');

// Prepare
var simulation = d3.forceSimulation();

// Fetch data via JSON
d3.json('<%= url_for d3_map_data => (format => 'json')  %>').then((data) => {

    // A group for all entities
    var nodes = graph.append('g').attr('id', 'entity_group');

    // A group for each entity
    var nodes_group = nodes.selectAll('g.entity').data(data.nodes)
        .enter().append('g').attr('class', 'entity');

    // Interaction!
    nodes_group.call(d3.drag()
        .on('start', (d) => {
            if (!d3.event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }).on('drag', (d) => {
            d.fx = d3.event.x;
            d.fy = d3.event.y;
        }).on('end', (d) => {
            if (!d3.event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }));

    // Entity circles
    nodes_group.append('circle')

    // Entity text labels
    nodes_group.append('text').attr('class', 'label').text((d) => d.name)

    // Links for each connection
    // Arrow tips: https://stackoverflow.com/a/11809868
    var links = graph.append('g').attr('id', 'link_group');
    links.selectAll('line').data(data.links)
        .enter().append('line').attr('class', 'link')

    // Move to the back
    links.lower();

    // May the force be with us
    simulation
        .nodes(data.nodes)
        .force('chargeForce', d3.forceManyBody())
        .force('centerForce', d3.forceCenter(width/2, height/2))
        .force('linkForce',   d3.forceLink(data.links).id((d) => d.name))
        .on('tick', () => {

            // Circles
            nodes_group.selectAll('circle')
                .attr('cx', (d) => d.x)
                .attr('cy', (d) => d.y);

            // Labels
            nodes_group.selectAll('text')
                .attr('x', (d) => d.x)
                .attr('y', (d) => d.y);

            // Links
            links.selectAll('line')
                .attr('x1', (d) => d.source.x)
                .attr('y1', (d) => d.source.y)
                .attr('x2', (d) => d.target.x)
                .attr('y2', (d) => d.target.y);
        });
});

% end
%# END OF VISUALIZATION

%# enter a connection form
<hr />
<h2>New connection</h2>
%= form_for 'add_connection' => (id => 'add_connection') => begin
    %= text_field from => '', id => 'from'
    &mdash;<%= text_field type => '', id => 'type' %>â†’
    %= text_field to   => '', id => 'to'
    %= submit_button 'Add connection'
% end
%= javascript begin
$(function() {
    $('#from').focus();
});
% end

%# auto-completion code
%= javascript begin
$(function() {
    $('#from, #to').autocomplete({
        source: '<%= url_for 'entity_completion' %>',
    });
    $('#type').autocomplete({
        source: '<%= url_for 'connection_completion' %>',
    });
});
% end

%# entity cloud
<hr />
<h2>Entity cloud</h2>
%= include 'entity_cloud'

<hr />
<h2>Entities</h2>
%= include 'entity_list'

%# dump connections
<hr />
<h2>Connections</h2>
<ol id="connections">
% my @sorted_conn = sort {
%   $a->{from} cmp $b->{from} or $a->{to} cmp $b->{to}
% } values %{$map->{connections}};
% for my $conn (@sorted_conn) {
    <li>
    %= form_for delete_connection => (class => 'delete_connection') => begin
        %= hidden_field connection_id => $conn->{id}
        %= link_to show_entity => {entity_name => $conn->{from}} => begin
            <strong><%= $conn->{from} %></strong>
        % end
        %= $conn->{type}
        %= link_to show_entity => {entity_name => $conn->{to}} => begin
            <strong><%= $conn->{to} %></strong>
        % end
        %= submit_button 'x'
    % end
    </li>
% }
</ol>

%# edit map data
<hr />
<h2>Edit map data</h2>
%= form_for edit_map => (id => 'edit_map') => begin
    <table>
        <tr><th><%= label_for name => 'name' %></th><td>
            %= text_field name => (id => 'name', value => $map->{name})
        </td></tr>
        <tr><th><%= label_for description => 'description' %></th><td>
            <%= text_area description => (rows => 3, cols => 60) => begin %><%= $map->{description} =%><% end %>
        </td></tr>
    </table>
    %= submit_button 'Edit'
% end

%# tgf export
<hr />
<h2>TGF export</h2>
%= form_for tgf_export => (id => 'tgf_export') => begin
    %= submit_button 'Download'
%= end

%# delete this map?
<hr />
<h2>Delete this map</h2>
%= form_for delete_map => (id => 'delete_map') => begin
    %= submit_button 'Do it'
% end
