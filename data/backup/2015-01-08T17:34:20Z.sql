
PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE map (
    id          INTEGER,
    name        STRING,
    description STRING,
    PRIMARY KEY (id)
);
INSERT INTO "map" VALUES(1,'I10_Gruppe01','Informatik I WS1415 contents according to I10_Gruppe01');
INSERT INTO "map" VALUES(2,'I10_Gruppe02','Informatik I WS1415 contents according to I10_Gruppe02');
INSERT INTO "map" VALUES(3,'I10_Gruppe04','Informatik I WS1415 contents according to I10_Gruppe04');
INSERT INTO "map" VALUES(4,'I10_Gruppe05','Informatik I WS1415 contents according to I10_Gruppe05');
INSERT INTO "map" VALUES(5,'I10_Gruppe06','Informatik I WS1415 contents according to I10_Gruppe06');
INSERT INTO "map" VALUES(6,'I10_Gruppe07','Informatik I WS1415 contents according to I10_Gruppe07');
INSERT INTO "map" VALUES(7,'I10_Gruppe08','Informatik I WS1415 contents according to I10_Gruppe08');
INSERT INTO "map" VALUES(8,'I10_Gruppe10','Informatik I WS1415 contents according to I10_Gruppe10');
INSERT INTO "map" VALUES(9,'I11_Gruppe01','Informatik I WS1415 contents according to I11_Gruppe01');
INSERT INTO "map" VALUES(10,'I11_Gruppe02','Informatik I WS1415 contents according to I11_Gruppe02');
INSERT INTO "map" VALUES(11,'I11_Gruppe03','Informatik I WS1415 contents according to I11_Gruppe03');
INSERT INTO "map" VALUES(12,'I11_Gruppe04','Informatik I WS1415 contents according to I11_Gruppe04');
INSERT INTO "map" VALUES(13,'I11_Gruppe05','Informatik I WS1415 contents according to I11_Gruppe05');
INSERT INTO "map" VALUES(14,'I11_Gruppe07','Informatik I WS1415 contents according to I11_Gruppe07');
INSERT INTO "map" VALUES(15,'I12_Gruppe03','Informatik I WS1415 contents according to I12_Gruppe03');
INSERT INTO "map" VALUES(16,'I12_Gruppe04','Informatik I WS1415 contents according to I12_Gruppe04');
INSERT INTO "map" VALUES(17,'I12_Gruppe05','Informatik I WS1415 contents according to I12_Gruppe05');
INSERT INTO "map" VALUES(18,'I12_Gruppe07','Informatik I WS1415 contents according to I12_Gruppe07');
INSERT INTO "map" VALUES(19,'I13_Gruppe01','Informatik I WS1415 contents according to I13_Gruppe01');
INSERT INTO "map" VALUES(20,'I13_Gruppe04','Informatik I WS1415 contents according to I13_Gruppe04');
INSERT INTO "map" VALUES(21,'I13_Gruppe06','Informatik I WS1415 contents according to I13_Gruppe06');
INSERT INTO "map" VALUES(22,'I13_Gruppe08','Informatik I WS1415 contents according to I13_Gruppe08');
INSERT INTO "map" VALUES(23,'I1_Gruppe01','Informatik I WS1415 contents according to I1_Gruppe01');
INSERT INTO "map" VALUES(24,'I1_Gruppe02','Informatik I WS1415 contents according to I1_Gruppe02');
INSERT INTO "map" VALUES(25,'I1_Gruppe03','Informatik I WS1415 contents according to I1_Gruppe03');
INSERT INTO "map" VALUES(26,'I1_Gruppe04','Informatik I WS1415 contents according to I1_Gruppe04');
INSERT INTO "map" VALUES(27,'I1_Gruppe07','Informatik I WS1415 contents according to I1_Gruppe07');
INSERT INTO "map" VALUES(28,'I1_Gruppe08','Informatik I WS1415 contents according to I1_Gruppe08');
INSERT INTO "map" VALUES(29,'I2_Gruppe01','Informatik I WS1415 contents according to I2_Gruppe01');
INSERT INTO "map" VALUES(30,'I2_Gruppe02','Informatik I WS1415 contents according to I2_Gruppe02');
INSERT INTO "map" VALUES(31,'I2_Gruppe04','Informatik I WS1415 contents according to I2_Gruppe04');
INSERT INTO "map" VALUES(32,'I2_Gruppe05','Informatik I WS1415 contents according to I2_Gruppe05');
INSERT INTO "map" VALUES(33,'I2_Gruppe07','Informatik I WS1415 contents according to I2_Gruppe07');
INSERT INTO "map" VALUES(34,'I3_Gruppe01','Informatik I WS1415 contents according to I3_Gruppe01');
INSERT INTO "map" VALUES(35,'I3_Gruppe02','Informatik I WS1415 contents according to I3_Gruppe02');
INSERT INTO "map" VALUES(36,'I3_Gruppe04','Informatik I WS1415 contents according to I3_Gruppe04');
INSERT INTO "map" VALUES(37,'I3_Gruppe07','Informatik I WS1415 contents according to I3_Gruppe07');
INSERT INTO "map" VALUES(38,'I4_Gruppe01','Informatik I WS1415 contents according to I4_Gruppe01');
INSERT INTO "map" VALUES(39,'I4_Gruppe02','Informatik I WS1415 contents according to I4_Gruppe02');
INSERT INTO "map" VALUES(40,'I4_Gruppe03','Informatik I WS1415 contents according to I4_Gruppe03');
INSERT INTO "map" VALUES(41,'I4_Gruppe04','Informatik I WS1415 contents according to I4_Gruppe04');
INSERT INTO "map" VALUES(42,'I4_Gruppe06','Informatik I WS1415 contents according to I4_Gruppe06');
INSERT INTO "map" VALUES(43,'I4_Gruppe08','Informatik I WS1415 contents according to I4_Gruppe08');
INSERT INTO "map" VALUES(44,'I4_Gruppe09','Informatik I WS1415 contents according to I4_Gruppe09');
INSERT INTO "map" VALUES(45,'I4_Gruppe10','Informatik I WS1415 contents according to I4_Gruppe10');
INSERT INTO "map" VALUES(46,'I5_Gruppe01','Informatik I WS1415 contents according to I5_Gruppe01');
INSERT INTO "map" VALUES(47,'I5_Gruppe02','Informatik I WS1415 contents according to I5_Gruppe02');
INSERT INTO "map" VALUES(48,'I5_Gruppe04','Informatik I WS1415 contents according to I5_Gruppe04');
INSERT INTO "map" VALUES(49,'I5_Gruppe05','Informatik I WS1415 contents according to I5_Gruppe05');
INSERT INTO "map" VALUES(50,'I5_Gruppe07','Informatik I WS1415 contents according to I5_Gruppe07');
INSERT INTO "map" VALUES(51,'I6_Gruppe05','Informatik I WS1415 contents according to I6_Gruppe05');
INSERT INTO "map" VALUES(52,'I6_Gruppe06','Informatik I WS1415 contents according to I6_Gruppe06');
INSERT INTO "map" VALUES(53,'I6_Gruppe07','Informatik I WS1415 contents according to I6_Gruppe07');
INSERT INTO "map" VALUES(54,'I7_Gruppe01','Informatik I WS1415 contents according to I7_Gruppe01');
INSERT INTO "map" VALUES(55,'I7_Gruppe02','Informatik I WS1415 contents according to I7_Gruppe02');
INSERT INTO "map" VALUES(56,'I7_Gruppe03','Informatik I WS1415 contents according to I7_Gruppe03');
INSERT INTO "map" VALUES(57,'I7_Gruppe04','Informatik I WS1415 contents according to I7_Gruppe04');
INSERT INTO "map" VALUES(58,'I7_Gruppe05','Informatik I WS1415 contents according to I7_Gruppe05');
INSERT INTO "map" VALUES(59,'I7_Gruppe07','Informatik I WS1415 contents according to I7_Gruppe07');
INSERT INTO "map" VALUES(60,'I7_Gruppe08','Informatik I WS1415 contents according to I7_Gruppe08');
INSERT INTO "map" VALUES(61,'I7_Gruppe09','Informatik I WS1415 contents according to I7_Gruppe09');
INSERT INTO "map" VALUES(62,'I7_Gruppe10','Informatik I WS1415 contents according to I7_Gruppe10');
INSERT INTO "map" VALUES(63,'I8_Gruppe01','Informatik I WS1415 contents according to I8_Gruppe01');
INSERT INTO "map" VALUES(64,'I8_Gruppe02','Informatik I WS1415 contents according to I8_Gruppe02');
INSERT INTO "map" VALUES(65,'I8_Gruppe03','Informatik I WS1415 contents according to I8_Gruppe03');
INSERT INTO "map" VALUES(66,'I8_Gruppe04','Informatik I WS1415 contents according to I8_Gruppe04');
INSERT INTO "map" VALUES(67,'I8_Gruppe07','Informatik I WS1415 contents according to I8_Gruppe07');
INSERT INTO "map" VALUES(68,'I8_Gruppe09','Informatik I WS1415 contents according to I8_Gruppe09');
INSERT INTO "map" VALUES(69,'I9_Gruppe02','Informatik I WS1415 contents according to I9_Gruppe02');
INSERT INTO "map" VALUES(70,'I9_Gruppe03','Informatik I WS1415 contents according to I9_Gruppe03');
INSERT INTO "map" VALUES(71,'I9_Gruppe05','Informatik I WS1415 contents according to I9_Gruppe05');
INSERT INTO "map" VALUES(72,'I9_Gruppe06','Informatik I WS1415 contents according to I9_Gruppe06');
INSERT INTO "map" VALUES(73,'I9_Gruppe07','Informatik I WS1415 contents according to I9_Gruppe07');
INSERT INTO "map" VALUES(74,'W1_Gruppe01','Informatik I WS1415 contents according to W1_Gruppe01');
INSERT INTO "map" VALUES(75,'W1_Gruppe02','Informatik I WS1415 contents according to W1_Gruppe02');
INSERT INTO "map" VALUES(76,'W1_Gruppe03','Informatik I WS1415 contents according to W1_Gruppe03');
INSERT INTO "map" VALUES(77,'W1_Gruppe04','Informatik I WS1415 contents according to W1_Gruppe04');
INSERT INTO "map" VALUES(78,'W1_Gruppe05','Informatik I WS1415 contents according to W1_Gruppe05');
INSERT INTO "map" VALUES(79,'W1_Gruppe06','Informatik I WS1415 contents according to W1_Gruppe06');
INSERT INTO "map" VALUES(80,'W1_Gruppe08','Informatik I WS1415 contents according to W1_Gruppe08');
INSERT INTO "map" VALUES(81,'W1_Gruppe09','Informatik I WS1415 contents according to W1_Gruppe09');
INSERT INTO "map" VALUES(82,'W1_Gruppe10','Informatik I WS1415 contents according to W1_Gruppe10');
INSERT INTO "map" VALUES(83,'W1_Gruppe12','Informatik I WS1415 contents according to W1_Gruppe12');
INSERT INTO "map" VALUES(84,'W2_Gruppe01','Informatik I WS1415 contents according to W2_Gruppe01');
INSERT INTO "map" VALUES(85,'W2_Gruppe02','Informatik I WS1415 contents according to W2_Gruppe02');
INSERT INTO "map" VALUES(86,'W2_Gruppe03','Informatik I WS1415 contents according to W2_Gruppe03');
INSERT INTO "map" VALUES(87,'W2_Gruppe04','Informatik I WS1415 contents according to W2_Gruppe04');
INSERT INTO "map" VALUES(88,'W2_Gruppe07','Informatik I WS1415 contents according to W2_Gruppe07');
INSERT INTO "map" VALUES(89,'W2_Gruppe08','Informatik I WS1415 contents according to W2_Gruppe08');
INSERT INTO "map" VALUES(90,'W2_Gruppe09','Informatik I WS1415 contents according to W2_Gruppe09');
INSERT INTO "map" VALUES(91,'W2_Gruppe11','Informatik I WS1415 contents according to W2_Gruppe11');
INSERT INTO "map" VALUES(92,'W3_A','Informatik I WS1415 contents according to W3_A');
INSERT INTO "map" VALUES(93,'W3_B','Informatik I WS1415 contents according to W3_B');
INSERT INTO "map" VALUES(94,'W3_F','Informatik I WS1415 contents according to W3_F');
INSERT INTO "map" VALUES(95,'W3_G','Informatik I WS1415 contents according to W3_G');
INSERT INTO "map" VALUES(96,'W3_J','Informatik I WS1415 contents according to W3_J');
INSERT INTO "map" VALUES(97,'W3_K','Informatik I WS1415 contents according to W3_K');
INSERT INTO "map" VALUES(98,'W3_L','Informatik I WS1415 contents according to W3_L');
INSERT INTO "map" VALUES(99,'W4_Gruppe01','Informatik I WS1415 contents according to W4_Gruppe01');
INSERT INTO "map" VALUES(100,'W4_Gruppe02','Informatik I WS1415 contents according to W4_Gruppe02');
INSERT INTO "map" VALUES(101,'W4_Gruppe03','Informatik I WS1415 contents according to W4_Gruppe03');
INSERT INTO "map" VALUES(102,'W4_Gruppe04','Informatik I WS1415 contents according to W4_Gruppe04');
INSERT INTO "map" VALUES(103,'W4_Gruppe05','Informatik I WS1415 contents according to W4_Gruppe05');
INSERT INTO "map" VALUES(104,'W4_Gruppe08','Informatik I WS1415 contents according to W4_Gruppe08');
INSERT INTO "map" VALUES(105,'W4_Gruppe09','Informatik I WS1415 contents according to W4_Gruppe09');
INSERT INTO "map" VALUES(106,'W4_Gruppe10','Informatik I WS1415 contents according to W4_Gruppe10');
INSERT INTO "map" VALUES(107,'W4_Gruppe11','Informatik I WS1415 contents according to W4_Gruppe11');
INSERT INTO "map" VALUES(108,'W4_Gruppe12','Informatik I WS1415 contents according to W4_Gruppe12');
INSERT INTO "map" VALUES(109,'W4_Gruppe13','Informatik I WS1415 contents according to W4_Gruppe13');
INSERT INTO "map" VALUES(110,'W5_Gruppe03','Informatik I WS1415 contents according to W5_Gruppe03');
INSERT INTO "map" VALUES(111,'W5_Gruppe05','Informatik I WS1415 contents according to W5_Gruppe05');
INSERT INTO "map" VALUES(112,'W5_Gruppe07','Informatik I WS1415 contents according to W5_Gruppe07');
INSERT INTO "map" VALUES(113,'W5_Gruppe09','Informatik I WS1415 contents according to W5_Gruppe09');
CREATE TABLE connection (
    map_id      INTEGER,
    from_name   STRING,
    type        STRING,
    to_name     STRING,
    PRIMARY KEY (map_id, from_name, type, to_name),
    FOREIGN KEY (map_id) REFERENCES map (id)
);
INSERT INTO "connection" VALUES(1,'Blatt 9','enthält','Syntaxdiagramm, BNF');
INSERT INTO "connection" VALUES(1,'Übungen','hat besprochen','Blatt 1');
INSERT INTO "connection" VALUES(1,'Vorlesung','verweist manchmal auf','Vorlesung');
INSERT INTO "connection" VALUES(1,'Informatik I','beinhaltet','Übungen');
INSERT INTO "connection" VALUES(1,'Übungen','wird besprochen haben','Blatt 9');
INSERT INTO "connection" VALUES(1,'Informatik I','beinhaltet','Vorlesung');
INSERT INTO "connection" VALUES(1,'Übungen','hat besprochen','Blatt 2');
INSERT INTO "connection" VALUES(1,'Vorlesung','verwendet','Racket');
INSERT INTO "connection" VALUES(1,'Vorlesung','erlklärte','Syntaxdiagramm, BNF');
INSERT INTO "connection" VALUES(1,'Blatt 2','enthält','Racket');
INSERT INTO "connection" VALUES(1,'Blatt 1','verwendet','Racket');
INSERT INTO "connection" VALUES(2,'Auswertung','ist','linear');
INSERT INTO "connection" VALUES(2,'Blatt','ist','Knoten');
INSERT INTO "connection" VALUES(2,'Signatur (SO, OP, ar)','hat','Aritätsfunktion');
INSERT INTO "connection" VALUES(2,'Wertebereich','kann gebildet werden durch','Kartesisches Produkt');
INSERT INTO "connection" VALUES(2,'Spezifikation (SIG, EQ)','definiert','abstrakter Datentyp');
INSERT INTO "connection" VALUES(2,'Konjunktion','ist','Junktoren');
INSERT INTO "connection" VALUES(2,'Auswertung','hat zur Folge','Prozess');
INSERT INTO "connection" VALUES(2,'Prozess','ist','iterativ');
INSERT INTO "connection" VALUES(2,'Traversierung','eine Form','Inorder: l - W - r');
INSERT INTO "connection" VALUES(2,'Involution','ist ein','Gesetze');
INSERT INTO "connection" VALUES(2,'Boolsche Algebra','ist eine','Algebra');
INSERT INTO "connection" VALUES(2,'Spezifikation (SIG, EQ)','hat','Signatur (SO, OP, ar)');
INSERT INTO "connection" VALUES(2,'direkt rekusrsiv','also','Funktion stützt sich direkt auf sich selbst ab');
INSERT INTO "connection" VALUES(2,'Signatur (SO, OP, ar)','hat','Menge von Operatorsymbolen');
INSERT INTO "connection" VALUES(2,'Datentyp','hat','Menge an Operationen');
INSERT INTO "connection" VALUES(2,'Traversierung','eine Form','Präorder: W - l - r');
INSERT INTO "connection" VALUES(2,'rekursive Funktion','ist','indirekt rekursiv');
INSERT INTO "connection" VALUES(2,'abstrakter Datentyp','hat keinen Bezug zu','Implementierung');
INSERT INTO "connection" VALUES(2,'Assoziativgesetz','ist ein','Gesetze');
INSERT INTO "connection" VALUES(2,'rekursive Funktion','ist','direkt rekusrsiv');
INSERT INTO "connection" VALUES(2,'indirekt rekursiv','also','Funktion stützt sich schrittweise auf sich selbst ab');
INSERT INTO "connection" VALUES(2,'Spezifikation (SIG, EQ)','hat','Menge von Gleichungen');
INSERT INTO "connection" VALUES(2,'Auswertung','ist','endrekursiv');
INSERT INTO "connection" VALUES(2,'interner Knoten','ist','Knoten');
INSERT INTO "connection" VALUES(2,'Distributivgesetz','ist ein','Gesetze');
INSERT INTO "connection" VALUES(2,'Wertebereich','kann gebildet werden durch','Disjunkte Vereinigung');
INSERT INTO "connection" VALUES(2,'Prozess','ist','rekursiv');
INSERT INTO "connection" VALUES(2,'Absorptionsgesetz','ist ein','Gesetze');
INSERT INTO "connection" VALUES(2,'Baum B','hat','Knoten');
INSERT INTO "connection" VALUES(2,'Traversierung','durchsucht','Binärbaum');
INSERT INTO "connection" VALUES(2,'Äquivalenz','ist','Junktoren');
INSERT INTO "connection" VALUES(2,'atomare Aussage','benutzt keine','Junktoren');
INSERT INTO "connection" VALUES(2,'nicht-linear','ist','rekursiv');
INSERT INTO "connection" VALUES(2,'Kommutativgesetz','ist ein','Gesetze');
INSERT INTO "connection" VALUES(2,'rekursive Funktion','hat','Auswertung');
INSERT INTO "connection" VALUES(2,'Negation','ist','Junktoren');
INSERT INTO "connection" VALUES(2,'Traversierung','eine Form','Postorder: l - r - W');
INSERT INTO "connection" VALUES(2,'endrekursiv','ist','iterativ');
INSERT INTO "connection" VALUES(2,'Idempotenzgesetz','ist ein','Gesetze');
INSERT INTO "connection" VALUES(2,'Binärbaum','ist ein','Baum B');
INSERT INTO "connection" VALUES(2,'Datentyp','hat','Wertebereich');
INSERT INTO "connection" VALUES(2,'abstrakter Datentyp','ist ein','Datentyp');
INSERT INTO "connection" VALUES(2,'Auswertung','ist','nicht-linear');
INSERT INTO "connection" VALUES(2,'linear','ist','rekursiv');
INSERT INTO "connection" VALUES(2,'Boolsche Algebra','unterliegt','Gesetze');
INSERT INTO "connection" VALUES(2,'Implikation','ist','Junktoren');
INSERT INTO "connection" VALUES(2,'Regel von de Morgan','ist ein','Gesetze');
INSERT INTO "connection" VALUES(2,'Signatur (SO, OP, ar)','hat','Menge von Sorten');
INSERT INTO "connection" VALUES(2,'Disjunktion','ist','Junktoren');
INSERT INTO "connection" VALUES(2,'Boolsche Algebra','benutzt','Junktoren');
INSERT INTO "connection" VALUES(2,'Neutralitätsgesetz','ist ein','Gesetze');
INSERT INTO "connection" VALUES(3,'Programmiersprache','benutzt','Aussagenlogik');
INSERT INTO "connection" VALUES(3,'Racket','ist eine','Programmiersprache');
INSERT INTO "connection" VALUES(3,'Selbstaufruf','ermöglicht','Rekursion');
INSERT INTO "connection" VALUES(3,'Veständlichkeit','trägt bei zur','Problemlösung');
INSERT INTO "connection" VALUES(3,'Datentypen','beschreiben','Informationen');
INSERT INTO "connection" VALUES(3,'Strukturen','fördern','Veständlichkeit');
INSERT INTO "connection" VALUES(3,'Funktionen','ermöglichen','Selbstaufruf');
INSERT INTO "connection" VALUES(3,'Racket','definiert','Funktionen');
INSERT INTO "connection" VALUES(3,'Dokumentation (Benennung, Beispiele...)','von','Hilfsfunktionen');
INSERT INTO "connection" VALUES(3,'Veständlichkeit','steigert','Effizienz');
INSERT INTO "connection" VALUES(3,'Rekursion','steigert','Effizienz');
INSERT INTO "connection" VALUES(3,'Funktionen','zur Verarbeitung von','Informationen');
INSERT INTO "connection" VALUES(3,'Aussagenlogik','zur Verarbeitung von','Informationen');
INSERT INTO "connection" VALUES(3,'Funktionen','werden unterteilt in','Hilfsfunktionen');
INSERT INTO "connection" VALUES(3,'Datentypen','sichern','Strukturen');
INSERT INTO "connection" VALUES(3,'Effizienz','beschleunigt','Problemlösung');
INSERT INTO "connection" VALUES(3,'Abstrakte Datentypen','steigern','Effizienz');
INSERT INTO "connection" VALUES(3,'Dokumentation (Benennung, Beispiele...)','trägt bei zur','Veständlichkeit');
INSERT INTO "connection" VALUES(3,'Datentypen','ermöglichen','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(3,'Hilfsfunktionen','verbessern','Veständlichkeit');
INSERT INTO "connection" VALUES(3,'Dokumentation (Benennung, Beispiele...)','von','Funktionen');
INSERT INTO "connection" VALUES(3,'Informationen','benötigt zur','Problemlösung');
INSERT INTO "connection" VALUES(3,'Java','ist eine','Programmiersprache');
INSERT INTO "connection" VALUES(4,'Datenanalyse','beschreibt','Fallunterscheidung');
INSERT INTO "connection" VALUES(4,'Programm','enthält','Beispiele');
INSERT INTO "connection" VALUES(4,'Programm','enthält','Hilfsfunktionen');
INSERT INTO "connection" VALUES(4,'Rekursion','beinhaltet in','Funktionen');
INSERT INTO "connection" VALUES(4,'Programm','enthält','Signatur, Zweck, Funktionskopf');
INSERT INTO "connection" VALUES(4,'Terminierung','erforderlich für','Rekursion');
INSERT INTO "connection" VALUES(4,'Tests','folgen aus','Beispiele');
INSERT INTO "connection" VALUES(4,'Datenanalyse','entwickelt','Datendefinition');
INSERT INTO "connection" VALUES(4,'Hilfsfunktionen','tragen bei zur','Lesbarkeit, Wartbarkeit, Konsistenz');
INSERT INTO "connection" VALUES(4,'cond','Teil von','Fallunterscheidung');
INSERT INTO "connection" VALUES(4,'Funktionen','beschränkt auf','Datentypen und Wertebereich');
INSERT INTO "connection" VALUES(4,'Funktionen','bilden','Funktionsrumpf');
INSERT INTO "connection" VALUES(4,'Funktionen','benutzen','Fallunterscheidung');
INSERT INTO "connection" VALUES(4,'Programm','enthält','Funktionsrumpf');
INSERT INTO "connection" VALUES(4,'while','Teil von','Fallunterscheidung');
INSERT INTO "connection" VALUES(4,'if','Teil von','Fallunterscheidung');
INSERT INTO "connection" VALUES(4,'Rekursionsschritt','erforderlich für','Rekursion');
INSERT INTO "connection" VALUES(5,'Racket','verwendet','Listen');
INSERT INTO "connection" VALUES(5,'Programme','beginnen mit','Signatur, Zweck, Fkt.kopf');
INSERT INTO "connection" VALUES(5,'Programme','benutzt','Schablonen');
INSERT INTO "connection" VALUES(5,'Racket','setzt um','Fallunterscheidungen');
INSERT INTO "connection" VALUES(5,'Programme','bestehen aus','Listen');
INSERT INTO "connection" VALUES(5,'Programme','benutzt','abstrakter Datentyp');
INSERT INTO "connection" VALUES(5,'Studierende','hören','Informatik 1');
INSERT INTO "connection" VALUES(5,'Programme','benutzen','Rekursion');
INSERT INTO "connection" VALUES(5,'Studierende','verwenden','Racket');
INSERT INTO "connection" VALUES(5,'Informatik 1','beinhaltet','Kapitel 2-6');
INSERT INTO "connection" VALUES(5,'Racket','benutzt','Rekursion');
INSERT INTO "connection" VALUES(5,'Racket','erstellt','Programme');
INSERT INTO "connection" VALUES(5,'Studierende','unterscheidet','Fallunterscheidungen');
INSERT INTO "connection" VALUES(5,'Kapitel 2-6','behandelt','Racket');
INSERT INTO "connection" VALUES(5,'Programme','benutzt','strukturierter Datentyp');
INSERT INTO "connection" VALUES(6,'Konstruktion von Listen','hat','Schablone');
INSERT INTO "connection" VALUES(6,'Rachet','erstellt','Programme');
INSERT INTO "connection" VALUES(6,'Studierende','hört','Informatik I Vorlesung');
INSERT INTO "connection" VALUES(6,'Vorlesungskapitel 1-6','behandelt','Rachet');
INSERT INTO "connection" VALUES(6,'Datenanalyse','bietet die Verwendung von .. an','Schablone');
INSERT INTO "connection" VALUES(6,'Programme','benötigt zur Verständnis','Dokumentation');
INSERT INTO "connection" VALUES(6,'boolesche Algebra','hat','Terminierung');
INSERT INTO "connection" VALUES(6,'Studierende','benutzt','Fallunterscheidung');
INSERT INTO "connection" VALUES(6,'strukturierte Datendefinition','ist','Datenanalyse');
INSERT INTO "connection" VALUES(6,'Studierende','benutzt','Rachet');
INSERT INTO "connection" VALUES(6,'Studierende','schreibt','Dokumentation');
INSERT INTO "connection" VALUES(6,'Programme','hat','strukturierte Datendefinition');
INSERT INTO "connection" VALUES(6,'Schablone','vereinfacht','Programme');
INSERT INTO "connection" VALUES(6,'Fallunterscheidung','ähnelt','boolesche Algebra');
INSERT INTO "connection" VALUES(6,'Programme','braucht','Terminierung');
INSERT INTO "connection" VALUES(6,'Vorlesungskapitel 1-6','ist Teil von','Informatik I Vorlesung');
INSERT INTO "connection" VALUES(6,'Programme','erstellt','Konstruktion von Listen');
INSERT INTO "connection" VALUES(7,'map','erzeugt','Liste');
INSERT INTO "connection" VALUES(7,'disjunkte Vereinigung','bildet','Wertebereich');
INSERT INTO "connection" VALUES(7,'Syntax','validiert','Ausdruck');
INSERT INTO "connection" VALUES(7,'Typisierung','benutzt','Datentyp');
INSERT INTO "connection" VALUES(7,'Racket','benutzt','Infix-Notation');
INSERT INTO "connection" VALUES(7,'Spezifikation','enthält','Semantik');
INSERT INTO "connection" VALUES(7,'Alphabet','enthält','Zeichen');
INSERT INTO "connection" VALUES(7,'Datenanalyse','führt zu','Datendefinition');
INSERT INTO "connection" VALUES(7,'induktive Definition','definiert','Baum');
INSERT INTO "connection" VALUES(7,'rekursive Funktion','ist ggf.','endrekursive Funktion');
INSERT INTO "connection" VALUES(7,'kartesisches Produkt','bildet','Wertebereich');
INSERT INTO "connection" VALUES(7,'Liste','ist ein','abstrakter Datentyp');
INSERT INTO "connection" VALUES(7,'Boolesche Algebra','definiert','Junktor');
INSERT INTO "connection" VALUES(7,'Datentyp','besitzt','Wertebereich');
INSERT INTO "connection" VALUES(7,'Datendefinition','führt ggf zu','Typisierung');
INSERT INTO "connection" VALUES(7,'Liste','enthält','Selbstbezug');
INSERT INTO "connection" VALUES(7,'Spezifikation','enthält','Syntax');
INSERT INTO "connection" VALUES(7,'Funktion','ist ggf.','rekursive Funktion');
INSERT INTO "connection" VALUES(7,'Racket','wertet aus','Funktionsaufruf');
INSERT INTO "connection" VALUES(7,'Funktion','enthält ggf.','Selbstbezug');
INSERT INTO "connection" VALUES(7,'endrekursive Funktion','erzeugt','iterativer Prozess');
INSERT INTO "connection" VALUES(7,'Dokumentation','dokumentiert','Funktion');
INSERT INTO "connection" VALUES(7,'abstrakter Datentyp','ist ein','Datentyp');
INSERT INTO "connection" VALUES(7,'Datentyp','enthält','Operation');
INSERT INTO "connection" VALUES(7,'Datenanalyse','führt zu','Fallunterscheidung');
INSERT INTO "connection" VALUES(7,'Lambda-Kalkül','modelliert','Funktionaler Baukasten');
INSERT INTO "connection" VALUES(7,'Funktionsaufruf','ruft auf','Funktion');
INSERT INTO "connection" VALUES(7,'Spezifikation','spezifiziert','abstrakter Datentyp');
INSERT INTO "connection" VALUES(7,'Junktor','verknüpft','Aussage');
INSERT INTO "connection" VALUES(7,'Infix-Notation','stellt dar','Funktionsaufruf');
INSERT INTO "connection" VALUES(7,'Funktion','ist Basis für','Funktionaler Baukasten');
INSERT INTO "connection" VALUES(7,'Semantik','gibt Bedeutung','Ausdruck');
INSERT INTO "connection" VALUES(7,'Racket','implementiert','Funktionaler Baukasten');
INSERT INTO "connection" VALUES(7,'rekursive Funktion','erzeugt','rekursiver Prozess');
INSERT INTO "connection" VALUES(7,'induktive Definition','definiert z.T.','Ausdruck');
INSERT INTO "connection" VALUES(7,'Wort','besteht aus','Zeichen');
INSERT INTO "connection" VALUES(7,'induktive Definition','erzeugt','rekursive Funktion');
INSERT INTO "connection" VALUES(7,'Signatur','enthält','Dokumentation');
INSERT INTO "connection" VALUES(7,'Funktion','erfordern ggf.','Fallunterscheidung');
INSERT INTO "connection" VALUES(7,'Wertebereich','enthält ggf.','Funktion');
INSERT INTO "connection" VALUES(7,'induktive Definition','enthält','Selbstbezug');
INSERT INTO "connection" VALUES(7,'Zweck','enthält','Dokumentation');
INSERT INTO "connection" VALUES(7,'abstrakter Datentyp','enthält nicht','Implementierung');
INSERT INTO "connection" VALUES(7,'Rekursionsanker','terminiert','rekursive Funktion');
INSERT INTO "connection" VALUES(7,'Beispiele','enthält','Dokumentation');
INSERT INTO "connection" VALUES(7,'reduce','aggregiert','Liste');
INSERT INTO "connection" VALUES(7,'Tests','testen','Funktion');
INSERT INTO "connection" VALUES(7,'Operation','ist definiert auf','Wertebereich');
INSERT INTO "connection" VALUES(7,'Funktionsaufruf','ist ein','Ausdruck');
INSERT INTO "connection" VALUES(7,'Fallunterscheidung','wird entschieden durch','Aussage');
INSERT INTO "connection" VALUES(7,'Wort','sind Grundlage für','Syntax');
INSERT INTO "connection" VALUES(7,'Datendefinition','definiert','Datenbündel');
INSERT INTO "connection" VALUES(8,'Rechenvorschrift','besteht aus','Rechenoperation');
INSERT INTO "connection" VALUES(8,'Rechenvorschrift','definiert','Funktion');
INSERT INTO "connection" VALUES(8,'Ausdruck','benutzt','Datentyp');
INSERT INTO "connection" VALUES(8,'Programm','enthält','Funktion');
INSERT INTO "connection" VALUES(8,'Abstrakter Datentyp','ist Teil von','Datentyp');
INSERT INTO "connection" VALUES(8,'Rekursion','ist Teil von','Funktion');
INSERT INTO "connection" VALUES(8,'Zusammengesetzte Daten','ist Teil von','Datentyp');
INSERT INTO "connection" VALUES(8,'Funktion','besteht aus','Ausdruck');
INSERT INTO "connection" VALUES(8,'Liste','ist ein','Abstrakter Datentyp');
INSERT INTO "connection" VALUES(8,'Rechenoperation','ist ein','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(8,'Hilfsfunktion','ist eine','Funktion');
INSERT INTO "connection" VALUES(8,'Rekursion','enthält','Funktionsaufruf');
INSERT INTO "connection" VALUES(8,'bedingter Ausdruck','ist ein','Ausdruck');
INSERT INTO "connection" VALUES(8,'arithmetischer Ausdruck','ist ein','Ausdruck');
INSERT INTO "connection" VALUES(8,'Funktionsaufruf','ruft auf','Funktion');
INSERT INTO "connection" VALUES(8,'Programm','startet mit','Funktionsaufruf');
INSERT INTO "connection" VALUES(10,'Kommentare','zur Dokumentation der Vorgehensweise und zum Verständnis','Programmiersprache');
INSERT INTO "connection" VALUES(10,'Hilfsfunktion','werden oft gebraucht in','Racket');
INSERT INTO "connection" VALUES(10,'Algorithmen','werden entworfen in','Programmiersprache');
INSERT INTO "connection" VALUES(10,'Java','ist eine','Programmiersprache');
INSERT INTO "connection" VALUES(10,'Racket','Verwendung von','Funktionen');
INSERT INTO "connection" VALUES(10,'Racket','zur effizienteren','Programmiersprache');
INSERT INTO "connection" VALUES(10,'Fallunterscheidung','durch if Ausdruck in','Java');
INSERT INTO "connection" VALUES(10,'Funktionen','haben oft','Eingabe');
INSERT INTO "connection" VALUES(10,'Struktur','wenn Beschreibung eines Objekts mehr als eine Komponente','Racket');
INSERT INTO "connection" VALUES(10,'Rekursion','zur effizienteren','Problemlösung');
INSERT INTO "connection" VALUES(10,'Problemlösung','ist die Aufgabe','Problem');
INSERT INTO "connection" VALUES(10,'Problemlösung','durch Verwendung von','Algorithmen');
INSERT INTO "connection" VALUES(10,'Fallunterscheidung','muss oft gemacht werden bei','Problemlösung');
INSERT INTO "connection" VALUES(10,'Funktionen','haben oft','Ausgabe');
INSERT INTO "connection" VALUES(10,'Datenanalyse','führt ggs zur Verwendung','Struktur');
INSERT INTO "connection" VALUES(10,'Problem','wichtige Aspekte gefiltert durch','Datenanalyse');
INSERT INTO "connection" VALUES(10,'Fallunterscheidung','durch special form cond in','Racket');
INSERT INTO "connection" VALUES(11,'Algorithmus','kann enthalten','Hilfsfunktion');
INSERT INTO "connection" VALUES(11,'zusammengesetzter Ausdruck','ist','Operator');
INSERT INTO "connection" VALUES(11,'funktionale Programmiersprache','ist','zustandslos');
INSERT INTO "connection" VALUES(11,'not','ist','boolscher Ausdruck');
INSERT INTO "connection" VALUES(11,'Hilfsfunktion','verbessert','Wartbarkeit');
INSERT INTO "connection" VALUES(11,'and','ist','boolscher Ausdruck');
INSERT INTO "connection" VALUES(11,'Eingabe','ersetzt','Eingabeparameter');
INSERT INTO "connection" VALUES(11,'Algorithmus','besteht aus','Operator');
INSERT INTO "connection" VALUES(11,'Liste','ist','Datum');
INSERT INTO "connection" VALUES(11,'Algorithmus','benötigt','Eingabe');
INSERT INTO "connection" VALUES(11,'Hilfsfunktion','verbessert','Konsistenz');
INSERT INTO "connection" VALUES(11,'Algorithmus','erzeugt','Ausgabe');
INSERT INTO "connection" VALUES(11,'arithmetischer Ausdruck','ist','Operator');
INSERT INTO "connection" VALUES(11,'Hilfsfunktion','verbessert','Lesbarkeit');
INSERT INTO "connection" VALUES(11,'Algorithmus','kann enthalten','Eingabeparameter');
INSERT INTO "connection" VALUES(11,'or','ist','boolscher Ausdruck');
INSERT INTO "connection" VALUES(11,'funktionale Programmiersprache','beschreibt','Algorithmus');
INSERT INTO "connection" VALUES(11,'Eingabe','besteht aus','Datum');
INSERT INTO "connection" VALUES(11,'Algorithmus','kann definiert sein','rekursiv');
INSERT INTO "connection" VALUES(11,'strukturierte Daten','sind','Datum');
INSERT INTO "connection" VALUES(11,'boolscher Ausdruck','ist','Operator');
INSERT INTO "connection" VALUES(12,'Baum','kann enthalten','weitere Knoten');
INSERT INTO "connection" VALUES(12,'Liste','besteht aus','Rückgabewerte');
INSERT INTO "connection" VALUES(12,'Baum','werden','Traversierung');
INSERT INTO "connection" VALUES(12,'Racket','ist','Funktionale Programmiersprache');
INSERT INTO "connection" VALUES(12,'Funtionsrumpf','enthält','Hauptfunktion');
INSERT INTO "connection" VALUES(12,'Programme','verwendet','Operationen');
INSERT INTO "connection" VALUES(12,'Racket','arbeitet mit','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(12,'Racket','löst','Programme');
INSERT INTO "connection" VALUES(12,'Multiplikation','dargestellt als','Funktion');
INSERT INTO "connection" VALUES(12,'arithmetischer Ausdruck','beruht auf','Mathematik');
INSERT INTO "connection" VALUES(12,'Werte','müssen geprüft werden','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(12,'Funktionen','ein und ausgabe','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(12,'posn','erzeugt ergebniss für','Datendefinition für Punkte');
INSERT INTO "connection" VALUES(12,'Programme','essentiell','Kommentare');
INSERT INTO "connection" VALUES(12,'Racket','bestimmt','Boolesche Algebra');
INSERT INTO "connection" VALUES(12,'Numerale','repräsentiert','Zahl');
INSERT INTO "connection" VALUES(12,'Programme','beinhaltet','formale Parameter');
INSERT INTO "connection" VALUES(12,'konstantes Datenbündel','Teil von','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(12,'Programme','beinhaltet','Berechnungsvorschrift');
INSERT INTO "connection" VALUES(12,'terminierung','benötigt','Abbruchbedingung');
INSERT INTO "connection" VALUES(12,'Liste','besteht aus','Parameter');
INSERT INTO "connection" VALUES(12,'Liste','teil von','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(12,'arithmetischer Ausdruck','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(12,'arithmetischer Ausdruck','enthält','Operatorsymbole');
INSERT INTO "connection" VALUES(12,'Funktionale Programmiersprache','basiert auf','Mathematik');
INSERT INTO "connection" VALUES(12,'Programme','wertet aus','einfache Fallunterscheidung');
INSERT INTO "connection" VALUES(12,'Test','prüft','Programme');
INSERT INTO "connection" VALUES(12,'Baum','besteht aus','Wurzel');
INSERT INTO "connection" VALUES(12,'Datendefinition für Punkte','teil von','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(12,'Hilfsfunktion','unterstützt','Hauptfunktion');
INSERT INTO "connection" VALUES(12,'Programme','benötigt','Name');
INSERT INTO "connection" VALUES(12,'Signatur','gibt Infos','Programme');
INSERT INTO "connection" VALUES(12,'Racket','verwendet','Präfix Notation');
INSERT INTO "connection" VALUES(12,'Rekursion','arbeitet mit','terminierung');
INSERT INTO "connection" VALUES(12,'Funtionsrumpf','enthält','Hilfsfunktion');
INSERT INTO "connection" VALUES(12,'else','schließt ab','Mehrfache Fallunterscheidung');
INSERT INTO "connection" VALUES(12,'Boolesche Algebra','wird bezeichnet','prädikat');
INSERT INTO "connection" VALUES(12,'make entry','definiert','konstantes Datenbündel');
INSERT INTO "connection" VALUES(12,'Modelle','realisieren','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(12,'Programme','enthält','Funtionsrumpf');
INSERT INTO "connection" VALUES(12,'Schablonen','verwenden bei','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(12,'Racket','arbeitet mit','Rekursion');
INSERT INTO "connection" VALUES(12,'Auschieen von Operationen','prozess','Rekursion');
INSERT INTO "connection" VALUES(12,'Racket','wertet aus','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(12,'make sname','liefert','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(12,'Argumente','müssen ausgewertet werden','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(12,'Racket','verwendet','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(12,'Addition','dargestellt als','Funktion');
INSERT INTO "connection" VALUES(12,'Abstrakte Datentypen','konstruieren','Wertebereiche');
INSERT INTO "connection" VALUES(12,'einfache Fallunterscheidung','erweitert','Mehrfache Fallunterscheidung');
INSERT INTO "connection" VALUES(12,'Mehrfache Fallunterscheidung','geschrieben als','(cond (pred1 exp1)...)');
INSERT INTO "connection" VALUES(12,'Wurzel','strukturiert','weitere Knoten');
INSERT INTO "connection" VALUES(12,'Boolesche Algebra','Grundsatz für','einfache Fallunterscheidung');
INSERT INTO "connection" VALUES(12,'Programme','verwendet','Englisch');
INSERT INTO "connection" VALUES(12,'Operatorsymbole','repräsentiert','Funktion');
INSERT INTO "connection" VALUES(12,'arithmetischer Ausdruck','kann dargestellt werden als','Baum');
INSERT INTO "connection" VALUES(12,'lineare Funktionen','teil von','Rekursion');
INSERT INTO "connection" VALUES(12,'arithmetischer Ausdruck','enthält','Numerale');
INSERT INTO "connection" VALUES(12,'einfache Fallunterscheidung','geschrieben als','(if pred exp1 exp2)');
INSERT INTO "connection" VALUES(13,'Bedingter Ausdruck','wertet aus','Ausdruck');
INSERT INTO "connection" VALUES(13,'Rekursion','verarbeitet','Liste');
INSERT INTO "connection" VALUES(13,'Zusammengesetzte Daten','enthält','Ausdruck');
INSERT INTO "connection" VALUES(13,'Liste','enthaelt','Abstrakter Datentyp');
INSERT INTO "connection" VALUES(13,'Abstrakter Datentyp','kann sein','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(13,'Bedingter Ausdruck','terminiert','Rekursion');
INSERT INTO "connection" VALUES(13,'Rekursion','definiert','Ausdruck');
INSERT INTO "connection" VALUES(14,'arithmetische Ausdrücke','erstellen','Funktionen');
INSERT INTO "connection" VALUES(14,'mathematische Funktionen','sind','Funktionen');
INSERT INTO "connection" VALUES(14,'Funktionen','können','rekursiv definiert');
INSERT INTO "connection" VALUES(14,'arithmetische Ausdrücke','sind','mathematische Funktionen');
INSERT INTO "connection" VALUES(14,'bedingte Ausdrücke','sind','Daten');
INSERT INTO "connection" VALUES(14,'Aussagen','haben','boolesche Werte');
INSERT INTO "connection" VALUES(14,'bedingte Ausdrücke','erstellen','Funktionen');
INSERT INTO "connection" VALUES(14,'bedingte Ausdrücke','sind','Zeichenketten');
INSERT INTO "connection" VALUES(14,'Nummern und Operatoren','sind','Typen');
INSERT INTO "connection" VALUES(14,'Daten','haben','Typen');
INSERT INTO "connection" VALUES(14,'Funktionen','können','iterativ definiert');
INSERT INTO "connection" VALUES(14,'Daten','zusammengesetzt erstellen','Funktionen');
INSERT INTO "connection" VALUES(14,'bedingte Ausdrücke','sind','Aussagen');
INSERT INTO "connection" VALUES(14,'arithmetische Ausdrücke','sind','Daten');
INSERT INTO "connection" VALUES(14,'Zeichenketten','sind','Symbol und String');
INSERT INTO "connection" VALUES(14,'Nummern und Operatoren','sind','arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(14,'Symbol und String','sind','Typen');
INSERT INTO "connection" VALUES(14,'boolesche Werte','sind','Typen');
INSERT INTO "connection" VALUES(15,'Variablen','haben konstanten','Wert');
INSERT INTO "connection" VALUES(15,'Racket','verwendet','Struktur');
INSERT INTO "connection" VALUES(15,'Boolsche Algebra','verwendet','and / or / not');
INSERT INTO "connection" VALUES(15,'Komponente','hat','Wert');
INSERT INTO "connection" VALUES(15,'Funktion','kann definiert werden über','Rekursion/Induktion');
INSERT INTO "connection" VALUES(15,'special form','hat keinen','Wert');
INSERT INTO "connection" VALUES(15,'Racket','ist','typisierte Programmiersprache');
INSERT INTO "connection" VALUES(15,'Boolean','ist','Datentypen');
INSERT INTO "connection" VALUES(15,'if /cond /define','sind','special form');
INSERT INTO "connection" VALUES(15,'Funktion','hängt ab von','Parameter');
INSERT INTO "connection" VALUES(15,'Struktur','definiert','Selektor');
INSERT INTO "connection" VALUES(15,'abstrakter Datentyp','ist ein','Datentypen');
INSERT INTO "connection" VALUES(15,'Konstruktor','ist','Funktion');
INSERT INTO "connection" VALUES(15,'typisierte Programmiersprache','unterscheidet','Datentypen');
INSERT INTO "connection" VALUES(15,'Funktionale Programmierung','besteht aus','Funktion');
INSERT INTO "connection" VALUES(15,'number / symbol /string / struct /...','sind weitere','Datentypen');
INSERT INTO "connection" VALUES(15,'Wert','Menge von','abstrakter Datentyp');
INSERT INTO "connection" VALUES(15,'Modularisieren','verwenden','Variablen');
INSERT INTO "connection" VALUES(15,'Racket','verwendet','Präfix Notation');
INSERT INTO "connection" VALUES(15,'Methode','vereinfachen','Modularisieren');
INSERT INTO "connection" VALUES(15,'Abbruchbedingung','ist ein','Boolean');
INSERT INTO "connection" VALUES(15,'Rekursion/Induktion','Selbstbezug','Rekursion/Induktion');
INSERT INTO "connection" VALUES(15,'Liste','ist definiert über','Rekursion/Induktion');
INSERT INTO "connection" VALUES(15,'Methode','angeben','Signatur und Zweck');
INSERT INTO "connection" VALUES(15,'Typ-Prädikat','ist','Funktion');
INSERT INTO "connection" VALUES(15,'Boolsche Algebra','verwendet','Boolean');
INSERT INTO "connection" VALUES(15,'Schablone','zeigt auf','Komponente');
INSERT INTO "connection" VALUES(15,'Struktur','definiert','Typ-Prädikat');
INSERT INTO "connection" VALUES(15,'Struktur','hat (mehrere)','Komponente');
INSERT INTO "connection" VALUES(15,'Methode','angeben','Schablone');
INSERT INTO "connection" VALUES(15,'Racket','ist','Funktionale Programmierung');
INSERT INTO "connection" VALUES(15,'Rekursion/Induktion','benötigt (falls terminiert)','Abbruchbedingung');
INSERT INTO "connection" VALUES(15,'Lambda-Ausdruck','ist','Funktion');
INSERT INTO "connection" VALUES(15,'Liste','ist eine','Struktur');
INSERT INTO "connection" VALUES(15,'Funktion','hat','Wert');
INSERT INTO "connection" VALUES(15,'Racket','verwendet','if /cond /define');
INSERT INTO "connection" VALUES(15,'Hilfsfunktionen','modularisieren','Funktion');
INSERT INTO "connection" VALUES(15,'Typ-Prädikat','gibt zurück','Boolean');
INSERT INTO "connection" VALUES(15,'Selektor','ist','Funktion');
INSERT INTO "connection" VALUES(15,'Struktur','definiert','Konstruktor');
INSERT INTO "connection" VALUES(15,'Operator (ohne Implementierung)','Menge von','abstrakter Datentyp');
INSERT INTO "connection" VALUES(15,'Modularisieren','verwenden','Hilfsfunktionen');
INSERT INTO "connection" VALUES(16,'define-struct','kann verwendet werden zur Definition von neuen','Datentypen');
INSERT INTO "connection" VALUES(16,'List','ist','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(16,'Funktion','kann verwenden','Bedingte Ausdruecke');
INSERT INTO "connection" VALUES(16,'Programmiersprache','kann haben','Datentypen');
INSERT INTO "connection" VALUES(16,'Racket','ist ein Beispiel fuer eine','Funktionale Programmiersprache');
INSERT INTO "connection" VALUES(16,'lineare Rekursion','ist eine Art von','Rekursion');
INSERT INTO "connection" VALUES(16,'Bedingte Ausdruecke','kann in Racket umgesetzt werden mit','cond');
INSERT INTO "connection" VALUES(16,'Racket','hat','Datentypen');
INSERT INTO "connection" VALUES(16,'String','ist','Datentypen');
INSERT INTO "connection" VALUES(16,'Abstrakte Datentypen','sind unabhaengig von Implementierung definierte','Datentypen');
INSERT INTO "connection" VALUES(16,'if','ist','Special Forms');
INSERT INTO "connection" VALUES(16,'Operator','kann aufgefasst werden als','Funktion');
INSERT INTO "connection" VALUES(16,'cond','ist','Special Forms');
INSERT INTO "connection" VALUES(16,'+','ist','Operator');
INSERT INTO "connection" VALUES(16,'Programm','wird geschrieben in einer','Programmiersprache');
INSERT INTO "connection" VALUES(16,'Boolean','ist','Datentypen');
INSERT INTO "connection" VALUES(16,'Symbol','ist','Datentypen');
INSERT INTO "connection" VALUES(16,'Number','ist','Datentypen');
INSERT INTO "connection" VALUES(16,'define','ist','Special Forms');
INSERT INTO "connection" VALUES(16,'Funktionale Programmierung','ist ein','Programmierparadigma');
INSERT INTO "connection" VALUES(16,'Programm','besteht (in der funktionalen Programmierung) aus einer oder mehreren','Funktion');
INSERT INTO "connection" VALUES(16,'nicht-lineare Rekursion','ist eine Art von','Rekursion');
INSERT INTO "connection" VALUES(16,'Racket','hat','Special Forms');
INSERT INTO "connection" VALUES(16,'Funktionale Programmiersprache','ist eine','Programmiersprache');
INSERT INTO "connection" VALUES(16,'Bedingte Ausdruecke','kann in Racket umgesetzt werden mit','if');
INSERT INTO "connection" VALUES(16,'Lambda-Kalkuel','ist das Modell der','Funktionale Programmierung');
INSERT INTO "connection" VALUES(16,'Funktion','kann verwenden','Rekursion');
INSERT INTO "connection" VALUES(16,'Funktion','wird in Racket definiert mit','define');
INSERT INTO "connection" VALUES(16,'Funktionale Programmiersprache','folgt dem Paradigma der','Funktionale Programmierung');
INSERT INTO "connection" VALUES(16,'define-struct','ist','Special Forms');
INSERT INTO "connection" VALUES(16,'*','ist','Operator');
INSERT INTO "connection" VALUES(17,'/','sind Bestandteil von','Operatoren');
INSERT INTO "connection" VALUES(17,'ADT-Bezeichner','verbindet durch','define-struct');
INSERT INTO "connection" VALUES(17,'define','zu','Funktion mit Bezeichner');
INSERT INTO "connection" VALUES(17,'Weitere Operatoren..','sind Bestandteil von','Operatoren');
INSERT INTO "connection" VALUES(17,'Datentypen des ADT','verbindet durch','define-struct');
INSERT INTO "connection" VALUES(17,'Bezeichner','verbindet durch','define');
INSERT INTO "connection" VALUES(17,'Funktion mit Parametern','ist Bestandteil von','weiterer Funktion');
INSERT INTO "connection" VALUES(17,'list','ist Bestandteil von','Datentypen');
INSERT INTO "connection" VALUES(17,'ADT','ist Bestandteil von','Datentypen');
INSERT INTO "connection" VALUES(17,'Operatoren','sind Bestandteil von','Funktion mit Parametern');
INSERT INTO "connection" VALUES(17,'Datentypen','sind Bestandteil von','Funktion mit Parametern');
INSERT INTO "connection" VALUES(17,'Symbol','ist Bestandteil von','Datentypen');
INSERT INTO "connection" VALUES(17,'define-struct','zu','ADT mit Bezeichner');
INSERT INTO "connection" VALUES(17,'String','ist Bestandteil von','Datentypen');
INSERT INTO "connection" VALUES(17,'+','sind Bestandteil von','Operatoren');
INSERT INTO "connection" VALUES(17,'-','sind Bestandteil von','Operatoren');
INSERT INTO "connection" VALUES(17,'Funktion mit Parametern','oder Bestandteil von','Keiner Funktion: Output auf Bildschirm');
INSERT INTO "connection" VALUES(17,'*','sind Bestandteil von','Operatoren');
INSERT INTO "connection" VALUES(17,'lambda Funktion mit Parametern','verbindet durch','define');
INSERT INTO "connection" VALUES(17,'Integer','ist Bestandteil von','Datentypen');
INSERT INTO "connection" VALUES(17,'sub-Datentypen','ist Bestandteil von','ADT');
INSERT INTO "connection" VALUES(17,'Sub-Funktion mit Parametern','ist Bestandteil von','Funktion mit Parametern');
INSERT INTO "connection" VALUES(18,'Arithmetischer Ausdruck','enthält','Numerale');
INSERT INTO "connection" VALUES(18,'Funktionen','ist definiert','rekursiv');
INSERT INTO "connection" VALUES(18,'Signaturen','besitzen Menge','Operatoren');
INSERT INTO "connection" VALUES(18,'Signaturen','besitzen Menge','Sorten');
INSERT INTO "connection" VALUES(18,'Junktoren','verbinden','Aussagen');
INSERT INTO "connection" VALUES(18,'Arithmetischer Ausdruck','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(18,'Arithmetischer Ausdruck','wird genutzt bei der','Funktionale Programmierung');
INSERT INTO "connection" VALUES(18,'Aritätsfunktion','sind','Funktionen');
INSERT INTO "connection" VALUES(18,'Funktionen','ist definiert','iterativ');
INSERT INTO "connection" VALUES(18,'Infix-Notation','ist eine','Notation');
INSERT INTO "connection" VALUES(18,'Arithmetischer Ausdruck','besitzt','Notation');
INSERT INTO "connection" VALUES(18,'Arithmetischer Ausdruck','enthält','Operatoren');
INSERT INTO "connection" VALUES(18,'Zeichenketten','werden benutzt bei','Funktionale Programmierung');
INSERT INTO "connection" VALUES(18,'Zeichenketten','benutzen','Algebra');
INSERT INTO "connection" VALUES(18,'Gleichungen','beschreibt Semantik vom','Datentyp');
INSERT INTO "connection" VALUES(18,'Boolsche Algebra','ist eine','Algebra');
INSERT INTO "connection" VALUES(18,'Lamda-Kalkül','Modell der','Funktionale Programmierung');
INSERT INTO "connection" VALUES(18,'Postfix-Notation','ist eine','Notation');
INSERT INTO "connection" VALUES(18,'Algebra','besitzt Menge','Werte');
INSERT INTO "connection" VALUES(18,'Signaturen','beschreibt Syntax vom','Datentyp');
INSERT INTO "connection" VALUES(18,'Datentyp','besitzt Menge','Operationen');
INSERT INTO "connection" VALUES(18,'Spezifikation','besitzt Menge','Gleichungen');
INSERT INTO "connection" VALUES(18,'Signaturen','besitzen Menge','Aritätsfunktion');
INSERT INTO "connection" VALUES(18,'Aussagen','besitzen','Wahrheitswert');
INSERT INTO "connection" VALUES(18,'Algebra','besitz Menge','Funktionen');
INSERT INTO "connection" VALUES(18,'Operatoren','Repräsentationen von','Funktionen');
INSERT INTO "connection" VALUES(18,'Racket','ist eine Sprache der','Funktionale Programmierung');
INSERT INTO "connection" VALUES(18,'Racket','besitzt eine','Präfix-Notation');
INSERT INTO "connection" VALUES(18,'Funktionale Programmierung','ist eine Art der','Programmierung');
INSERT INTO "connection" VALUES(18,'Datentyp','besitzt Menge','Werte');
INSERT INTO "connection" VALUES(18,'Aussagen','benutzen','Algebra');
INSERT INTO "connection" VALUES(18,'Präfix-Notation','ist eine','Notation');
INSERT INTO "connection" VALUES(18,'Spezifikation','besitzen Menge','Signaturen');
INSERT INTO "connection" VALUES(18,'Arithmetischer Ausdruck','benutzt','Algebra');
INSERT INTO "connection" VALUES(18,'ADT','ist ein','Datentyp');
INSERT INTO "connection" VALUES(18,'Aussagen','werden genutzt bei der','Funktionale Programmierung');
INSERT INTO "connection" VALUES(18,'Funktionale Programmierung','Programme bestehen aus','Funktionen');
INSERT INTO "connection" VALUES(18,'ADT','besitzt keine','konkrete Implementierung');
INSERT INTO "connection" VALUES(19,'Kapitel 5','ist','Kapitel');
INSERT INTO "connection" VALUES(19,'Präfix','ist','Notation');
INSERT INTO "connection" VALUES(19,'Kapitel 2','behandelt','Funktionale Programmierung');
INSERT INTO "connection" VALUES(19,'Ausdrücke','bestehen aus','Alphabet');
INSERT INTO "connection" VALUES(19,'Racket','behandelt in','Kapitel 3');
INSERT INTO "connection" VALUES(19,'Kapitel 4','ist','Kapitel');
INSERT INTO "connection" VALUES(19,'Hilfszeichen','sind enthalten in','Alphabet');
INSERT INTO "connection" VALUES(19,'Bedingte Ausdrücke','bedingt durch','Logik');
INSERT INTO "connection" VALUES(19,'Abstrakte Datentypen','können nutzen','Rekursion');
INSERT INTO "connection" VALUES(19,'Entwurf','von','Programme');
INSERT INTO "connection" VALUES(19,'Kapitel 5','behandelt','Abstrakte Datentypen und Listen');
INSERT INTO "connection" VALUES(19,'Racket','behandelt in','Kapitel 6');
INSERT INTO "connection" VALUES(19,'Structs','ist Teil von','Datentypen');
INSERT INTO "connection" VALUES(19,'Funktionale Programmierung','ist ein','Konzept');
INSERT INTO "connection" VALUES(19,'Rekursion','bezeichnet sich selbst aufrufende','Funktionen');
INSERT INTO "connection" VALUES(19,'Racket','behandelt in','Kapitel 5');
INSERT INTO "connection" VALUES(19,'Java','ist','Programmiersprache');
INSERT INTO "connection" VALUES(19,'Rekursion','ist möglich in','Java');
INSERT INTO "connection" VALUES(19,'Vorlesung ''Informatik I''','besteht aus','Kapitel');
INSERT INTO "connection" VALUES(19,'Signatur','zeigt','Datentypen');
INSERT INTO "connection" VALUES(19,'Logik','behandelt','Wahrheitswerte');
INSERT INTO "connection" VALUES(19,'Racket','setzt um','Funktionale Programmierung');
INSERT INTO "connection" VALUES(19,'Signatur','Bestandteil von','Entwurf');
INSERT INTO "connection" VALUES(19,'Hilfsfunktionen','sind','Funktionen');
INSERT INTO "connection" VALUES(19,'Racket','besitzt viele','Datentypen');
INSERT INTO "connection" VALUES(19,'Special Forms','sind','Bedingte Ausdrücke');
INSERT INTO "connection" VALUES(19,'Wurzel','Anfang von','Bäume');
INSERT INTO "connection" VALUES(19,'Racket','ist','Programmiersprache');
INSERT INTO "connection" VALUES(19,'Baumdarstellung','verwendet','Bäume');
INSERT INTO "connection" VALUES(19,'Operatorsymbole','sind enthalten in','Alphabet');
INSERT INTO "connection" VALUES(19,'Kapitel 4','behandelt','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(19,'DrRacket','Entwicklungsumgebung für','Racket');
INSERT INTO "connection" VALUES(19,'Binärbäume','sind','Bäume');
INSERT INTO "connection" VALUES(19,'Structs','besitzen in Racket eigene','Funktionen');
INSERT INTO "connection" VALUES(19,'Verwendung','von','Programme');
INSERT INTO "connection" VALUES(19,'Listen','sind in Racket','Structs');
INSERT INTO "connection" VALUES(19,'Kapitel 2','behandelt','Numerale');
INSERT INTO "connection" VALUES(19,'Kapitel 3','behandelt','Bedingte Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(19,'Kapitel 2','ist','Kapitel');
INSERT INTO "connection" VALUES(19,'Listen','nutzen','Rekursion');
INSERT INTO "connection" VALUES(19,'Racket','eingeführt in','Kapitel 2');
INSERT INTO "connection" VALUES(19,'Ausdrücke','haben','Notation');
INSERT INTO "connection" VALUES(19,'Objekte','sind','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(19,'Listen','ist Teil von','Abstrakte Datentypen und Listen');
INSERT INTO "connection" VALUES(19,'Special Forms','existieren in','Racket');
INSERT INTO "connection" VALUES(19,'Kapitel 6','behandelt','Rekursion');
INSERT INTO "connection" VALUES(19,'Postfix','ist','Notation');
INSERT INTO "connection" VALUES(19,'Bäume','bestehen aus','Kanten');
INSERT INTO "connection" VALUES(19,'Programme','Ergebnis von','Funktionale Programmierung');
INSERT INTO "connection" VALUES(19,'Ausdrücke','benutzen','Baumdarstellung');
INSERT INTO "connection" VALUES(19,'Ausdrücke und Funktionen','Thema von','Kapitel 2');
INSERT INTO "connection" VALUES(19,'Ausdrücke','Bestandteil von','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(19,'Blatt','Ende von','Bäume');
INSERT INTO "connection" VALUES(19,'Kapitel 2','behandelt','Bäume');
INSERT INTO "connection" VALUES(19,'Funktionale Programmierung','ermöglicht durch','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(19,'Alphabet','bildet','Wörter');
INSERT INTO "connection" VALUES(19,'Kapitel 2','behandelt','Ausdrücke');
INSERT INTO "connection" VALUES(19,'Wahrheitswerte','ist Teil von','Datentypen');
INSERT INTO "connection" VALUES(19,'Logik','thematisiert','Ausdrücke');
INSERT INTO "connection" VALUES(19,'Funktionskopf','Bestandteil von','Entwurf');
INSERT INTO "connection" VALUES(19,'Kapitel 6','ist','Kapitel');
INSERT INTO "connection" VALUES(19,'Zusammengesetzte Daten','besitzen Zustand in','Objektorientierte Programmierung');
INSERT INTO "connection" VALUES(19,'Funktionen','bilden','Programme');
INSERT INTO "connection" VALUES(19,'Funktionen','Bestandteil von','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(19,'Variablen','nicht veränderlich in','Funktionale Programmierung');
INSERT INTO "connection" VALUES(19,'Ziffern','sind enthalten in','Alphabet');
INSERT INTO "connection" VALUES(19,'Bedingte Ausdrücke','Bestandteil von','Bedingte Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(19,'Traversierung','dient Besuch aller','Knoten');
INSERT INTO "connection" VALUES(19,'Racket','behandelt in','Kapitel 4');
INSERT INTO "connection" VALUES(19,'Abstrakte Datentypen','ist Teil von','Abstrakte Datentypen und Listen');
INSERT INTO "connection" VALUES(19,'Bäume','bestehen aus','Knoten');
INSERT INTO "connection" VALUES(19,'Kapitel 2','behandelt','Auswertung');
INSERT INTO "connection" VALUES(19,'Objekte','existieren in','Java');
INSERT INTO "connection" VALUES(19,'falsch','einer der','Wahrheitswerte');
INSERT INTO "connection" VALUES(19,'Inorder','ist Variante von','Traversierung');
INSERT INTO "connection" VALUES(19,'wahr','einer der','Wahrheitswerte');
INSERT INTO "connection" VALUES(19,'Texte','ist Teil von','Datentypen');
INSERT INTO "connection" VALUES(19,'Auswertung','angewand auf','Ausdrücke');
INSERT INTO "connection" VALUES(19,'Structs','existieren in','Racket');
INSERT INTO "connection" VALUES(19,'Programme','benutzen','Hilfsfunktionen');
INSERT INTO "connection" VALUES(19,'Objektorientierte Programmierung','ist ein','Konzept');
INSERT INTO "connection" VALUES(19,'Structs','sind','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(19,'Postorder','ist Variante von','Traversierung');
INSERT INTO "connection" VALUES(19,'Zusammengesetzte Daten','zustandslos in','Funktionale Programmierung');
INSERT INTO "connection" VALUES(19,'Wurzel','ist','Knoten');
INSERT INTO "connection" VALUES(19,'Blatt','ist','Knoten');
INSERT INTO "connection" VALUES(19,'Wörter','haben','Länge');
INSERT INTO "connection" VALUES(19,'Teilbäume','sind','Bäume');
INSERT INTO "connection" VALUES(19,'Zahlen','ist Teil von','Datentypen');
INSERT INTO "connection" VALUES(19,'Datentypen','existieren in','Java');
INSERT INTO "connection" VALUES(19,'Rekursion','ist möglich in','Racket');
INSERT INTO "connection" VALUES(19,'Präorder','ist Variante von','Traversierung');
INSERT INTO "connection" VALUES(19,'Kapitel 3','ist','Kapitel');
INSERT INTO "connection" VALUES(19,'Abstrakte Datentypen','beschreiben','Datentypen');
INSERT INTO "connection" VALUES(19,'Programme','verwenden','Variablen');
INSERT INTO "connection" VALUES(19,'Binärbäume','haben maximal 2','Teilbäume');
INSERT INTO "connection" VALUES(19,'Bedingte Ausdrücke und Funktionen','Baut auf auf','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(19,'Funktionen','Grundlage','Funktionale Programmierung');
INSERT INTO "connection" VALUES(19,'Infix','ist','Notation');
INSERT INTO "connection" VALUES(19,'Kanten','verbinden','Knoten');
INSERT INTO "connection" VALUES(19,'Abstrakte Datentypen','sind losgelöst von','Programmiersprache');
INSERT INTO "connection" VALUES(20,'Anwender','verarbeitet/liefert Ergebnisse an/für','Computer');
INSERT INTO "connection" VALUES(20,'Compiler','ist eine Art','Programm');
INSERT INTO "connection" VALUES(20,'Programm','verarbeitet eine','Eingabe');
INSERT INTO "connection" VALUES(20,'Funktional','arbeitet mit','Funktionen');
INSERT INTO "connection" VALUES(20,'Aussage','arbeitet mit','Wahrheitswerten');
INSERT INTO "connection" VALUES(20,'Operator','Bestandteil von','Funktionen');
INSERT INTO "connection" VALUES(20,'Objektiv','ist eine Art','Programmiersprachen');
INSERT INTO "connection" VALUES(20,'Arithmetische Ausdrücke','arbeitet mit','Zahlen');
INSERT INTO "connection" VALUES(20,'Programm','beschrieben durch','Algorithmus');
INSERT INTO "connection" VALUES(20,'Racket','Beispiel für','Funktional');
INSERT INTO "connection" VALUES(20,'C#','Beispiel für','Objektiv');
INSERT INTO "connection" VALUES(20,'Imperativ','ist eine Art','Programmiersprachen');
INSERT INTO "connection" VALUES(20,'Compiler','erzeugt','Maschinensprache');
INSERT INTO "connection" VALUES(20,'C++','Beispiel für','Objektiv');
INSERT INTO "connection" VALUES(20,'Wahrheitswerten','genannt','Boolean');
INSERT INTO "connection" VALUES(20,'Strukturen','können sein','Datentyp');
INSERT INTO "connection" VALUES(20,'Java','Beispiel für','Objektiv');
INSERT INTO "connection" VALUES(20,'Haskell','Beispiel für','Funktional');
INSERT INTO "connection" VALUES(20,'Parameter','Bestandteil von','Funktionen');
INSERT INTO "connection" VALUES(20,'Computer','verarbeitet/liefert Ergebnisse an/für','Anwender');
INSERT INTO "connection" VALUES(20,'Zeichenketten','arbeiten mit','Symbolischen Informationen');
INSERT INTO "connection" VALUES(20,'Listen','sind eine Art','Strukturen');
INSERT INTO "connection" VALUES(20,'Algorithmus','geschrieben in','Programmiersprachen');
INSERT INTO "connection" VALUES(20,'Programm','beschrieben durch','Daten');
INSERT INTO "connection" VALUES(20,'Eingabe','erzeugt eine','Ausgabe');
INSERT INTO "connection" VALUES(20,'C','Beispiel für','Imperativ');
INSERT INTO "connection" VALUES(20,'Funktional','ist eine Art','Programmiersprachen');
INSERT INTO "connection" VALUES(20,'Zeichenketten','genannt','String/Symbol');
INSERT INTO "connection" VALUES(20,'Compiler','übersetzt','Programmiersprachen');
INSERT INTO "connection" VALUES(20,'int','ist ein','Datentyp');
INSERT INTO "connection" VALUES(20,'Computer','beinhaltet ein','Programm');
INSERT INTO "connection" VALUES(20,'Daten','können sein','Datentyp');
INSERT INTO "connection" VALUES(20,'Rekursion','ist der Selbstbezug von','Funktionen');
INSERT INTO "connection" VALUES(20,'Zahlen','genannt','Number');
INSERT INTO "connection" VALUES(21,'Ich','führe aus','Wartung');
INSERT INTO "connection" VALUES(21,'Funktion','verwendet','Operatoren');
INSERT INTO "connection" VALUES(21,'Hilfsfunktion','vereinfacht','Wartung');
INSERT INTO "connection" VALUES(21,'Programm(Racket)','ist (in diesem Kontext)','Funktion');
INSERT INTO "connection" VALUES(21,'Programm(Racket)','sollte enthalten','Hilfsfunktion');
INSERT INTO "connection" VALUES(21,'Hilfsfunktion','ist','Funktion');
INSERT INTO "connection" VALUES(21,'Funktion','verwendet','Parameter');
INSERT INTO "connection" VALUES(21,'Ich','erstelle','Programm(Racket)');
INSERT INTO "connection" VALUES(21,'Ich','übergebe','Parameter');
INSERT INTO "connection" VALUES(21,'Wartung','veränderung / anpassung','Programm(Racket)');
INSERT INTO "connection" VALUES(21,'Ich','erstellen / kennen','Operatoren');
INSERT INTO "connection" VALUES(21,'Parameter','wird übergeben an','Programm(Racket)');
INSERT INTO "connection" VALUES(22,'define-struct','Schablone','Kommentierung');
INSERT INTO "connection" VALUES(22,'Funktion','Erstellung zusammengesetzter Datentypen mittels','define-struct');
INSERT INTO "connection" VALUES(22,'Listen','Schablone','Kommentierung');
INSERT INTO "connection" VALUES(22,'Funktion','Signatur, Zweck, Funktionskopf und Test angeben','Kommentierung');
INSERT INTO "connection" VALUES(22,'Programmen','wird gestartet durch aufrufen einer','Funktion');
INSERT INTO "connection" VALUES(22,'Programmen','bestehen aus','durch Rechenvorschriften definierten Funktionen');
INSERT INTO "connection" VALUES(22,'Entwicklungsumgebung z.B. DrRacket','verwendet','Präfix-Notation');
INSERT INTO "connection" VALUES(22,'Funktion','hat Selbstbezug','Rekursion/rekursiv');
INSERT INTO "connection" VALUES(22,'define-struct','wird automatisch erzeugt','Selektoren, name-paramter...');
INSERT INTO "connection" VALUES(22,'Funktion','Fallunterscheidung durch','cond-Ausdrücke');
INSERT INTO "connection" VALUES(22,'Programmen','erstellt in','Entwicklungsumgebung z.B. DrRacket');
INSERT INTO "connection" VALUES(22,'durch Rechenvorschriften definierten Funktionen','definiert als','Abbildung vom Definitionsbereich in den Wertebereich');
INSERT INTO "connection" VALUES(22,'Entwicklungsumgebung z.B. DrRacket','Erstellung mit Schluesselwort define','Funktion');
INSERT INTO "connection" VALUES(22,'funktionale Programmierung','wird genutzt zur Erstellung von','Programmen');
INSERT INTO "connection" VALUES(22,'Funktion','erstellt mittels cons oder list','Listen');
INSERT INTO "connection" VALUES(22,'define-struct','wird automatisch erzeugt','Konstruktor, make-name...');
INSERT INTO "connection" VALUES(22,'Programmen','für Menschen besser lesbar mit','Kommentierung');
INSERT INTO "connection" VALUES(22,'Funktion','definiert als','Abbildung vom Definitionsbereich in den Wertebereich');
INSERT INTO "connection" VALUES(23,'Baumdarstellung','besteht aus','Interpretation');
INSERT INTO "connection" VALUES(23,'Ausdrücke','angewandt auf','Baumdarstellung');
INSERT INTO "connection" VALUES(23,'Datendefinition','strukturiert','Daten');
INSERT INTO "connection" VALUES(23,'Dokumentation','dokumentiert','Programm');
INSERT INTO "connection" VALUES(23,'Baumdarstellung','besteht aus','Definition');
INSERT INTO "connection" VALUES(23,'Lesbarkeit, Konsistenz','vereinfacht','Wartung');
INSERT INTO "connection" VALUES(23,'Boolsche Algebra','special form','Auswertungsreihenfolge');
INSERT INTO "connection" VALUES(23,'Auswertungsreihenfolge','angewandt auf','Baumdarstellung');
INSERT INTO "connection" VALUES(23,'Typ-Prädikat','besteht aus','Operationen');
INSERT INTO "connection" VALUES(23,'Funktion','selbstbezug','Rekursion');
INSERT INTO "connection" VALUES(23,'Dokumentation','besteht aus','Signatur');
INSERT INTO "connection" VALUES(23,'Rekursion','konstante Anzahl an Zustandsvariablen','interativ');
INSERT INTO "connection" VALUES(23,'Rekursion','erzeugt','Prozess');
INSERT INTO "connection" VALUES(23,'Programm','ist eine','Funktion');
INSERT INTO "connection" VALUES(23,'Datendefinition','besteht aus','Selektoren');
INSERT INTO "connection" VALUES(23,'Prozess','kann sein','interativ');
INSERT INTO "connection" VALUES(23,'Boolsche Algebra','verknüpft','Daten');
INSERT INTO "connection" VALUES(23,'Wartung','konsistenz','Programm');
INSERT INTO "connection" VALUES(23,'Operationen','angewandt auf','Werte');
INSERT INTO "connection" VALUES(23,'Programm','Übersichtlichkeit durch','Hilfsfunktion');
INSERT INTO "connection" VALUES(23,'Dokumentation','besteht aus','Zweck');
INSERT INTO "connection" VALUES(23,'Datendefinition','ist','Strukturdefinition');
INSERT INTO "connection" VALUES(23,'Funktion','verarbeitet','Ausdrücke');
INSERT INTO "connection" VALUES(23,'Typ-Prädikat','besteht aus','Werte');
INSERT INTO "connection" VALUES(23,'Dokumentation','wichtig für','Wartung');
INSERT INTO "connection" VALUES(23,'Hilfsfunktion','vereinfacht','Lesbarkeit, Konsistenz');
INSERT INTO "connection" VALUES(23,'Dokumentation','trägt bei zur','Lesbarkeit, Konsistenz');
INSERT INTO "connection" VALUES(23,'Zweck','definiert','Ausdrücke');
INSERT INTO "connection" VALUES(23,'Datendefinition','besteht aus','Konstruktor');
INSERT INTO "connection" VALUES(23,'Datendefinition','besteht aus','Typ-Prädikat');
INSERT INTO "connection" VALUES(23,'Dokumentation','besteht aus','Funktionskopf');
INSERT INTO "connection" VALUES(23,'Dokumentation','dokumentiert','Hilfsfunktion');
INSERT INTO "connection" VALUES(23,'Daten','Analyse','Fallunterscheidung');
INSERT INTO "connection" VALUES(23,'Baumdarstellung','führt zur','Auswertung');
INSERT INTO "connection" VALUES(23,'Fallunterscheidung','special form','Auswertungsreihenfolge');
INSERT INTO "connection" VALUES(23,'Strukturdefinition','ist','Datendefinition');
INSERT INTO "connection" VALUES(23,'Auswertungsreihenfolge','führt zur','Auswertung');
INSERT INTO "connection" VALUES(23,'ADT','Syntax','Signatur');
INSERT INTO "connection" VALUES(23,'ADT','Semantik','Funktion');
INSERT INTO "connection" VALUES(23,'Variablen','trägt bei zur','Lesbarkeit, Konsistenz');
INSERT INTO "connection" VALUES(23,'Rekursion','aufgeschoben','rekursiv');
INSERT INTO "connection" VALUES(23,'Prozess','kann sein','rekursiv');
INSERT INTO "connection" VALUES(23,'Schablonen','trägt zur Lesbarkeit, Konsistenz bei','Datendefinition');
INSERT INTO "connection" VALUES(24,'Tests','testen','Funktionsrumpf');
INSERT INTO "connection" VALUES(24,'Signatur','beschreibt','Funktionsrumpf');
INSERT INTO "connection" VALUES(24,'Schablone','übergibt Muster an','Funktionsrumpf');
INSERT INTO "connection" VALUES(24,'Blatt/Blätter','ist vielleicht auch','Wurzel');
INSERT INTO "connection" VALUES(24,'Funktionsrumpf','ist Bestandteill von','Programm');
INSERT INTO "connection" VALUES(24,'Hilfsfunktion','modularisiert','Programm');
INSERT INTO "connection" VALUES(24,'Programm','berechnet, wenn touringberechenbar','Problem');
INSERT INTO "connection" VALUES(24,'Beispiele','überprüfen','Tests');
INSERT INTO "connection" VALUES(24,'Funktionsrumpf','kann dargestellt werden als','Baum');
INSERT INTO "connection" VALUES(24,'Baum','hat manchmal','Kanten');
INSERT INTO "connection" VALUES(24,'Kanten','haben','Blatt/Blätter');
INSERT INTO "connection" VALUES(24,'Hilfsfunktion','vereinfacht','Funktionsrumpf');
INSERT INTO "connection" VALUES(24,'Baum','hat immer','Wurzel');
INSERT INTO "connection" VALUES(25,'square-Struktur','oder','circle-Struktur');
INSERT INTO "connection" VALUES(25,'posn','Selektor 1','posn-x');
INSERT INTO "connection" VALUES(25,'Kapitel 4','behandelt','Unterscheidung von Werten in Racket');
INSERT INTO "connection" VALUES(25,'Notation',1,'Infix');
INSERT INTO "connection" VALUES(25,'Kapitel 4','erweitert','Entwurf von Programmen 3.0');
INSERT INTO "connection" VALUES(25,'Datendefinitionen in Racket','Beispiel','make-sname');
INSERT INTO "connection" VALUES(25,'Ergebnis kann an Variable gebunden werden','erzeugt','Konstantes Datenbündel');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen 2.0','Mindestens 1 Beispiel pro Situation','Beispiele 2.0');
INSERT INTO "connection" VALUES(25,'Signatur','ausgestaltet zu','Funktionskopf');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen','beginnt mit','Signatur');
INSERT INTO "connection" VALUES(25,'Syntax','ist','Liste der Komponenten');
INSERT INTO "connection" VALUES(25,'define-struct','Verwendung bei','mehr als eine Komponente');
INSERT INTO "connection" VALUES(25,'Kapitel 4','enthält','Datendefinitionen in Racket');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen','Ziel','Funktionsrumpf');
INSERT INTO "connection" VALUES(25,'make-sname','define','Ergebnis kann an Variable gebunden werden');
INSERT INTO "connection" VALUES(25,'Hilfszeichen','ist','Zeichen zur Worttrennung und Strukturierung');
INSERT INTO "connection" VALUES(25,'Datendefinition','und','Schablone');
INSERT INTO "connection" VALUES(25,'Datendefinitionen in Racket','erfolgt durch','define-struct');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen','Nach Zweck/vermeiden Henne und Ei Problem','Beispiele');
INSERT INTO "connection" VALUES(25,'Notation','Möglichkeit','Postfix');
INSERT INTO "connection" VALUES(25,'Beispiele','Prüfen der Beispiele durch','Tests');
INSERT INTO "connection" VALUES(25,'Operartionssymbole','verknüpft','Numerale');
INSERT INTO "connection" VALUES(25,'Arithmetische Ausdrücke','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(25,'Concept Map Kapitel 2-6','beginnt mit','Kapitel2');
INSERT INTO "connection" VALUES(25,'Junktoren','nicht','Negation');
INSERT INTO "connection" VALUES(25,'Aussagelogik','wird benutzt von','Boolsche Algebra');
INSERT INTO "connection" VALUES(25,'Gesetze','zum Beispiel','De Morgan');
INSERT INTO "connection" VALUES(25,'rectangle-Struktur','oder','circle-Struktur');
INSERT INTO "connection" VALUES(25,'Arithmetische Ausdrücke','verschiedene','Notation');
INSERT INTO "connection" VALUES(25,'Aussagen','Aussage ohne Junktor','atomar');
INSERT INTO "connection" VALUES(25,'Fallunterscheidung','in Racket','cond');
INSERT INTO "connection" VALUES(25,'Junktoren','ist äquivalent mit','Äquivalenz');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen 3.0','benötigt','Datendefinition');
INSERT INTO "connection" VALUES(25,'Concept Map Kapitel 2-6','Fortsetzung','Kapitel 4');
INSERT INTO "connection" VALUES(25,'Bäume','besuchen aller Knoten','Traversierung');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen','erleichtern Lesbarkeit','Hilfsfunktionen');
INSERT INTO "connection" VALUES(25,'Kapitel2','startet mit','Funktionale Programmierung');
INSERT INTO "connection" VALUES(25,'posn','Konstruktor','make-posn');
INSERT INTO "connection" VALUES(25,'Name der Struktur','und','Liste der Komponenten');
INSERT INTO "connection" VALUES(25,'Numerale','ist','Repräsentation einer Zahl');
INSERT INTO "connection" VALUES(25,'Kommentare','Zum besseren Verständnis','Entwurf von Programmen');
INSERT INTO "connection" VALUES(25,'Kapitel 3','Fortsetzung','Entwurf von Programmen 2.0');
INSERT INTO "connection" VALUES(25,'Arithmetische Ausdrücke','enthält','Numerale');
INSERT INTO "connection" VALUES(25,'Funktionale Programmierung','Beispiel','Racket');
INSERT INTO "connection" VALUES(25,'Concept Map Kapitel 2-6','Fortsetzung','Kapitel 3');
INSERT INTO "connection" VALUES(25,'shape','ist','rectangle-Struktur');
INSERT INTO "connection" VALUES(25,'Notation','Möglichkeit','Präfix');
INSERT INTO "connection" VALUES(25,'Boolsche Algebra','besteht aus','Gesetze');
INSERT INTO "connection" VALUES(25,'Fallunterscheidung','durch','Aussagelogik');
INSERT INTO "connection" VALUES(25,'Wurzel','gegebenenfalls','Teilbaüme');
INSERT INTO "connection" VALUES(25,'define-struct','hat','Syntax');
INSERT INTO "connection" VALUES(25,'Tests','In Racket mittels','check-expect');
INSERT INTO "connection" VALUES(25,'Junktoren','und','Konjunktion');
INSERT INTO "connection" VALUES(25,'Funktionskopf','in Racket','define');
INSERT INTO "connection" VALUES(25,'Bäume','bestehen aus','Wurzel');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen 2.0','neu','Datenanalyse und Definition');
INSERT INTO "connection" VALUES(25,'Aussagen','verbunden durch','Junktoren');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen','bietet Möglichkeit','Racket');
INSERT INTO "connection" VALUES(25,'posn','Selektor 2','posn-y');
INSERT INTO "connection" VALUES(25,'Arithmetische Ausdrücke','enthält','Operartionssymbole');
INSERT INTO "connection" VALUES(25,'Unterscheidung von Werten in Racket','Beispiel','shape');
INSERT INTO "connection" VALUES(25,'Arithmetische Ausdrücke','Hierarchisch geordnet','Bäume');
INSERT INTO "connection" VALUES(25,'shape','ist','circle-Struktur');
INSERT INTO "connection" VALUES(25,'shape','ist','square-Struktur');
INSERT INTO "connection" VALUES(25,'Unterscheidung von Werten in Racket','vordefiniert','number?/boolean?/symbol?/string?/struct?');
INSERT INTO "connection" VALUES(25,'Junktoren','oder','Disjunktion');
INSERT INTO "connection" VALUES(25,'Abstrakte Datentypen','Beispiel','ADT WeissNicht');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen','Nach Signatur/ macht Problem klar','Zweck');
INSERT INTO "connection" VALUES(25,'Entwurf von Programmen 3.0','verlangt','Schablone');
INSERT INTO "connection" VALUES(25,'Syntax','ist','Name der Struktur');
INSERT INTO "connection" VALUES(25,'Junktoren','impliziert','Implikation');
INSERT INTO "connection" VALUES(25,'Kapitel 4','erweitert','Entwurf von Programmen 4.0');
INSERT INTO "connection" VALUES(25,'define-struct','Beispiel','posn');
INSERT INTO "connection" VALUES(25,'symbol=?','Vergleich von Zeichenketten','Entwurf von Programmen 2.0');
INSERT INTO "connection" VALUES(25,'Racket','Wertet aus','Arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(25,'Funktionsrumpf','erreicht','Definition der Funktion');
INSERT INTO "connection" VALUES(25,'Kapitel 3','behandelt','Fallunterscheidung');
INSERT INTO "connection" VALUES(25,'Concept Map Kapitel 2-6','Fortsetzung','Kapitel 5');
INSERT INTO "connection" VALUES(25,'Notation','Möglichkeit','Infix');
INSERT INTO "connection" VALUES(25,'Operartionssymbole','Beispiel','+');
INSERT INTO "connection" VALUES(25,'Bäume','heißen, falls jeder Knoten höchstens 2 Teilbäume','Binärbäume');
INSERT INTO "connection" VALUES(25,'Aussagelogik','beinhaltet','Aussagen');
INSERT INTO "connection" VALUES(25,'Kapitel 5','behandelt','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(26,'Schablone erstellen','dann','Funktionsrumpf erstellen');
INSERT INTO "connection" VALUES(26,'Menge der arithmetischen Ausdruecke (EXP)','enthaelt','Numerale (NUM)');
INSERT INTO "connection" VALUES(26,'arithmetischer Ausdruck','wird dargestellt in','Infix-/Praefix-/Postfix-Notation');
INSERT INTO "connection" VALUES(26,'Datenanalyse und -definition','(i)','Datendefinition erstellen');
INSERT INTO "connection" VALUES(26,'Zeichenvorrat (Alphabet) fuer arithmetische Ausdruecke','enthaelt','Operatorsymbole (OP)');
INSERT INTO "connection" VALUES(26,'Zeichenvorrat (Alphabet) fuer arithmetische Ausdruecke','induktive Definition','Wort ueber einem Alphabet');
INSERT INTO "connection" VALUES(26,'Zeichenvorrat (Alphabet) fuer arithmetische Ausdruecke','enthaelt','Hilfszeichen (H)');
INSERT INTO "connection" VALUES(26,'Signatur, Zweck und Funktionskopf angeben','dann','Beispiele erstellen');
INSERT INTO "connection" VALUES(26,'Entwurf von Programmen','in folgenden Schritten','Datenanalyse und -definition');
INSERT INTO "connection" VALUES(26,'Menge der arithmetischen Ausdruecke (EXP)','induktive Definition','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(26,'arithmetischer Ausdruck','wird dargestellt als','Baum');
INSERT INTO "connection" VALUES(26,'Wort ueber einem Alphabet','induktive Definition','Laenge eines Wortes ueber einem Alphabet');
INSERT INTO "connection" VALUES(26,'Beispiele erstellen','dann','Schablone erstellen');
INSERT INTO "connection" VALUES(26,'Zeichenvorrat (Alphabet) fuer arithmetische Ausdruecke','enthaelt','Numerale (NUM)');
INSERT INTO "connection" VALUES(26,'Datenanalyse und -definition','(ii)','bei induktiven Def. wohldef. ueberpruefen');
INSERT INTO "connection" VALUES(26,'Funktionsrumpf erstellen','dann','Funktionsweise ueberpruefen');
INSERT INTO "connection" VALUES(26,'Wort ueber einem Alphabet','ist auch','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(26,'Baum','besteht aus','Teilbaeume');
INSERT INTO "connection" VALUES(26,'arithmetischer Ausdruck','wird ausgwertet (EVAL) zu einem','Wert');
INSERT INTO "connection" VALUES(26,'Baum','besteht aus','Knoten/Wurzeln');
INSERT INTO "connection" VALUES(26,'Baum','wird traversiert in','Prae-/In-/Post-order');
INSERT INTO "connection" VALUES(26,'Numerale (NUM)','werden verknuepft durch','Operatorsymbole (OP)');
INSERT INTO "connection" VALUES(26,'Datenanalyse und -definition','dann','Signatur, Zweck und Funktionskopf angeben');
INSERT INTO "connection" VALUES(27,'Aussage','für mindestens eine Einsetzung aller Variablen wahr','erfüllbar');
INSERT INTO "connection" VALUES(27,'Alphabet für arithmetische Ausdrücke','Grundbausteine für','Die Menger der Wörter über ein Alphabet');
INSERT INTO "connection" VALUES(27,'Aussage','für konkretes Einsätzen aller Variablen wahr','erfüllt');
INSERT INTO "connection" VALUES(27,'Negation','Operator der','boolsche Algebra');
INSERT INTO "connection" VALUES(27,'Baum','besteht aus genau einer','Wurzel');
INSERT INTO "connection" VALUES(27,'x ^ (y v z) = (x ^ y) v (x ^ z)','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'Abstrakte Datentypen und Listen','Liste in Racket realisierbar durch','z.B. (cons x (cons y empty))');
INSERT INTO "connection" VALUES(27,'Aussage','hat','Wahrheitswert');
INSERT INTO "connection" VALUES(27,'(define name (lambda (param.1 ... param.n) ...))','ist eine','special-form');
INSERT INTO "connection" VALUES(27,'Lamma','gelten für','boolsche Algebra');
INSERT INTO "connection" VALUES(27,'x ^ y','Schreibweise','Konjunktion');
INSERT INTO "connection" VALUES(27,'Operatorsymbol','Teilmenge von','Alphabet für arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(27,'x v (x ^ y) = x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'Wertebereich','bildbar durch','disjunkte Vereinigung');
INSERT INTO "connection" VALUES(27,'(x v y) v z = x v (y v z)','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'mind. 2 Fälle, mind. 1 ohne Selbstbezug, mind. 1 mit Selbstbezug','Voraussetzung für','Rekursion');
INSERT INTO "connection" VALUES(27,'x v y = y v x','heißt','Kommunikativgesetz');
INSERT INTO "connection" VALUES(27,'(x v y) v z = x v (y v z)','heißt','Assoziativgesetz');
INSERT INTO "connection" VALUES(27,'atomare Aussage','enthält keine','Junktor');
INSERT INTO "connection" VALUES(27,'x und y','Leseweise','Konjunktion');
INSERT INTO "connection" VALUES(27,'Konjunktion','Operator der','boolsche Algebra');
INSERT INTO "connection" VALUES(27,'Traversierung','Wurzel - linker Teilbaum - rechter Teilbaum','Präorder');
INSERT INTO "connection" VALUES(27,'Rekursion','wenn Auswertung auf ... zugreift  dann  endrekursiv','iterativer Prozess');
INSERT INTO "connection" VALUES(27,'⌐x ^ x = false','ist ein','Lamma');
INSERT INTO "connection" VALUES(27,'Numeral','Teilmenge von','Alphabet für arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(27,'Disjunktion','Operator der','boolsche Algebra');
INSERT INTO "connection" VALUES(27,'nicht x','Leseweise','Negation');
INSERT INTO "connection" VALUES(27,'Hilfsfunktion','für jede Abhängigkeit/Regel der','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(27,'Wurzel','wenn mit min. 1 Teilbaum verbunden','interner Knoten');
INSERT INTO "connection" VALUES(27,'Numeral','Element von','Menge der arithmetischen Ausdrücke');
INSERT INTO "connection" VALUES(27,'0 = ⌐1','Eigenschaft','Null und Eins');
INSERT INTO "connection" VALUES(27,'Prädikat','Bezeichnung für','boolesche Abbildung');
INSERT INTO "connection" VALUES(27,'kartesisches Produkt','Elemente aus zwei unterschiedlicher Mengen','heterogene Paare');
INSERT INTO "connection" VALUES(27,'x v (x ^ y) = x','heißt','Absorptionsgesetz');
INSERT INTO "connection" VALUES(27,'Rekursion','mind. 1 mal unmittelbarer Selbstbezug','direkte Rekursion');
INSERT INTO "connection" VALUES(27,'Wurzel','verbunden durch Kanten','Teilbaum');
INSERT INTO "connection" VALUES(27,'natürliche Zahlen','sind ein','Numeral');
INSERT INTO "connection" VALUES(27,'Negation','ist','Junktor');
INSERT INTO "connection" VALUES(27,'Rekursion','wenn Auswertung des Rumpfes zu mehr als 1 rekursiver Aufruf führt','nicht-linear rekursiv');
INSERT INTO "connection" VALUES(27,'allgemeingültig','Beispiel für','Wahrheitswert');
INSERT INTO "connection" VALUES(27,'erfüllbar','Beispiel für','Wahrheitswert');
INSERT INTO "connection" VALUES(27,'Teilbaum','heißt ... der Wurzel','Kind');
INSERT INTO "connection" VALUES(27,'Disjunktion','ist','Junktor');
INSERT INTO "connection" VALUES(27,'iterativer Prozess','abhängig von Anzahl der Zustandsvariablen','konstanter Speicherbedarf');
INSERT INTO "connection" VALUES(27,'x v 0 = x','Eigenschaft','Null und Eins');
INSERT INTO "connection" VALUES(27,'arithmetischer Ausdruck','Spezialfall des','Binärbaum');
INSERT INTO "connection" VALUES(27,'Ausdrücke und Funktionen','in Racket realisierbar durch','(define name (lambda (param.1 ... param.n) ...))');
INSERT INTO "connection" VALUES(27,'Hilfszeichen','Teilmenge von','Alphabet für arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(27,'atomare Aussage','ist','Aussage');
INSERT INTO "connection" VALUES(27,'Präorder','Betrachtung von','Binärbaum');
INSERT INTO "connection" VALUES(27,'Inorder','Betrachtung von','Binärbaum');
INSERT INTO "connection" VALUES(27,'boolesche Abbildung','gehört zu','boolsche Algebra');
INSERT INTO "connection" VALUES(27,'Rekursion','häufig bei','Abstrakte Datentypen und Listen');
INSERT INTO "connection" VALUES(27,'Traversierung','linker Teilbaum - rechter Teilbaum - Wurzel','Postorder');
INSERT INTO "connection" VALUES(27,'''('', '')''','sind','Hilfszeichen');
INSERT INTO "connection" VALUES(27,'Wertebereich','bildbar durch','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(27,'x oder y','Leseweise','Disjunktion');
INSERT INTO "connection" VALUES(27,'make-sname','erzeugt','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(27,'x ^ (x v y) = x','heißt','Absorptionsgesetz');
INSERT INTO "connection" VALUES(27,'(define-struct sname (comp1 ... compn))','ist eine','special-form');
INSERT INTO "connection" VALUES(27,'Konjunktion','ist','Junktor');
INSERT INTO "connection" VALUES(27,'⌐⌐x = x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'⌐x v x = true','heißt','Gesetz des ausgeschlossenen Dritten');
INSERT INTO "connection" VALUES(27,'Traversierung','linker Teilbaum - Wurzel - rechter Teilbaum','Inorder');
INSERT INTO "connection" VALUES(27,'x v y','Schreibweise','Disjunktion');
INSERT INTO "connection" VALUES(27,'Ausdrücke und Funktionen','in Racket realisierbar durch','(define (name param.1 ... param.n) ...)');
INSERT INTO "connection" VALUES(27,'Zusammengesetzte Daten','sind','konstante Datenbündel');
INSERT INTO "connection" VALUES(27,'x ↔ y','Schreibweise','Äquivalenz');
INSERT INTO "connection" VALUES(27,'Wertebereich','bildbar durch','Anwendung rekursiver Gleichungen');
INSERT INTO "connection" VALUES(27,'⌐(x v y) = (⌐x) ^ (⌐y)','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'Variable','für häufig verwendete Konstante der','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(27,'⌐x ^ x = false','heißt','Gesetz vom Widerspruch');
INSERT INTO "connection" VALUES(27,'Gesetze der booleschen Algebra','gelten für','boolsche Algebra');
INSERT INTO "connection" VALUES(27,'Zusammengesetzte Daten','in racket realisier durch','(define-struct sname (comp1 ... compn))');
INSERT INTO "connection" VALUES(27,'Aussage','immer wahr (bei jeder Ersetzung der Variablen)','allgemeingültig');
INSERT INTO "connection" VALUES(27,'arithmetischer Ausdruck','Element von','Menge der arithmetischen Ausdrücke');
INSERT INTO "connection" VALUES(27,'Fibonacci-Zahl','Beispiel','nicht-linear rekursiv');
INSERT INTO "connection" VALUES(27,'x ^ 0 = 0','Eigenschaft','Null und Eins');
INSERT INTO "connection" VALUES(27,'⌐⌐x = x','heißt','Involution');
INSERT INTO "connection" VALUES(27,'x v (y ^ ⌐y) = x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'Null und Eins','Elemente','boolsche Algebra');
INSERT INTO "connection" VALUES(27,'arithmetischer Ausdruck','ist ein','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(27,'x ^ (y v ⌐y) = x','heißt','Neutralitätsgesetz');
INSERT INTO "connection" VALUES(27,'x v 1 = 1','Eigenschaft','Null und Eins');
INSERT INTO "connection" VALUES(27,'x v (y ^ z) = (x v y) ^ (x v z)','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'x ^ (y v ⌐y) = x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'x ^ 1 = x','Eigenschaft','Null und Eins');
INSERT INTO "connection" VALUES(27,'Schablone','liefert Grundbausteine zum Zugriff auf','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(27,'Rekursion','Rekursion über "Umweg" mittels anderer Funktion','indirekte Rekursion');
INSERT INTO "connection" VALUES(27,'x ^ x = x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'Alphabet für arithmetische Ausdrücke','Zeichenvorrat für','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(27,'x ist äquivalent mit y','Leseweise','Äquivalenz');
INSERT INTO "connection" VALUES(27,'Äquivalenz','ist','Junktor');
INSERT INTO "connection" VALUES(27,'x → y','Schreibweise','Implikation');
INSERT INTO "connection" VALUES(27,'Zusammengesetzte Daten','verwenden wenn','die Beschreibung eines Objekts mehr als eine Komponente impliziert');
INSERT INTO "connection" VALUES(27,'1 = x v ⌐x','Eigenschaft','Null und Eins');
INSERT INTO "connection" VALUES(27,'{true, false}','Menge der','Wahrheitswert');
INSERT INTO "connection" VALUES(27,'Wurzel','wenn mit 0 Teilbäumen verbunden','Blatt');
INSERT INTO "connection" VALUES(27,'x v (y ^ z) = (x v y) ^ (x v z)','heißt','Distributivgesetz');
INSERT INTO "connection" VALUES(27,'+, *, -, /','sind','Operatorsymbol');
INSERT INTO "connection" VALUES(27,'Binärbaum','besteht aus max. 2','Teilbaum');
INSERT INTO "connection" VALUES(27,'(x ^ y) ^ z = x ^ (y ^ z)','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'(x ^ y) ^ z = x ^ (y ^ z)','heißt','Assoziativgesetz');
INSERT INTO "connection" VALUES(27,'x ^ (y v z) = (x ^ y) v (x ^ z)','heißt','Distributivgesetz');
INSERT INTO "connection" VALUES(27,'Aussage','kann enthalten','Variable');
INSERT INTO "connection" VALUES(27,'Abstrakte Datentypen und Listen','Liste in Racket realisierbar durch','z.B. (list x y)');
INSERT INTO "connection" VALUES(27,'Implikation','ist','Junktor');
INSERT INTO "connection" VALUES(27,'iterativer Prozess','ist ein','Prozess');
INSERT INTO "connection" VALUES(27,'Wertebereich','bildbar durch','kartesisches Produkt');
INSERT INTO "connection" VALUES(27,'erfüllt','Beipiel für','Wahrheitswert');
INSERT INTO "connection" VALUES(27,'kartesisches Produkt','Elemente aus zwei gleicher Mengen','homogene Paare');
INSERT INTO "connection" VALUES(27,'x impliziert y','Leseweise','Implikation');
INSERT INTO "connection" VALUES(27,'Junktor','verbindet zwei','Aussage');
INSERT INTO "connection" VALUES(27,'x v y = y v x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'Rekursion','ist ein','Prozess');
INSERT INTO "connection" VALUES(27,'Abstrakte Datentypen und Listen','haben einen','Wertebereich');
INSERT INTO "connection" VALUES(27,'⌐x v x = true','ist ein','Lamma');
INSERT INTO "connection" VALUES(27,'x v (y ^ ⌐y) = x','heißt','Neutralitätsgesetz');
INSERT INTO "connection" VALUES(27,'⌐(x v y) = (⌐x) ^ (⌐y)','heißt','Regeln von de Morgan');
INSERT INTO "connection" VALUES(27,'x ^ (x v y) = x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'Baum','kann aus einem/mehreren','Teilbaum');
INSERT INTO "connection" VALUES(27,'⌐ (x ^ y) = (⌐x) v (⌐y)','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'x v x = x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'⌐ (x ^ y) = (⌐x) v (⌐y)','heißt','Regeln von de Morgan');
INSERT INTO "connection" VALUES(27,'⌐  x','Schreibweise','Negation');
INSERT INTO "connection" VALUES(27,'iterativer Prozess','kann durch ... beschrieben werden','konstante Anzahl von Zustandsvariablen');
INSERT INTO "connection" VALUES(27,'x ^ y = y ^ x','heißt','Kommunikativgesetz');
INSERT INTO "connection" VALUES(27,'x ^ x = x','heißt','Idempotenzgesetz');
INSERT INTO "connection" VALUES(27,'Baum','Besuch aller Knoten','Traversierung');
INSERT INTO "connection" VALUES(27,'Ausdrücke und Funktionen','Auswertung über vers. ... mögl.','Prozess');
INSERT INTO "connection" VALUES(27,'x v x = x','heißt','Idempotenzgesetz');
INSERT INTO "connection" VALUES(27,'iterativer Prozess','ermöglicht eindeutige Zustandsbeschreibung','Parameter innerhalb des Funktionsaufrufes');
INSERT INTO "connection" VALUES(27,'Postorder','Betrachtung von','Binärbaum');
INSERT INTO "connection" VALUES(27,'x ^ y = y ^ x','ist','Gesetze der booleschen Algebra');
INSERT INTO "connection" VALUES(27,'Wahrheitswert','hängt von ... ab','Variable');
INSERT INTO "connection" VALUES(27,'(define (name param.1 ... param.n) ...)','ist eine','special-form');
INSERT INTO "connection" VALUES(28,'Teilbaum','ist ein','Baum');
INSERT INTO "connection" VALUES(28,'Blatt','hat keinen','Teilbaum');
INSERT INTO "connection" VALUES(28,'Wurzel','ist ein','Knoten');
INSERT INTO "connection" VALUES(28,'Baum','hat eine','Wurzel');
INSERT INTO "connection" VALUES(28,'Baum','kann sein','Binärbaum');
INSERT INTO "connection" VALUES(28,'Knoten','kann sein','Blatt');
INSERT INTO "connection" VALUES(28,'Binärbaum','hat 0, 1 oder 2','Teilbaum');
INSERT INTO "connection" VALUES(29,'Implementierung','in das','Programm');
INSERT INTO "connection" VALUES(29,'Daten','bestehen aus','Listen');
INSERT INTO "connection" VALUES(29,'Programmierer','analysiert','Aufgabe (Word Problem)');
INSERT INTO "connection" VALUES(29,'Variablen','in','Programm');
INSERT INTO "connection" VALUES(29,'Programmierer','wählt','Sprache');
INSERT INTO "connection" VALUES(29,'Computer','nutzt','Informationssystem');
INSERT INTO "connection" VALUES(29,'Daten','bestehen aus','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(29,'Repräsentation','bilden','Informationssystem');
INSERT INTO "connection" VALUES(29,'Computer','nutzt','Programm');
INSERT INTO "connection" VALUES(29,'Hilfsfunktionen','in','Programm');
INSERT INTO "connection" VALUES(29,'Algorithmus','benötigt','Implementierung');
INSERT INTO "connection" VALUES(29,'Programmierer','schreibt','Algorithmus');
INSERT INTO "connection" VALUES(29,'Computer','verarbeitet','Daten');
INSERT INTO "connection" VALUES(29,'Programmierer','entwickelt','Entwurf');
INSERT INTO "connection" VALUES(29,'Programmierer','schreibt','Programm');
INSERT INTO "connection" VALUES(29,'Information','bilden','Informationssystem');
INSERT INTO "connection" VALUES(29,'Sprache','legt fest','Repräsentation');
INSERT INTO "connection" VALUES(29,'Programmierer','isoliert','Daten');
INSERT INTO "connection" VALUES(29,'Daten','bilden','Information');
INSERT INTO "connection" VALUES(29,'Interpretation','bilden','Informationssystem');
INSERT INTO "connection" VALUES(29,'Repräsentation','wird interpretiert in','Interpretation');
INSERT INTO "connection" VALUES(29,'Information','wird dargestellt als','Repräsentation');
INSERT INTO "connection" VALUES(29,'Sprache','legt fest','Interpretation');
INSERT INTO "connection" VALUES(30,'Baum','kann beschreiben','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(30,'Programm','kann beschreiben','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(30,'Baum','kann ...besitzen','Teilbäume');
INSERT INTO "connection" VALUES(30,'Baum','hat','Wurzel');
INSERT INTO "connection" VALUES(30,'arithmetischer Ausdruck','kann enthalten','Operatoren');
INSERT INTO "connection" VALUES(30,'arithmetischer Ausdruck','besteht aus','Numerale');
INSERT INTO "connection" VALUES(31,'Bedingte Ausdrücke','Bestandteil von','Funktionale Programmierung');
INSERT INTO "connection" VALUES(31,'Zusammengesetzte Datentypen','ist ein','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(31,'Listen','Bestandteil von','Funktionale Programmierung');
INSERT INTO "connection" VALUES(31,'Funktionale Programmierung','Bestandteil von','Zusammengesetzte Datentypen');
INSERT INTO "connection" VALUES(31,'Funktionale Programmierung','Bestandteil von','Informatik');
INSERT INTO "connection" VALUES(31,'Listen','verarbeitet','Rekursion');
INSERT INTO "connection" VALUES(31,'Bedingte Ausdrücke','wertet aus','Ausdrücke');
INSERT INTO "connection" VALUES(32,'Liste','kann enthalten','Liste');
INSERT INTO "connection" VALUES(32,'nicht- / lineare','Typ von','Rekursion');
INSERT INTO "connection" VALUES(32,'zusammengesetzt','kann enthalten','Liste');
INSERT INTO "connection" VALUES(32,'in-/direkte','Typ von','Rekursion');
INSERT INTO "connection" VALUES(32,'Datentyp','kann sein','zusammengesetzt');
INSERT INTO "connection" VALUES(32,'Datentyp','kann sein','Liste');
INSERT INTO "connection" VALUES(32,'Liste','benötigt','Konstruktor / Selektor');
INSERT INTO "connection" VALUES(32,'Funktion','kann beinhalten','Rekursion');
INSERT INTO "connection" VALUES(32,'Datentyp','kann sein','simpel');
INSERT INTO "connection" VALUES(32,'Ausgabe','kann wiederrum sein','Eingabe ');
INSERT INTO "connection" VALUES(32,'Datentyp','kann sein','Funktion');
INSERT INTO "connection" VALUES(32,'zusammengesetzt','benötigt','Konstruktor / Selektor');
INSERT INTO "connection" VALUES(32,'Eingabe','benötigt','Typsicherung');
INSERT INTO "connection" VALUES(32,'Funktion','kann benötigen','Eingabe');
INSERT INTO "connection" VALUES(32,'Funktion','berechnet eine','Ausgabe');
INSERT INTO "connection" VALUES(32,'zusammengesetzt','kann enthalten','simpel');
INSERT INTO "connection" VALUES(32,'Eingabe','hat einen','Datentyp');
INSERT INTO "connection" VALUES(32,'Funktion','kann benötigen','Hilfsfunktion');
INSERT INTO "connection" VALUES(32,'Liste',' ','zusammengesetzt');
INSERT INTO "connection" VALUES(32,'Ausgabe','hat einen','Datentyp');
INSERT INTO "connection" VALUES(33,'Programm','löst','Problem');
INSERT INTO "connection" VALUES(33,'Funktion','benötigt','Struktur');
INSERT INTO "connection" VALUES(33,'Informationen','sind äquivalent zu','Daten');
INSERT INTO "connection" VALUES(33,'Programm','benötigt','Eingabe');
INSERT INTO "connection" VALUES(33,'Eingabe','kann enthalten','Parameter');
INSERT INTO "connection" VALUES(33,'Funktion','benötigt','Problem');
INSERT INTO "connection" VALUES(33,'Syntax','wird konkretisiert durch','Regeln');
INSERT INTO "connection" VALUES(33,'Datentypen','repräsentieren','Daten');
INSERT INTO "connection" VALUES(33,'Eingabe','benötigt','Alphabet und Wörter');
INSERT INTO "connection" VALUES(33,'Funktion','liefert','Auswertung');
INSERT INTO "connection" VALUES(33,'Hilfsfunktion','gestaltet übersichtlicher','Funktion');
INSERT INTO "connection" VALUES(33,'Programm','benötigt','Funktion');
INSERT INTO "connection" VALUES(33,'Funktion','benötigt','Semantik');
INSERT INTO "connection" VALUES(33,'Interpretation','bedarf einer','Notation');
INSERT INTO "connection" VALUES(33,'Auswertung','bedarf einer','Interpretation');
INSERT INTO "connection" VALUES(33,'Eingabe','benötigt','Syntax');
INSERT INTO "connection" VALUES(33,'Funktion','benötigt','Definition');
INSERT INTO "connection" VALUES(33,'Problem','basiert auf','Informationen');
INSERT INTO "connection" VALUES(33,'Definition','benötigt','Struktur');
INSERT INTO "connection" VALUES(34,'Funktion, welche rekursiv definiert ist','liefert zurück','Wert');
INSERT INTO "connection" VALUES(34,'rekursiv definierte Funktion','führt aus','Funktion, welche rekursiv definiert ist');
INSERT INTO "connection" VALUES(34,'Programm','berechnet','rekursiv definierte Funktion');
INSERT INTO "connection" VALUES(34,'ein durch ein Programm lösbares Problem','erfordert','Programm');
INSERT INTO "connection" VALUES(34,'Wert','löst','ein durch ein Programm lösbares Problem');
INSERT INTO "connection" VALUES(35,'Rückgabewert','kann sein','Struktur');
INSERT INTO "connection" VALUES(35,'Funktion','hat immer','Rückgabewert');
INSERT INTO "connection" VALUES(35,'Funktion','wertet aus','Struktur');
INSERT INTO "connection" VALUES(35,'Rückgabewert','ist','Struktur');
INSERT INTO "connection" VALUES(36,'Beschreibung','muss sein','endlich');
INSERT INTO "connection" VALUES(36,'Beschreibung','muss sein','praezise');
INSERT INTO "connection" VALUES(36,'effektive Verarbeitungsschritte','bedeutet hier','Schritte, die von einer Maschine in endlicher Zeit ausgefuehrt werden koennen');
INSERT INTO "connection" VALUES(36,'Algorithmus','ist eine','Beschreibung');
INSERT INTO "connection" VALUES(36,'endlich','bedeutet hier','Repraesentation endlicher Groesse');
INSERT INTO "connection" VALUES(36,'Funktion','was','Berechnung');
INSERT INTO "connection" VALUES(36,'Algorithmus','verwendet','effektive Verarbeitungsschritte');
INSERT INTO "connection" VALUES(36,'Algorithmus','wie','Berechnung');
INSERT INTO "connection" VALUES(36,'praezise','bedeutet hier','in eindeutiger Sprache abgefasst');
INSERT INTO "connection" VALUES(37,'typisierte Programmiersprache','ist','Programmiersprache');
INSERT INTO "connection" VALUES(37,'list','ist','Datentyp');
INSERT INTO "connection" VALUES(37,'Binärbaum','Unterkategorie von','Baum');
INSERT INTO "connection" VALUES(37,'Binärbaum','hat nur zwei','Teilbäume');
INSERT INTO "connection" VALUES(37,'Racket','Bestandteil','Funktion');
INSERT INTO "connection" VALUES(37,'Implikation','ist','Junktor');
INSERT INTO "connection" VALUES(37,'Programm','verarbeitet','Eingabe');
INSERT INTO "connection" VALUES(37,'Baum','besteht aus','Wurzel');
INSERT INTO "connection" VALUES(37,'struct','generiert','Selektor');
INSERT INTO "connection" VALUES(37,'Racket','kann enthalten','Platzhalter');
INSERT INTO "connection" VALUES(37,'Programm','verwendet','Operationen');
INSERT INTO "connection" VALUES(37,'Programm','enthält','Signatur');
INSERT INTO "connection" VALUES(37,'struct','ist','Special Form');
INSERT INTO "connection" VALUES(37,'Implementierung','spezifiziert','Programm');
INSERT INTO "connection" VALUES(37,'Racket','verwendet','Präfix-Notation');
INSERT INTO "connection" VALUES(37,'Programm','erzeugt','Ausgabe');
INSERT INTO "connection" VALUES(37,'Arithmetischer Ausdruck','wird ausgewertet durch','Funktion');
INSERT INTO "connection" VALUES(37,'Äquivalenz','ist','Junktor');
INSERT INTO "connection" VALUES(37,'Postfix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(37,'struct','ist','Datentyp');
INSERT INTO "connection" VALUES(37,'struct','generiert','Konstruktor');
INSERT INTO "connection" VALUES(37,'cond-Abfrage','ist','Special Form');
INSERT INTO "connection" VALUES(37,'Schablone','enthält','Zweck');
INSERT INTO "connection" VALUES(37,'Racket','Bestandteil','Special Form');
INSERT INTO "connection" VALUES(37,'Infix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(37,'Repräsentation','wandelt interne Darstellung um','Interpretation');
INSERT INTO "connection" VALUES(37,'if-Abfrage','ist','Special Form');
INSERT INTO "connection" VALUES(37,'list','ist','Special Form');
INSERT INTO "connection" VALUES(37,'Schablone','enthält','Datendefinition');
INSERT INTO "connection" VALUES(37,'list','kann sein','rekursiver Funktionsaufruf');
INSERT INTO "connection" VALUES(37,'Programm','wird geschrieben','Racket');
INSERT INTO "connection" VALUES(37,'Funktion','wird definiert durch','Wertebereich');
INSERT INTO "connection" VALUES(37,'Definitionsbereich','Überführung durch Funktionsvorschrift','Wertebereich');
INSERT INTO "connection" VALUES(37,'Schablone','enthält','Beispiele');
INSERT INTO "connection" VALUES(37,'Tests','in Racket','check-expect');
INSERT INTO "connection" VALUES(37,'Java','verwendet','Infix-Notation');
INSERT INTO "connection" VALUES(37,'Funktion','wird definiert durch','Definitionsbereich');
INSERT INTO "connection" VALUES(37,'abstrakter Datentyp','ist','Datentyp');
INSERT INTO "connection" VALUES(37,'Prof Vahrenhold','empfiehlt das Verwenden von','Schablone');
INSERT INTO "connection" VALUES(37,'Schablone','enthält','Signatur');
INSERT INTO "connection" VALUES(37,'atomare Aussage','beinhaltet keinen','Junktor');
INSERT INTO "connection" VALUES(37,'Baum','besteht optional aus','Teilbäume');
INSERT INTO "connection" VALUES(37,'Racket','ist','typisierte Programmiersprache');
INSERT INTO "connection" VALUES(37,'Programm','hat mindestens einen','Parameter');
INSERT INTO "connection" VALUES(37,'Implementierung','ersetzt','Platzhalter');
INSERT INTO "connection" VALUES(37,'Konjunktion','ist','Junktor');
INSERT INTO "connection" VALUES(37,'Präfix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(37,'Programm','verwendet','andere Programme');
INSERT INTO "connection" VALUES(37,'Wurzel','verbunden über Kante','Teilbäume');
INSERT INTO "connection" VALUES(37,'Schablone','enthält','Tests');
INSERT INTO "connection" VALUES(37,'Negation','ist','Junktor');
INSERT INTO "connection" VALUES(37,'Disjunktion','ist','Junktor');
INSERT INTO "connection" VALUES(37,'Klasse','ist','Datentyp');
INSERT INTO "connection" VALUES(37,'Prof Vahrenhold','mag','Signatur');
INSERT INTO "connection" VALUES(37,'rekursiver Funktionsaufruf','ruft auf mit Selbstbezug','Funktion');
INSERT INTO "connection" VALUES(38,'Fünf Schritte','als erstes','Datenanalyse und -definition');
INSERT INTO "connection" VALUES(38,'Programmierung','mit','Hilfsfunktionen');
INSERT INTO "connection" VALUES(38,'Rekursion','oder auch','indirekt rekursiv');
INSERT INTO "connection" VALUES(38,'Ausdrücke','durch','Bäume');
INSERT INTO "connection" VALUES(38,'Programmierung','einer','Liste');
INSERT INTO "connection" VALUES(38,'Programmierung','es gibt','Strukturen');
INSERT INTO "connection" VALUES(38,'Bäume','und','Kanten');
INSERT INTO "connection" VALUES(38,'Hilfsfunktionen','zur','Modularisierung');
INSERT INTO "connection" VALUES(38,'Programmierung','benutzt','Datentypen');
INSERT INTO "connection" VALUES(38,'Liste','benutzt','Rekursion');
INSERT INTO "connection" VALUES(38,'Traversierung','durch','Präorder');
INSERT INTO "connection" VALUES(38,'Rekursion','eine weitere Art','direkt rekursiv');
INSERT INTO "connection" VALUES(38,'Programmierung','in Racket','Fünf Schritte');
INSERT INTO "connection" VALUES(38,'Bäume','eine','Wurzel');
INSERT INTO "connection" VALUES(38,'Programmierung','von','Funktionen');
INSERT INTO "connection" VALUES(38,'Rekursion','benötigt','Funktionen');
INSERT INTO "connection" VALUES(38,'Schablone erstellen','zu letzt','Funktionsrumpf erstellen');
INSERT INTO "connection" VALUES(38,'Bäume','Auswertung durch','Traversierung');
INSERT INTO "connection" VALUES(38,'Rekursion','eine Art','Iterativ');
INSERT INTO "connection" VALUES(38,'Funktionen','wertet aus','Ausdrücke');
INSERT INTO "connection" VALUES(38,'Traversierung','oder','Inorder');
INSERT INTO "connection" VALUES(38,'Bäume','haben','Knoten');
INSERT INTO "connection" VALUES(38,'Beispiele','falls notwendig','Schablone erstellen');
INSERT INTO "connection" VALUES(38,'Signatur, Zweck, Funktionskopf','erstellen der','Beispiele');
INSERT INTO "connection" VALUES(38,'Datenanalyse und -definition','dann','Signatur, Zweck, Funktionskopf');
INSERT INTO "connection" VALUES(38,'Traversierung','oder auch','Postorder');
INSERT INTO "connection" VALUES(39,'Racket','Beispiel für','Funktionale Programmierung');
INSERT INTO "connection" VALUES(39,'Funktionale Programmierung','gleichwertig zur','Objektorientierte Programmierung');
INSERT INTO "connection" VALUES(39,'Algorithmus','steckt in','Funktionen');
INSERT INTO "connection" VALUES(39,'Zustand','vorhanden in','Objektorientierte Programmierung');
INSERT INTO "connection" VALUES(39,'Racket','ist','Programmiersprache');
INSERT INTO "connection" VALUES(39,'Funktionen','benötigen','Eingabe und Ausgabe');
INSERT INTO "connection" VALUES(39,'Racketprogramm','besteht aus','Funktionen');
INSERT INTO "connection" VALUES(39,'Algorithmus','verarbeitet und liefert zurück','Eingabe und Ausgabe');
INSERT INTO "connection" VALUES(39,'Zustand','nicht vorhanden in','Funktionale Programmierung');
INSERT INTO "connection" VALUES(39,'Funktionale Programmierung','wertet aus','Funktionen');
INSERT INTO "connection" VALUES(39,'Hilfsfunktionen','Hilfe und Übersichtlichkeit für','Funktionen');
INSERT INTO "connection" VALUES(39,'Racketprogramm','wird erzeugt mit','Racket');
INSERT INTO "connection" VALUES(40,'Datentypen','kann sein','Listen');
INSERT INTO "connection" VALUES(40,'Datentypen','kann sein','Numbers');
INSERT INTO "connection" VALUES(40,'Programme','müssen bestehen','Überprüfung');
INSERT INTO "connection" VALUES(40,'Datentypen','kann sein','Strings');
INSERT INTO "connection" VALUES(40,'Programme','besitzen','Zweck');
INSERT INTO "connection" VALUES(40,'Programme','besitzen','Signatur');
INSERT INTO "connection" VALUES(40,'Programme','sind','Typsicher');
INSERT INTO "connection" VALUES(40,'Programme','nimmt entgegen/gibt aus','Datentypen');
INSERT INTO "connection" VALUES(40,'Programme','besitzen','Schablone');
INSERT INTO "connection" VALUES(41,'Präfix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(41,'Semantik','best. durch','Gleichungen');
INSERT INTO "connection" VALUES(41,'Definitionen','erzeugen','iterativer Prozess');
INSERT INTO "connection" VALUES(41,'Datenanalyse','identifiziert','Situationstypen');
INSERT INTO "connection" VALUES(41,'getypte Programmiersprache','schränkt ein auf','Wertebereich');
INSERT INTO "connection" VALUES(41,'Racket','nutzt','Rekursion');
INSERT INTO "connection" VALUES(41,'Programm','nutzt','Variablen');
INSERT INTO "connection" VALUES(41,'Racket','ist','multiparadigmatische Programmiersprache');
INSERT INTO "connection" VALUES(41,'Racket','nutzt eine','Boolesche Algebra');
INSERT INTO "connection" VALUES(41,'Konstruktor','generiert','konstantes Datenbündel');
INSERT INTO "connection" VALUES(41,'Racket','hat','Auswertungsvorschrift');
INSERT INTO "connection" VALUES(41,'arithmetischer Ausdruck','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(41,'Racket','hat','special forms');
INSERT INTO "connection" VALUES(41,'Programm','verwendet','eingebaute Operationen');
INSERT INTO "connection" VALUES(41,'Programm','verwendet','Programm');
INSERT INTO "connection" VALUES(41,'Programm','definiert durch','Berechnungsvorschrift');
INSERT INTO "connection" VALUES(41,'Entwurf','durch Angabe von','Zweck');
INSERT INTO "connection" VALUES(41,'Programm','beruht auf','Entwurf');
INSERT INTO "connection" VALUES(41,'Selektor(en)','greift auf Komponente zu','strukturierte Daten');
INSERT INTO "connection" VALUES(41,'Definitionen','erzeugen','rek. Prozess');
INSERT INTO "connection" VALUES(41,'arithmetischer Ausdruck','enthält','Numerale');
INSERT INTO "connection" VALUES(41,'Programm','benötigt','Tests');
INSERT INTO "connection" VALUES(41,'Entwurf','durch Angabe von','Signatur');
INSERT INTO "connection" VALUES(41,'eingebaute Operationen','in','Racket');
INSERT INTO "connection" VALUES(41,'Binärbaum','ist','Baum');
INSERT INTO "connection" VALUES(41,'abstrakte Datentypen','haben','Syntax');
INSERT INTO "connection" VALUES(41,'Variablen','ersetzen','Konstanten');
INSERT INTO "connection" VALUES(41,'Datenanalyse','impliziert (oft)','Datendefinition');
INSERT INTO "connection" VALUES(41,'Programm','definiert durch','Name');
INSERT INTO "connection" VALUES(41,'strukturierte Daten','definiert durch','Datendefinition');
INSERT INTO "connection" VALUES(41,'Rekursion','oft verwendet bei','Definitionen');
INSERT INTO "connection" VALUES(41,'special forms','modifizieren','Auswertungsvorschrift');
INSERT INTO "connection" VALUES(41,'strukturierte Daten','haben','Konstruktor');
INSERT INTO "connection" VALUES(41,'Fallunterscheidungen','sind','special forms');
INSERT INTO "connection" VALUES(41,'Baum','besteht aus','Baum');
INSERT INTO "connection" VALUES(41,'Notation','verwendet für','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(41,'Boolesche Algebra','hat','Gesetze');
INSERT INTO "connection" VALUES(41,'strukturierte Daten','identifiziert durch','Typ-Prädikat');
INSERT INTO "connection" VALUES(41,'Racket','ist','getypte Programmiersprache');
INSERT INTO "connection" VALUES(41,'Baum','kann darstellen','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(41,'Datentypen','sind (teilweise)','abstrakte Datentypen');
INSERT INTO "connection" VALUES(41,'Situationstypen','impliziert','Fallunterscheidungen');
INSERT INTO "connection" VALUES(41,'Programm','benötigt','Beispiele');
INSERT INTO "connection" VALUES(41,'Boolesche Algebra','hat','Verknüpfungen');
INSERT INTO "connection" VALUES(41,'Programm','benötigt','Kommentare');
INSERT INTO "connection" VALUES(41,'rek. Prozess','schiebt auf (Expansion)','Operationen');
INSERT INTO "connection" VALUES(41,'Baum','besteht aus','Knoten');
INSERT INTO "connection" VALUES(41,'Infix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(41,'"funktionaler Baukasten"','benutzt nicht','Variablen (gemäß Behälterprinzip)');
INSERT INTO "connection" VALUES(41,'Hilfsfunktionen','verwendet für jede','Abhängigkeit');
INSERT INTO "connection" VALUES(41,'Racket','nutzt','Fallunterscheidungen');
INSERT INTO "connection" VALUES(41,'Verknüpfungen','sind in Racket mitunter','special forms');
INSERT INTO "connection" VALUES(41,'"funktionaler Baukasten"','fußt auf','Lambda-Kalkül');
INSERT INTO "connection" VALUES(41,'Rekursion','benötigt','Abbruchbedingung');
INSERT INTO "connection" VALUES(41,'getypte Programmiersprache','verwendet','Datentypen');
INSERT INTO "connection" VALUES(41,'Syntax','bestimmt durch','Signatur');
INSERT INTO "connection" VALUES(41,'Programm','nutzt','Hilfsfunktionen');
INSERT INTO "connection" VALUES(41,'Racket','hat','Funktionen');
INSERT INTO "connection" VALUES(41,'Programm','definiert durch','Parameter');
INSERT INTO "connection" VALUES(41,'Entwurf','durch Angabe von','Funktionskopf');
INSERT INTO "connection" VALUES(41,'Entwurf','test-driven development','Tests');
INSERT INTO "connection" VALUES(41,'abstrakte Datentypen','haben','Semantik');
INSERT INTO "connection" VALUES(41,'Programm','definiert in','Racket');
INSERT INTO "connection" VALUES(41,'"funktionaler Baukasten"','startet Programm(e) durch','Aufruf einer Funktion mit Parametern');
INSERT INTO "connection" VALUES(41,'Racket','verwendet','Präfix-Notation');
INSERT INTO "connection" VALUES(41,'Entwurf','verwendet','Schablonen');
INSERT INTO "connection" VALUES(41,'Entwurf','impliziert','Datenanalyse');
INSERT INTO "connection" VALUES(41,'strukturierte Daten','def. durch','Strukturdefinition');
INSERT INTO "connection" VALUES(41,'Racket','erlaubt Verwendung von','strukturierte Daten');
INSERT INTO "connection" VALUES(41,'Listen','sind','Datentypen');
INSERT INTO "connection" VALUES(41,'arithmetischer Ausdruck','enthält','Operatorsymbole');
INSERT INTO "connection" VALUES(41,'Strukturdefinition','in','Racket');
INSERT INTO "connection" VALUES(41,'Racket','benutzt','"funktionaler Baukasten"');
INSERT INTO "connection" VALUES(41,'Postfix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(41,'Verknüpfungen','definiert auf','Wahrheitswerte');
INSERT INTO "connection" VALUES(42,'Bäume','Spezialform','Binärbäume');
INSERT INTO "connection" VALUES(42,'Typüberprüfung','Vereinfacht','Modularisierung');
INSERT INTO "connection" VALUES(42,'Datentyp','Definiert durch','Operatormenge');
INSERT INTO "connection" VALUES(42,'Typüberprüfung','Vereinfacht','Optimierung');
INSERT INTO "connection" VALUES(42,'Typüberprüfung','Vereinfacht','Fehlereliminierung');
INSERT INTO "connection" VALUES(42,'Typüberprüfung','Vereinfacht','Fehlersuche');
INSERT INTO "connection" VALUES(42,'Aussagen','Werden verbunden von','Junktoren');
INSERT INTO "connection" VALUES(42,'Arithmetischer Ausdruck','Enthält','Operatorsymbol');
INSERT INTO "connection" VALUES(42,'Typisierung','Ermöglicht','Typüberprüfung');
INSERT INTO "connection" VALUES(42,'Arithmetischer Ausdruck','Enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(42,'Typisierung','Schränkt ein','Werte');
INSERT INTO "connection" VALUES(42,'Werte','Ist','Symbole');
INSERT INTO "connection" VALUES(42,'Arithmetischer Ausdruck','Enthält','Numeral');
INSERT INTO "connection" VALUES(42,'Bäume','Enthalten','Teilbäume');
INSERT INTO "connection" VALUES(42,'Datentyp','Zusammengesetzt aus','Wertebereichen');
INSERT INTO "connection" VALUES(42,'Werte','Ist','Benutzrtdefinierte Strukturen');
INSERT INTO "connection" VALUES(42,'Bäume','Haben','Knoten/Wurzeln');
INSERT INTO "connection" VALUES(42,'Arithmetischer Ausdruck','Darstellung durch','Bäume');
INSERT INTO "connection" VALUES(42,'Werte','Ist','Boolische Werte');
INSERT INTO "connection" VALUES(42,'Datentyp','Definiert durch','Wertemenge');
INSERT INTO "connection" VALUES(42,'Aussagen','Folgt','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(43,'if','enthält','Bedingung');
INSERT INTO "connection" VALUES(43,'Hilfsfunktion','unterstützt','Funktion');
INSERT INTO "connection" VALUES(43,'DRacket Programm','enthält','Kommentare');
INSERT INTO "connection" VALUES(43,'Funktion','enthält','Befehl');
INSERT INTO "connection" VALUES(43,'list','besteht aus','Zeichen');
INSERT INTO "connection" VALUES(43,'cons','erzeugt','list');
INSERT INTO "connection" VALUES(43,'Befehl','ist','if');
INSERT INTO "connection" VALUES(43,'empty','beendet','list');
INSERT INTO "connection" VALUES(43,'Befehl','ist','cond');
INSERT INTO "connection" VALUES(43,'DRacket Programm','besteht aus','Funktion');
INSERT INTO "connection" VALUES(43,'Kommentare','helfen','Student');
INSERT INTO "connection" VALUES(43,'DRacket Programm','besteht aus','Hilfsfunktion');
INSERT INTO "connection" VALUES(43,'cond','enthält','Bedingung');
INSERT INTO "connection" VALUES(43,'Student','erstellt','DRacket Programm');
INSERT INTO "connection" VALUES(43,'Funktion','gibt','Ausgabe');
INSERT INTO "connection" VALUES(43,'Befehl','ist','cons');
INSERT INTO "connection" VALUES(44,'Konjunktion, Disjunktion, Implikation, Äquivalenz und Negation','sind Arten von','Junktoren');
INSERT INTO "connection" VALUES(44,'Notation','verknüpft Numerale durch Operatorsymbole','Numeral, Operatorsymbol und Hilfszeichen');
INSERT INTO "connection" VALUES(44,'iterative Prozesse','behandelt in','Kapitel 6');
INSERT INTO "connection" VALUES(44,'Kapitel 2','Teil von','Informatikvorlesung');
INSERT INTO "connection" VALUES(44,'Bäume','sind Thema von','Kapitel 2');
INSERT INTO "connection" VALUES(44,'List','ist eine Art von','ADT');
INSERT INTO "connection" VALUES(44,'Fallunterscheidungen','Thema von','Kapitel 3');
INSERT INTO "connection" VALUES(44,'Rekursion','kann ... gestützt sein','direkt oder schrittweise');
INSERT INTO "connection" VALUES(44,'Junktoren','verbinden mehrere','Aussagen');
INSERT INTO "connection" VALUES(44,'Boolsche Werte','sind die Auswertung von','Aussagen');
INSERT INTO "connection" VALUES(44,'if und cond','sind zugehörige Befehle','Fallunterscheidungen');
INSERT INTO "connection" VALUES(44,'Arithmetische Ausdrücke','sind Thema von','Kapitel 2');
INSERT INTO "connection" VALUES(44,'Sorte, Spezifikation und Semantik','bilden','ADT');
INSERT INTO "connection" VALUES(44,'Aussagen','können sein','erfüllt, erfüllbar oder allgemeingültig');
INSERT INTO "connection" VALUES(44,'true und false','sind konstante','Boolsche Werte');
INSERT INTO "connection" VALUES(44,'Rekursion','kann ... sein','direkt, indirekt oder linear');
INSERT INTO "connection" VALUES(44,'Kapitel 3','Teil von','Informatikvorlesung');
INSERT INTO "connection" VALUES(44,'iterative Prozesse','haben verschiedene Vor- und Nachteile','Rekursion');
INSERT INTO "connection" VALUES(44,'Inflix- Präfix- und Postfix','sind Arten von','Notation');
INSERT INTO "connection" VALUES(44,'Traversierung','gibt Leserichtung an','Bäume');
INSERT INTO "connection" VALUES(44,'Numeral, Operatorsymbol und Hilfszeichen','sind Alphabet von','Arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(44,'Präorder, Inorder und Postorder','sind Möglichkeiten zur','Traversierung');
INSERT INTO "connection" VALUES(44,'Aussagen','sind Bestandteil der','Aussagenlogik');
INSERT INTO "connection" VALUES(44,'Boolsche Werte','haben in Racket die Funktionen','and, or, not');
INSERT INTO "connection" VALUES(44,'Aussagenlogik','ist Thema von','Kapitel 3');
INSERT INTO "connection" VALUES(44,'else','erzwingt erfolgreiche Auflösung von','Fallunterscheidungen');
INSERT INTO "connection" VALUES(44,'List','wird durch definiert','Rekursion');
INSERT INTO "connection" VALUES(44,'Boolsche Werte','sind racketbekannt Typen','Arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(44,'Rekursion','Thema von','Kapitel 6');
INSERT INTO "connection" VALUES(44,'Kapitel 6','Teil von','Informatikvorlesung');
INSERT INTO "connection" VALUES(44,'Knoten (Wurzel), Bäume und Kanten','bilden','Bäume');
INSERT INTO "connection" VALUES(44,'ADT','Thema von','Kapitel 5');
INSERT INTO "connection" VALUES(44,'true und false','können kombiniert werden','and, or, not');
INSERT INTO "connection" VALUES(44,'Kapitel 5','Teil von','Informatikvorlesung');
INSERT INTO "connection" VALUES(45,'if','ist eine','special form');
INSERT INTO "connection" VALUES(45,'string/symbol','kann eingebaut werden','cond');
INSERT INTO "connection" VALUES(45,'Typen','in Racket','Zahlen');
INSERT INTO "connection" VALUES(45,'define-struct','ist eine','special form');
INSERT INTO "connection" VALUES(45,'Baum','besteht aus','Knoten w (Wurzel) und k Teilbäumen');
INSERT INTO "connection" VALUES(45,'Baum','kann sein','Binärbaum');
INSERT INTO "connection" VALUES(45,'Spezifikation','enthält','Semantik');
INSERT INTO "connection" VALUES(45,'vollständige Induktion','3. Schritt','Induktionsschritt');
INSERT INTO "connection" VALUES(45,'arithmetischer Ausdruck (op exp1 exp2)','enthält','Operatorsymbole');
INSERT INTO "connection" VALUES(45,'cond','ist eine','special form');
INSERT INTO "connection" VALUES(45,'Spezifikation','ist','Paar (SIG,EQ)');
INSERT INTO "connection" VALUES(45,'Datentyp','Teilgebiet','abstrakter Datentyp (ADT)');
INSERT INTO "connection" VALUES(45,'vollständige Induktion','1. Schritt','Induktionsanfang');
INSERT INTO "connection" VALUES(45,'heterogen','enthält','Komponenten');
INSERT INTO "connection" VALUES(45,'Paar (SIG,EQ)','Funktion','cons');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Funktionen','and, or, not');
INSERT INTO "connection" VALUES(45,'konstantes Datenbündel','existiert durch','define-struct');
INSERT INTO "connection" VALUES(45,'schrittweises Abstützen','benötigt','Elementaroperationen');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Gesetz des ausgeschlossenen Dritten');
INSERT INTO "connection" VALUES(45,'Konstruktor','Baustein','konstantes Datenbündel');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Distributivgesetz');
INSERT INTO "connection" VALUES(45,'Baum','kann haben','Teilbäume');
INSERT INTO "connection" VALUES(45,'Spezifikation','gehört zur','Signatur');
INSERT INTO "connection" VALUES(45,'vollständige Induktion','Beweisverfahren','induktive Definition');
INSERT INTO "connection" VALUES(45,'Liste','ist','abstrakter Datentyp (ADT)');
INSERT INTO "connection" VALUES(45,'Baum','besteht aus','Knoten w (Wurzel)');
INSERT INTO "connection" VALUES(45,'direktes Abstützen','Voraussetzung','direkt rekursiv');
INSERT INTO "connection" VALUES(45,'kartesisches Produkt','kann sein','heterogen');
INSERT INTO "connection" VALUES(45,'rekursive Funktion','Beispiel','Fakultätsfunktion fak');
INSERT INTO "connection" VALUES(45,'heterogen','enthält','Selektoren');
INSERT INTO "connection" VALUES(45,'rekursive Funktion','kann sein','rekursiver Prozess');
INSERT INTO "connection" VALUES(45,'Zeichenketten','enthält','special form');
INSERT INTO "connection" VALUES(45,'Boolesche Werte, Symbole','gehören zu','Boolesche Algebra');
INSERT INTO "connection" VALUES(45,'schrittweises Abstützen','Voraussetzung','indirekt rekursiv');
INSERT INTO "connection" VALUES(45,'rekursive Funktion','kann sein','linear rekursiv');
INSERT INTO "connection" VALUES(45,'induktive Definition','im','Datentyp');
INSERT INTO "connection" VALUES(45,'rekursiver Aufruf','innerhalb','rekursive Funktion');
INSERT INTO "connection" VALUES(45,'define-struct','Ergebnis','make-posn');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Konstanten','true, false');
INSERT INTO "connection" VALUES(45,'endrekursiv','muss Auswertung sein','iterativer Prozess');
INSERT INTO "connection" VALUES(45,'vollständige Induktion','2. Schritt','Induktionsvoraussetzung');
INSERT INTO "connection" VALUES(45,'Typen','in Racket','Boolesche Werte, Symbole');
INSERT INTO "connection" VALUES(45,'Boolesche Abbildung','auch genannt','Prädikate');
INSERT INTO "connection" VALUES(45,'Algebra','Teilgebiet','Boolesche Algebra');
INSERT INTO "connection" VALUES(45,'Baum','hat','Blatt (Blätter)');
INSERT INTO "connection" VALUES(45,'Liste','kann sein','list-of-numbers');
INSERT INTO "connection" VALUES(45,'define-struct','Ergebnis','posn-y');
INSERT INTO "connection" VALUES(45,'define-struct','Ergebnis','posn-x');
INSERT INTO "connection" VALUES(45,'induktive Definition','enthält','kartesisches Produkt');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Neutralitätsgesetz');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Assoziativgesetz');
INSERT INTO "connection" VALUES(45,'Präfix','ist Variation von','verschiedene Notationen');
INSERT INTO "connection" VALUES(45,'list','ist eine','special form');
INSERT INTO "connection" VALUES(45,'rekursive Funktion','kann sein','endrekursiv');
INSERT INTO "connection" VALUES(45,'Aussagen','Teilgebiet','Algebra');
INSERT INTO "connection" VALUES(45,'foldr','ist eine','special form');
INSERT INTO "connection" VALUES(45,'Wertebereich','vom','Datentyp');
INSERT INTO "connection" VALUES(45,'Paar (SIG,EQ)','Teilgebiet','homogene Paare');
INSERT INTO "connection" VALUES(45,'rekursive Funktion','kann sein','direkt rekursiv');
INSERT INTO "connection" VALUES(45,'iterativer Prozess','"Gegenteil"','rekursiver Prozess');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Absorptionsgesetz');
INSERT INTO "connection" VALUES(45,'nicht-linear rekursiv','"Gegenteil"','linear rekursiv');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Kommutativgesetz');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Idempotenzgesetz');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Involution');
INSERT INTO "connection" VALUES(45,'arithmetischer Ausdruck (op exp1 exp2)','enthält','Numerale');
INSERT INTO "connection" VALUES(45,'string/symbol','ist eine','special form');
INSERT INTO "connection" VALUES(45,'arithmetischer Ausdruck (op exp1 exp2)','kann ausgedrückt werden in','Boolesche Algebra');
INSERT INTO "connection" VALUES(45,'if','kann eingebaut werden','cond');
INSERT INTO "connection" VALUES(45,'Baum','hat','interne Knoten (bei k größer 0)');
INSERT INTO "connection" VALUES(45,'rekursive Funktion','kann sein','indirekt rekursiv');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Regeln von de Morgan');
INSERT INTO "connection" VALUES(45,'Paar (SIG,EQ)','Teilgebiet','heterogene Paare');
INSERT INTO "connection" VALUES(45,'arithmetischer Ausdruck (op exp1 exp2)','enthält','gewisse Hilfszeichen');
INSERT INTO "connection" VALUES(45,'arithmetischer Ausdruck (op exp1 exp2)','wird notiert in','verschiedene Notationen');
INSERT INTO "connection" VALUES(45,'Spezifikation','enthält','Syntax');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Gesetz','Gesetz vom Widerspruch');
INSERT INTO "connection" VALUES(45,'define-struct','Beispiel','(define-struct posn (x y))');
INSERT INTO "connection" VALUES(45,'Strukturen','Oberbegriff','define-struct');
INSERT INTO "connection" VALUES(45,'Typen','in Racket','benutzerdefinierte Strukturen');
INSERT INTO "connection" VALUES(45,'Liste','kann sein','leere Liste');
INSERT INTO "connection" VALUES(45,'define-struct','definiert für','Datendefinition für Punkte');
INSERT INTO "connection" VALUES(45,'Signatur','notwendig für','induktive Definition');
INSERT INTO "connection" VALUES(45,'Selektoren','Baustein','konstantes Datenbündel');
INSERT INTO "connection" VALUES(45,'Datentyp','Teilgebiet','Typen');
INSERT INTO "connection" VALUES(45,'list','in Racket','Liste');
INSERT INTO "connection" VALUES(45,'Boolesche Algebra','Teilgebiet','Boolesche Abbildung');
INSERT INTO "connection" VALUES(45,'Liste','kann sein','list-of-symbols');
INSERT INTO "connection" VALUES(45,'kartesisches Produkt','kann sein','homogen');
INSERT INTO "connection" VALUES(45,'Infix','ist Variation von','verschiedene Notationen');
INSERT INTO "connection" VALUES(45,'cons','ist eine','special form');
INSERT INTO "connection" VALUES(45,'arithmetischer Ausdruck (op exp1 exp2)','kann geschrieben werden als','Baum');
INSERT INTO "connection" VALUES(45,'induktive Definition','enthält','disjunkte Vereinigung');
INSERT INTO "connection" VALUES(45,'rekursiver Aufruf','innerhalb möglich','Liste');
INSERT INTO "connection" VALUES(45,'Postfix','ist Variation von','verschiedene Notationen');
INSERT INTO "connection" VALUES(45,'benutzerdefinierte Strukturen','gehören zu','Strukturen');
INSERT INTO "connection" VALUES(46,'iterativer Prozess','ist','endrekursiv');
INSERT INTO "connection" VALUES(46,'Aussage','kann sein','atomar');
INSERT INTO "connection" VALUES(46,'list','ist eine sf und erstellt eine Liste mit n Komponenten','special form');
INSERT INTO "connection" VALUES(46,'if','hat als ersten Paramter ein','Prädikate');
INSERT INTO "connection" VALUES(46,'lambda','erwartet mindestens einen','Parameter');
INSERT INTO "connection" VALUES(46,'rekursive Definition','ist, falls in jedem Auswertungsschritt mehr als ein Rek.Aufruf','nicht-linear-rekursiv');
INSERT INTO "connection" VALUES(46,'Signatur (Syntax)','gehört zu','Spezifikation');
INSERT INTO "connection" VALUES(46,'true','ist','Wahrheitswert');
INSERT INTO "connection" VALUES(46,'list','sind rekursiv definiert','rekursive Definition');
INSERT INTO "connection" VALUES(46,'cond','sequenzielle Auswertung von n-Prädikaten','Prädikate');
INSERT INTO "connection" VALUES(46,'Funktionen','besitzt einen','Entwurf');
INSERT INTO "connection" VALUES(46,'cons','fügt Element hinzu','list');
INSERT INTO "connection" VALUES(46,'Prädikatsfkt','ist eine','Funktionen');
INSERT INTO "connection" VALUES(46,'Zweck','gehört zu','Entwurf');
INSERT INTO "connection" VALUES(46,'Algebra','besitzt Menge von','Werte');
INSERT INTO "connection" VALUES(46,'Funktionen','besitzen','Definitionsbereich');
INSERT INTO "connection" VALUES(46,'Programm','besteht aus Menge von','Funktionen');
INSERT INTO "connection" VALUES(46,'false','ist','Wahrheitswert');
INSERT INTO "connection" VALUES(46,'Klassen','abhängig von Komplextität (Rekursionen, etc)','Klassen');
INSERT INTO "connection" VALUES(46,'Aussage','kann sein','erfüllt | erfüllbar | allgemeingültig');
INSERT INTO "connection" VALUES(46,'induktive Definition','mittels','Zusammensetzungsregeln');
INSERT INTO "connection" VALUES(46,'Boolesche Algebra','arbeitet auf Menge von','Wahrheitswert');
INSERT INTO "connection" VALUES(46,'Funktionen','besitzen','Wertebereich');
INSERT INTO "connection" VALUES(46,'Algebra','besitzt Menge von','Funktionen');
INSERT INTO "connection" VALUES(46,'define-struct','erstellt','Prädikatsfkt');
INSERT INTO "connection" VALUES(46,'Ausdruck','wertet stets von links nach rechts aus','Ausdruck');
INSERT INTO "connection" VALUES(46,'Selektorfkt','ist eine','Funktionen');
INSERT INTO "connection" VALUES(46,'Signatur','gehört zu','Entwurf');
INSERT INTO "connection" VALUES(46,'cond','n+1tes Prädikat','else');
INSERT INTO "connection" VALUES(46,'cond','ist eine','special form');
INSERT INTO "connection" VALUES(46,'define-struct','erstellt für jede Komponente eine','Selektorfkt');
INSERT INTO "connection" VALUES(46,'cond','n+1 mögliche auswertbare Ausdrücke als Parameter','Ausdruck');
INSERT INTO "connection" VALUES(46,'if','ist eine','special form');
INSERT INTO "connection" VALUES(46,'else','spezielles Prädikat welches immer zu true auswertet','Prädikate');
INSERT INTO "connection" VALUES(46,'Tests','gehört zu','Entwurf');
INSERT INTO "connection" VALUES(46,'rekursive Definition','erzeugt, falls keine aufgeschobenen Operationen (muss immer linear rekursiv sein), konstante Anzahl Zustandsvariablen','iterativer Prozess');
INSERT INTO "connection" VALUES(46,'define-struct','ist eine','special form');
INSERT INTO "connection" VALUES(46,'cons','ist eine','special form');
INSERT INTO "connection" VALUES(46,'Definition mit Selbstbezug','möglich','induktive Definition');
INSERT INTO "connection" VALUES(46,'lambda','erstellt eine namenlose','Funktionen');
INSERT INTO "connection" VALUES(46,'atomar','besitzt keine','Junktoren');
INSERT INTO "connection" VALUES(46,'rekursive Definition','ist, falls sie sich schrittweise abstützt','indirekt');
INSERT INTO "connection" VALUES(46,'Prädikate','werden genutzt um Werte aus dem Def. Bereich zu vergleichen','Vergleichsoperator');
INSERT INTO "connection" VALUES(46,'if','besitzt 3','Parameter');
INSERT INTO "connection" VALUES(46,'induktive Definition','mittels','Basisbausteine');
INSERT INTO "connection" VALUES(46,'Tests','nutzt zur Überprüfung','check-expect | check-within');
INSERT INTO "connection" VALUES(46,'define-struct','definiert konstantes Datenbündel','define-struct');
INSERT INTO "connection" VALUES(46,'lambda','ist eine','special form');
INSERT INTO "connection" VALUES(46,'Prädikate','bilden ab in Menge von','Wahrheitswert');
INSERT INTO "connection" VALUES(46,'define-struct','erstellt','Konstruktorfkt');
INSERT INTO "connection" VALUES(46,'Konstruktorfkt','ist eine','Funktionen');
INSERT INTO "connection" VALUES(46,'Aussage','besitzt','Wahrheitswert');
INSERT INTO "connection" VALUES(46,'define','ist eine','special form');
INSERT INTO "connection" VALUES(46,'Spezifikation','spezifiziert','abstrakter Datentyp (ADT)');
INSERT INTO "connection" VALUES(46,'Definition mit Selbstbezug','möglich','rekursive Definition');
INSERT INTO "connection" VALUES(46,'Beispiele','gehört zu','Entwurf');
INSERT INTO "connection" VALUES(46,'check-expect | check-within','ist eine','special form');
INSERT INTO "connection" VALUES(46,'rekursive Definition','erzeugt, falls Operationen aufgeschoben werden','rekursiver Prozess');
INSERT INTO "connection" VALUES(46,'define-struct','fordert eine','Schablone');
INSERT INTO "connection" VALUES(46,'Funktionen','werden eingeordnet','Klassen');
INSERT INTO "connection" VALUES(46,'Schablone','gehört (ggfs) zu','Entwurf');
INSERT INTO "connection" VALUES(46,'if','besitzt 2 Ausdrücke als Parameter','Ausdruck');
INSERT INTO "connection" VALUES(46,'rekursive Definition','muss ggf einbezogen werden','Schablone');
INSERT INTO "connection" VALUES(46,'EQ (Menge von Gleichungen/Semantik)','gehört zu','Spezifikation');
INSERT INTO "connection" VALUES(46,'list','ist ein','abstrakter Datentyp (ADT)');
INSERT INTO "connection" VALUES(46,'rekursive Definition','ist, falls in jedem Auswertungsschritt nur ein weitere Rek.Aufruf','linear rekursiv');
INSERT INTO "connection" VALUES(46,'Boolesche Algebra','ist','Algebra');
INSERT INTO "connection" VALUES(46,'rekursive Definition','enthält mindestens 2 (mind. eine mit und eine ohne Selbstbezug)','Fälle');
INSERT INTO "connection" VALUES(46,'rekursive Definition','ist, falls unmittelbarer Bezug','direkt');
INSERT INTO "connection" VALUES(46,'Aussage','kann enthalten','Variablen');
INSERT INTO "connection" VALUES(46,'Aussage','verknüpfbar durch','Junktoren');
INSERT INTO "connection" VALUES(46,'Prädikate','sind','Boolesche Abbildungen');
INSERT INTO "connection" VALUES(46,'define','weist intern Namen zu','lambda');
INSERT INTO "connection" VALUES(46,'Funktionsrumpf','gehört zu','Entwurf');
INSERT INTO "connection" VALUES(47,'BedingteAusdruecke','beinhaltet','special forms');
INSERT INTO "connection" VALUES(47,'BedingteAusdruecke','beinhaltet','Verknüpfung von Aussagen');
INSERT INTO "connection" VALUES(47,'Strukturen','sind','special forms');
INSERT INTO "connection" VALUES(47,'Funktion in Racket','verwendet','Prävixnotation');
INSERT INTO "connection" VALUES(47,'Fallunterscheidungen','werden genutzt mit','special forms');
INSERT INTO "connection" VALUES(47,'Rekursion','Werkzeug zum Arbeiten mit','Liste');
INSERT INTO "connection" VALUES(47,'ADTListen','beinhaltet','Paar');
INSERT INTO "connection" VALUES(47,'AusdrueckeundFunktionen','beinhaltet','Funktion in Racket');
INSERT INTO "connection" VALUES(47,'Funktion in Racket','hat gleiche Regeln wie','Syntax von Ausdrücken in Racket');
INSERT INTO "connection" VALUES(47,'Liste','besteht aus','homogene Objekte');
INSERT INTO "connection" VALUES(47,'homogene Objekte','sind','Objekte');
INSERT INTO "connection" VALUES(47,'ADTListen','beinhaltet','Liste');
INSERT INTO "connection" VALUES(47,'BedingteAusdruecke','beinhaltet','Fallunterscheidungen');
INSERT INTO "connection" VALUES(47,'ZusammengesetzteDaten','beinhaltet','special forms');
INSERT INTO "connection" VALUES(47,'AusdrueckeundFunktionen','Grundlage für','BedingteAusdruecke');
INSERT INTO "connection" VALUES(47,'Paar','ist ein','Datentyp');
INSERT INTO "connection" VALUES(47,'AusdrueckeundFunktionen','beinhatlet','Prävixnotation');
INSERT INTO "connection" VALUES(47,'AusdrueckeundFunktionen','beinhatlet','Baum');
INSERT INTO "connection" VALUES(47,'Baum','(verwendet) in Racket','Prävixnotation');
INSERT INTO "connection" VALUES(47,'AusdrueckeundFunktionen','beinhaltet','Ausdrücke');
INSERT INTO "connection" VALUES(47,'Verknüpfung von Aussagen','verwendet','Prävixnotation');
INSERT INTO "connection" VALUES(47,'Syntax von Ausdrücken in Racket','verwendet','Prävixnotation');
INSERT INTO "connection" VALUES(47,'AusdrueckeundFunktionen','beinhaltet','Syntax von Ausdrücken in Racket');
INSERT INTO "connection" VALUES(47,'ADTListen','beinhaltet','Datentyp');
INSERT INTO "connection" VALUES(47,'Fallunterscheidungen','ist eine bestimmte','Funktion in Racket');
INSERT INTO "connection" VALUES(47,'Liste','ist ein','Datentyp');
INSERT INTO "connection" VALUES(48,'Digitalprojektor','projeziert Bild','Leinwand');
INSERT INTO "connection" VALUES(48,'Besucher','hört','Dolby-Digital Anlage');
INSERT INTO "connection" VALUES(48,'Digitalprojektor','sendet Audiospur','Dolby-Digital Anlage');
INSERT INTO "connection" VALUES(48,'Kino','ist ein','Aufführungsbetrieb');
INSERT INTO "connection" VALUES(48,'Digitalprojektor','benötigt','Strom');
INSERT INTO "connection" VALUES(48,'Digitalprojektor','verarbeitet','Filmmedium');
INSERT INTO "connection" VALUES(48,'Kino','hat','Kinosaal');
INSERT INTO "connection" VALUES(48,'Besucher','zahlt Eintritt','Kino');
INSERT INTO "connection" VALUES(48,'Kinosaal','hat','Digitalprojektor');
INSERT INTO "connection" VALUES(48,'Besucher','sieht','Leinwand');
INSERT INTO "connection" VALUES(49,'Kommentare','erklären und verdeutlichen','Programm');
INSERT INTO "connection" VALUES(49,'Fallunterscheidung','besitzt immer','else');
INSERT INTO "connection" VALUES(49,'Adressat','nimmt wahr','syntaktisch');
INSERT INTO "connection" VALUES(49,'Schablone','sind','Kommentare');
INSERT INTO "connection" VALUES(49,'Operationen','werden angewendet auf','Werten');
INSERT INTO "connection" VALUES(49,'f','wendet defnition an auf','f');
INSERT INTO "connection" VALUES(49,'Sprachen','besteht aus','semantisch');
INSERT INTO "connection" VALUES(49,'define-struct','hat','Ergebnis');
INSERT INTO "connection" VALUES(49,'define-struct','hat','Variable');
INSERT INTO "connection" VALUES(49,'Signatur','sind','Kommentare');
INSERT INTO "connection" VALUES(49,'ADT','ist Teil von','Funktionale Programmierung (in Dr. Racket)');
INSERT INTO "connection" VALUES(49,'List','besteht möglicherweise aus','definierte Liste');
INSERT INTO "connection" VALUES(49,'ADT','besteht aus','Werten');
INSERT INTO "connection" VALUES(49,'Programm','ist möglicherweise','Funktion');
INSERT INTO "connection" VALUES(49,'Ergebnis','gebunden an','Variable');
INSERT INTO "connection" VALUES(49,'Fallunterscheidung','besitzt immer','cond');
INSERT INTO "connection" VALUES(49,'Funktionale Programmierung (in Dr. Racket)','erstellt','Programm');
INSERT INTO "connection" VALUES(49,'f','definition der','Rekursion');
INSERT INTO "connection" VALUES(49,'Sprachen','sind Teil der','Funktionale Programmierung (in Dr. Racket)');
INSERT INTO "connection" VALUES(49,'Funktion','erhält','Funktionsname');
INSERT INTO "connection" VALUES(49,'Funktion','besitzt','typen');
INSERT INTO "connection" VALUES(49,'Programm','ist möglicherweise','special form');
INSERT INTO "connection" VALUES(49,'Sprachen','besteht aus','pragmatisch');
INSERT INTO "connection" VALUES(49,'Beispiele','sind','Kommentare');
INSERT INTO "connection" VALUES(49,'define-struct','ist','special form');
INSERT INTO "connection" VALUES(49,'Fallunterscheidung','ist','special form');
INSERT INTO "connection" VALUES(49,'List','besteht immer aus','leere Liste');
INSERT INTO "connection" VALUES(49,'Adressat','deutet','pragmatisch');
INSERT INTO "connection" VALUES(49,'Rekursion','ist Teil der','Funktionale Programmierung (in Dr. Racket)');
INSERT INTO "connection" VALUES(49,'Fallunterscheidung','möglicherweise','and');
INSERT INTO "connection" VALUES(49,'ADT','besteht aus','Operationen');
INSERT INTO "connection" VALUES(49,'Sprachen','besteht aus','syntaktisch');
INSERT INTO "connection" VALUES(49,'Adressat','versteht','semantisch');
INSERT INTO "connection" VALUES(49,'rekursiver Prozess','ist Teil','Rekursion');
INSERT INTO "connection" VALUES(49,'List','ist Teil von','ADT');
INSERT INTO "connection" VALUES(49,'iterativer Prozess','ist Teil','Rekursion');
INSERT INTO "connection" VALUES(49,'iterativer Prozess','ist möglicherweise','endrekursiv');
INSERT INTO "connection" VALUES(50,'Hilfsfunktion','benutzt','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(50,'Hilfsfunktion','benutzt','Rekursion');
INSERT INTO "connection" VALUES(50,'Hilfsfunktion','benutzt','ADT');
INSERT INTO "connection" VALUES(50,'Programm','besteht aus','Funktion');
INSERT INTO "connection" VALUES(50,'Hilfsfunktion','benutzt','Listen');
INSERT INTO "connection" VALUES(50,'Hilfsfunktion','benutzt','Boolesche Algebra');
INSERT INTO "connection" VALUES(50,'Boolesche Algebra','benutzt','Fallunterscheidung');
INSERT INTO "connection" VALUES(50,'Hilfsfunktion','benutzt','Variablen');
INSERT INTO "connection" VALUES(50,'Funktion','verwendet','Hilfsfunktion');
INSERT INTO "connection" VALUES(51,'Boolean','kann sein','true');
INSERT INTO "connection" VALUES(51,'Hilfsfunktion','von Vorteil','funktionale Programmiersprache');
INSERT INTO "connection" VALUES(51,'Liste','ist eine','definierte Struktur');
INSERT INTO "connection" VALUES(51,'Datentyp','kann sein','Boolean');
INSERT INTO "connection" VALUES(51,'Datentyp','kann sein','Interpretation von Numeralen');
INSERT INTO "connection" VALUES(51,'Arithmetischer Ausdruck','besteht aus','funktionale Programmiersprache');
INSERT INTO "connection" VALUES(51,'Rekursion','Bestandteil','funktionale Programmiersprache');
INSERT INTO "connection" VALUES(51,'Boolean','kann sein','false');
INSERT INTO "connection" VALUES(51,'make-posn','ist eine','definierte Struktur');
INSERT INTO "connection" VALUES(51,'Parameter','Bestandteil','funktionale Programmiersprache');
INSERT INTO "connection" VALUES(51,'Ausdruck','Spezifikation','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(51,'Wurzel','verwandt','Knoten');
INSERT INTO "connection" VALUES(51,'Wurzel','verwandt','Blatt');
INSERT INTO "connection" VALUES(51,'cons','in','Racket');
INSERT INTO "connection" VALUES(51,'Blatt','besteht aus','Binärbaum');
INSERT INTO "connection" VALUES(51,'cons','definiert eine','Liste');
INSERT INTO "connection" VALUES(51,'funktionale Programmiersprache','wird erstellt','Programm');
INSERT INTO "connection" VALUES(51,'Datentyp','kann sein','definierte Struktur');
INSERT INTO "connection" VALUES(51,'Cond','ist ein','Ausdruck');
INSERT INTO "connection" VALUES(51,'Arithmetischer Ausdruck','beruht auf','Interpretation von Numeralen');
INSERT INTO "connection" VALUES(51,'Binärbaum','besteht aus','Knoten');
INSERT INTO "connection" VALUES(51,'Knoten','verwandt','Wurzel');
INSERT INTO "connection" VALUES(51,'Funktionsrumpf','machen ein gutes Programm aus','Programm');
INSERT INTO "connection" VALUES(51,'Hilfsfunktion','machen ein gutes Programm aus','Programm');
INSERT INTO "connection" VALUES(51,'Wurzel','besteht aus','Binärbaum');
INSERT INTO "connection" VALUES(51,'Prozess','kann sein','Rekursion');
INSERT INTO "connection" VALUES(51,'Arithmetischer Ausdruck','beruht auf','Operator');
INSERT INTO "connection" VALUES(51,'Boolean','überprüft einen','Ausdruck');
INSERT INTO "connection" VALUES(51,'Blatt','verwandt','Wurzel');
INSERT INTO "connection" VALUES(51,'cons','ist eine','definierte Struktur');
INSERT INTO "connection" VALUES(51,'Binärbaum','kann sein','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(51,'Tests','machen ein gutes Programm aus','Programm');
INSERT INTO "connection" VALUES(51,'Beispiele','machen ein gutes Programm aus','Programm');
INSERT INTO "connection" VALUES(51,'define-struct','erstellt eine','definierte Struktur');
INSERT INTO "connection" VALUES(51,'definierte Struktur','in','Racket');
INSERT INTO "connection" VALUES(51,'cons','ist ein','Ausdruck');
INSERT INTO "connection" VALUES(51,'Beispiele','wichtig','funktionale Programmiersprache');
INSERT INTO "connection" VALUES(51,'Racket','ist eine','funktionale Programmiersprache');
INSERT INTO "connection" VALUES(52,'Rekursion','benötingt','Rekursionsanker');
INSERT INTO "connection" VALUES(52,'Binärlogik','oft wichtige Bedingung für Auswertung','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Definition','bestimmt','Strukturen');
INSERT INTO "connection" VALUES(52,'Funktionale Programmierung','benutzt','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Bedingungen','bestimmt Auswertung','Funktion(en)');
INSERT INTO "connection" VALUES(52,'linear','Art von','Rekursion');
INSERT INTO "connection" VALUES(52,'Funktion(en)','Eingabe- und Ausgabewerte','Datentyp');
INSERT INTO "connection" VALUES(52,'Rekursion','oft genutzt für Bearbeitung','Liste');
INSERT INTO "connection" VALUES(52,'Lambda-Ausdruck','namenlose','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Bedingungen','nutzt als Kriterium','Binärlogik');
INSERT INTO "connection" VALUES(52,'Schlüsselwort','leitet Definition ein','Definition');
INSERT INTO "connection" VALUES(52,'Rekursion','ruft auf','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Schlüsselwort','leitet Definition ein','Strukturen');
INSERT INTO "connection" VALUES(52,'Baum','Darstellungsform','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Zugriff','Erstes und Restelemente','Liste');
INSERT INTO "connection" VALUES(52,'iterativ','Art von','Rekursion');
INSERT INTO "connection" VALUES(52,'Definition','Beschreibt','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Signatur','ordnet Datentyp zu','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Schablone','Muster für','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Funktion(en)','benutzt','Zugriff');
INSERT INTO "connection" VALUES(52,'Zugriff','auf einzelne Elemente','Strukturen');
INSERT INTO "connection" VALUES(52,'Typprüfung','sichert ab','Funktion(en)');
INSERT INTO "connection" VALUES(52,'Typprüfung','kontrolliert Art der Daten','Strukturen');
INSERT INTO "connection" VALUES(52,'Rekursion','kann benutzt werden zur Definition','Datentyp');
INSERT INTO "connection" VALUES(52,'Liste','Ist eine','Strukturen');
INSERT INTO "connection" VALUES(52,'Schablone','Muster für','Zugriff');
INSERT INTO "connection" VALUES(52,'Funktion(en)','benutzt für komplexere Daten','Strukturen');
INSERT INTO "connection" VALUES(53,'Bedingte Ausdruecke und Funktionen','Einfuehrung in die Programmierung','Racket');
INSERT INTO "connection" VALUES(53,'Informatik I','Einfuehrung','Ausdruecke und Funktionen');
INSERT INTO "connection" VALUES(53,'Racket','Funktionsdefinitionen','Rekursion');
INSERT INTO "connection" VALUES(53,'Racket','Syntax und Semantik','Abstrakte Datentypen und Listen');
INSERT INTO "connection" VALUES(53,'Racket','Funktionsdefinitionen','Lambda');
INSERT INTO "connection" VALUES(53,'Racket','Strukturen','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(54,'Binärbäume','als','Funktion');
INSERT INTO "connection" VALUES(54,'Rekursive Definition','Selbstbezug','Funktion');
INSERT INTO "connection" VALUES(54,'Funktion','unterteilt durch','Fallunterscheidungen');
INSERT INTO "connection" VALUES(54,'Rekursive Definition','für','Datentypen');
INSERT INTO "connection" VALUES(54,'Hilfsfunktionen','zur strukturierung','Funktion');
INSERT INTO "connection" VALUES(54,'abstrakte','Form von','Datentypen');
INSERT INTO "connection" VALUES(54,'Funktion','verwendet verschiedene','Datentypen');
INSERT INTO "connection" VALUES(54,'Funktion','verwendet','Variablen');
INSERT INTO "connection" VALUES(54,'Knoten','teil von','Binärbäume');
INSERT INTO "connection" VALUES(54,'strukturierte Daten','organisiert in','Listen');
INSERT INTO "connection" VALUES(54,'Fallunterscheidungen','verdeutlicht durch','Schablone');
INSERT INTO "connection" VALUES(54,'Wurzeln','teil von','Binärbäume');
INSERT INTO "connection" VALUES(54,'Listen','als','Parameter und Rückgabewerte');
INSERT INTO "connection" VALUES(54,'Listen','Datentyp','Funktion');
INSERT INTO "connection" VALUES(55,'Fallunterscheidungen','bei zwei Fällen','''if''-Funktionen');
INSERT INTO "connection" VALUES(55,'''and''','wird z.B. verwendet in','''cond''-Funktionen');
INSERT INTO "connection" VALUES(55,'Funktionale Programmierung','folgt meist','allgm. Ablaufschema');
INSERT INTO "connection" VALUES(55,'Operationen auf lineare Listen','gehört zu','Elementare Bestandteile');
INSERT INTO "connection" VALUES(55,'Syntax','gibt immer Schreibweise vor','special form');
INSERT INTO "connection" VALUES(55,'Eingabe','wird für Start verwendet','Parameter');
INSERT INTO "connection" VALUES(55,'''and''','grenzt ein','Wertebereich');
INSERT INTO "connection" VALUES(55,'Booleanische Aussage','werden verknüpft durch logische','Operator');
INSERT INTO "connection" VALUES(55,'Algorithmus','liefert','Ausgabe');
INSERT INTO "connection" VALUES(55,'Tests','haben eigene','special form');
INSERT INTO "connection" VALUES(55,'rekursive Aufrufe','können angewandt werden auf','Listen');
INSERT INTO "connection" VALUES(55,'Listen','sind','special form');
INSERT INTO "connection" VALUES(55,'''and''','ist','Operator');
INSERT INTO "connection" VALUES(55,'Numeral(e)','folgt beliebig oft','Präfix-Notation');
INSERT INTO "connection" VALUES(55,'Syntax','diktiert Aufbau des','Programm');
INSERT INTO "connection" VALUES(55,'Operationen auf lineare Listen','werden ausgeführt durch','special form');
INSERT INTO "connection" VALUES(55,'Funktionen','können andere aufrufen','Funktionen');
INSERT INTO "connection" VALUES(55,'Funktionale Programmierung','ist','Zustandslos');
INSERT INTO "connection" VALUES(55,'''cons''','ist','special form');
INSERT INTO "connection" VALUES(55,'Subtraktion','gehört zu','Elementare Bestandteile');
INSERT INTO "connection" VALUES(55,'Datentyp','haben eingegrenzten','Wertebereich');
INSERT INTO "connection" VALUES(55,'Programm','besteht aus','Funktionen');
INSERT INTO "connection" VALUES(55,'arithmetischer Ausdruck','besteht aus','Operator');
INSERT INTO "connection" VALUES(55,'Rechenvorschriften','definieren','Funktionen');
INSERT INTO "connection" VALUES(55,'Fallunterscheidungen','beeinflussen Funktionen','Funktionen');
INSERT INTO "connection" VALUES(55,'Eingabe','setzt in Gang','Algorithmus');
INSERT INTO "connection" VALUES(55,'Funktionen','bilden','Algorithmus');
INSERT INTO "connection" VALUES(55,'Typisierung','grenzt ein','Wertetypen');
INSERT INTO "connection" VALUES(55,'Typisierung','ist','Optional');
INSERT INTO "connection" VALUES(55,'Parametisierung eines Ausdrucks','gehört zu','Elementare Bestandteile');
INSERT INTO "connection" VALUES(55,'Funktionen','sind','Ausdrücke');
INSERT INTO "connection" VALUES(55,'Numeral(e)','sind eigene','Wertetypen');
INSERT INTO "connection" VALUES(55,'Strings','sind eigene','Wertetypen');
INSERT INTO "connection" VALUES(55,'rekursive Aufrufe','können angewandt werden auf','Funktionen');
INSERT INTO "connection" VALUES(55,'''cond''-Funktionen','sind','special form');
INSERT INTO "connection" VALUES(55,'Datenstrukturen','sind eigene','Wertetypen');
INSERT INTO "connection" VALUES(55,'''cons''','konstruiert','Listen');
INSERT INTO "connection" VALUES(55,'Programm','folgt','allgm. Ablaufschema');
INSERT INTO "connection" VALUES(55,'Typisierung','grenzt ein','Wertebereich');
INSERT INTO "connection" VALUES(55,'Funktionen','arbeitet mit','Parameter');
INSERT INTO "connection" VALUES(55,'Komposition/Einsetzung','gehört zu','Elementare Bestandteile');
INSERT INTO "connection" VALUES(55,'Operationen auf lineare Listen','werden ausgeführt auf','Listen');
INSERT INTO "connection" VALUES(55,'Variablen','Nicht im Containerprinzip vorhanden','Funktionale Programmierung');
INSERT INTO "connection" VALUES(55,'Funktionsname','sind Teil der','Deklaration');
INSERT INTO "connection" VALUES(55,'Booleanische Aussage','können sein','Ausdrücke');
INSERT INTO "connection" VALUES(55,'Booleanische Aussage','haben eigene','Wertetypen');
INSERT INTO "connection" VALUES(55,'Anwendung','gehört zu','Elementare Bestandteile');
INSERT INTO "connection" VALUES(55,'Datenstrukturen','erzeugen','konstantes Datenbündel');
INSERT INTO "connection" VALUES(55,'arithmetischer Ausdruck','besteht aus','Numeral(e)');
INSERT INTO "connection" VALUES(55,'''if''-Funktionen','sind','special form');
INSERT INTO "connection" VALUES(55,'arithmetischer Ausdruck','besteht aus','Hilfszeichen');
INSERT INTO "connection" VALUES(55,'Hilfszeichen','dient der Worttrennung','Syntax');
INSERT INTO "connection" VALUES(55,'allgm. Ablaufschema','beginnt mit','Eingabe');
INSERT INTO "connection" VALUES(55,'Strings','können eingebaut werden in','Funktionen');
INSERT INTO "connection" VALUES(55,'Datenstrukturen','lassen sich einbauen in','Ausdrücke');
INSERT INTO "connection" VALUES(55,'Rechenvorschriften','bestehen aus','Elementare Bestandteile');
INSERT INTO "connection" VALUES(55,'Datentyp','unterliegen','Semantik');
INSERT INTO "connection" VALUES(55,'Listen','sind','Datenstrukturen');
INSERT INTO "connection" VALUES(55,'Ausdrücke','kann aus mehreren zusammengesetzt sein','Ausdrücke');
INSERT INTO "connection" VALUES(55,'Funktionen','folgen','Syntax');
INSERT INTO "connection" VALUES(55,'Datenstrukturen','sind','special form');
INSERT INTO "connection" VALUES(55,'Tests','überprüfen','Funktionen');
INSERT INTO "connection" VALUES(55,'Ausgabe','ist im Regelfall ein','Parameter');
INSERT INTO "connection" VALUES(55,'Präfix-Notation','gehört zu','Syntax');
INSERT INTO "connection" VALUES(55,'Fallunterscheidungen','bei mehreren Fällen','''cond''-Funktionen');
INSERT INTO "connection" VALUES(55,'Funktionsname','unterscheidet verschiedene','Funktionen');
INSERT INTO "connection" VALUES(55,'Datenstrukturen','sind Tteil der','Deklaration');
INSERT INTO "connection" VALUES(55,'Wertetypen','können vereint werden in','Datentyp');
INSERT INTO "connection" VALUES(55,'Addition','gehört zu','Elementare Bestandteile');
INSERT INTO "connection" VALUES(55,'Funktionen','können definiert werden mit','Variablen');
INSERT INTO "connection" VALUES(55,'Operator','steht an erster Stelle','Präfix-Notation');
INSERT INTO "connection" VALUES(55,'Datenstrukturen','definieren','Datentyp');
INSERT INTO "connection" VALUES(55,'Ausdrücke','können sein','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(56,'boolesche Algebra','werden bezeichnet als','Prädikate');
INSERT INTO "connection" VALUES(56,'Listen','bestehen aus','Racket');
INSERT INTO "connection" VALUES(56,'Racket','benutzt','Funktionen');
INSERT INTO "connection" VALUES(56,'Typen','kennt','Racket');
INSERT INTO "connection" VALUES(56,'Rekursionen','sind','Funktionen');
INSERT INTO "connection" VALUES(56,'boolesche Algebra','folgt','Gesetzen');
INSERT INTO "connection" VALUES(56,'Listen','enthalten','Parametern');
INSERT INTO "connection" VALUES(56,'Prädikate','sind','Funktionen');
INSERT INTO "connection" VALUES(56,'Zahlen','sind','Typen');
INSERT INTO "connection" VALUES(56,'Hilfsfunktionen','vereinfachen','Funktionen');
INSERT INTO "connection" VALUES(56,'Rekursionen','nimmt','Selbstbezug');
INSERT INTO "connection" VALUES(56,'benutzerdefinierte Strukturen','sind','Typen');
INSERT INTO "connection" VALUES(56,'boolesche Algebra','sind','Typen');
INSERT INTO "connection" VALUES(56,'Racket','ist eine','Programmiersprache');
INSERT INTO "connection" VALUES(57,'Programmierung','enthält','imperative Programmierung');
INSERT INTO "connection" VALUES(57,'Programmierung','enthält','funktionale Programmierung');
INSERT INTO "connection" VALUES(57,'Bedingte Ausdrücke','nutzen','cond');
INSERT INTO "connection" VALUES(57,'Bedingte Funktion','Art einer','Funktion');
INSERT INTO "connection" VALUES(57,'Listen','sind','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(57,'Listen','sind','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(57,'Bedingte Funktion','nutzt','Bedingte Ausdrücke');
INSERT INTO "connection" VALUES(57,'Ausdruck','besteht aus','Bedingte Ausdrücke');
INSERT INTO "connection" VALUES(57,'funktionale Programmierung','nutzt','Funktion');
INSERT INTO "connection" VALUES(58,'Knoten','ist eine','Wurzel');
INSERT INTO "connection" VALUES(58,'Racketprogramm','setzt um','Funktionale Programmierung');
INSERT INTO "connection" VALUES(58,'arithmetischer Ausdruck','besteht aus','Numerale');
INSERT INTO "connection" VALUES(58,'lambda-Funktion','als Rückgabewert','Funktionen');
INSERT INTO "connection" VALUES(58,'Datendefinitionen','von','Datentyp');
INSERT INTO "connection" VALUES(58,'Definitionsbereich','werden verbunden durch','Wertebereich');
INSERT INTO "connection" VALUES(58,'Spezifikation','beschreibt','Syntax');
INSERT INTO "connection" VALUES(58,'Blatt','ist ein','Wurzel');
INSERT INTO "connection" VALUES(58,'Traversion','beschreibt Besuch aller','Knoten');
INSERT INTO "connection" VALUES(58,'homogen','besteht aus gleichen Sorten','Datentyp');
INSERT INTO "connection" VALUES(58,'Funktionen','dargestellt als','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(58,'Racketprogramm','Entwurf basiert auf','Datendefinitionen');
INSERT INTO "connection" VALUES(58,'Funktionen','kann definiert werden durch','rekursive Definition');
INSERT INTO "connection" VALUES(58,'rekursive Definition','Auswertungsprozess ist','rekursiv');
INSERT INTO "connection" VALUES(58,'Racketprogramm','kann anwenden','special forms');
INSERT INTO "connection" VALUES(58,'Funktionen','hat einen','Definitionsbereich');
INSERT INTO "connection" VALUES(58,'not','ist eine','logische Verknüfungen');
INSERT INTO "connection" VALUES(58,'arithmetischer Ausdruck','besteht aus','Operatorsymbole');
INSERT INTO "connection" VALUES(58,'Datentyp','beschrieben durch','Spezifikation');
INSERT INTO "connection" VALUES(58,'Baum','besteht aus','Knoten');
INSERT INTO "connection" VALUES(58,'true','ist Wert der','boolsche Algebra');
INSERT INTO "connection" VALUES(58,'Teilbaum','ist ein','Baum');
INSERT INTO "connection" VALUES(58,'Funktionale Programmierung','hat als Modell','lambda-Kalkül');
INSERT INTO "connection" VALUES(58,'Liste','ist ein','Datentyp');
INSERT INTO "connection" VALUES(58,'Blatt','ist ein endständiger','Knoten');
INSERT INTO "connection" VALUES(58,'arithmetischer Ausdruck','dargestellt mit','Infix-Notation');
INSERT INTO "connection" VALUES(58,'or','ist Operator der','boolsche Algebra');
INSERT INTO "connection" VALUES(58,'and','ist Operator der','boolsche Algebra');
INSERT INTO "connection" VALUES(58,'heterogen','besteht aus verschiedenen Sorten','Datentyp');
INSERT INTO "connection" VALUES(58,'Baum','stellt dar','Funktionen');
INSERT INTO "connection" VALUES(58,'direkt rekursiv','stützt auf sich selbst ab','direkt');
INSERT INTO "connection" VALUES(58,'rekursive Definition','Auswertungsprozess ist','iterativ');
INSERT INTO "connection" VALUES(58,'Racketprogramm','kann anwenden','Funktionen');
INSERT INTO "connection" VALUES(58,'rekursive Definition','hat','Selbstbezug');
INSERT INTO "connection" VALUES(58,'if','ist ein','special forms');
INSERT INTO "connection" VALUES(58,'boolsche Algebra','nutzt','logische Verknüfungen');
INSERT INTO "connection" VALUES(58,'Datentyp','verknüpft','Menge von Werten');
INSERT INTO "connection" VALUES(58,'rekursiv','oder','iterativ');
INSERT INTO "connection" VALUES(58,'logische Verknüfungen','sind','Funktionen');
INSERT INTO "connection" VALUES(58,'direkt','oder','schrittweise');
INSERT INTO "connection" VALUES(58,'and','ist eine','logische Verknüfungen');
INSERT INTO "connection" VALUES(58,'not','ist Operator der','boolsche Algebra');
INSERT INTO "connection" VALUES(58,'false','ist Wert der','boolsche Algebra');
INSERT INTO "connection" VALUES(58,'Funktionale Programmierung','besteht aus','Funktionen');
INSERT INTO "connection" VALUES(58,'arithmetischer Ausdruck','dargestellt mit','Postfix-Notation');
INSERT INTO "connection" VALUES(58,'indirekt rekursiv','stützt auf sich selbst ab','schrittweise');
INSERT INTO "connection" VALUES(58,'define struct','ist ein','special forms');
INSERT INTO "connection" VALUES(58,'or','ist eine','logische Verknüfungen');
INSERT INTO "connection" VALUES(58,'arithmetischer Ausdruck','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(58,'Aufruf einer Funktion','stützt sich ab entweder','direkt');
INSERT INTO "connection" VALUES(58,'Spezifikation','beschreibt','Semantik');
INSERT INTO "connection" VALUES(58,'Menge von Werten','mit','Menge von Operationen');
INSERT INTO "connection" VALUES(58,'Signatur','ist Teil der','Spezifikation');
INSERT INTO "connection" VALUES(58,'Funktionen','hat einen','Wertebereich');
INSERT INTO "connection" VALUES(58,'Knoten','werden verbunden über','Kanten');
INSERT INTO "connection" VALUES(58,'cond','ist ein','special forms');
INSERT INTO "connection" VALUES(58,'Funktionale Programmierung','ist ein','Aufruf einer Funktion');
INSERT INTO "connection" VALUES(58,'arithmetischer Ausdruck','kann darstellt werden als','Baum');
INSERT INTO "connection" VALUES(58,'arithmetischer Ausdruck','dargestellt mit','Präfix-Notation');
INSERT INTO "connection" VALUES(58,'lambda-Kalkül','umgesetzt in Racket durch','lambda-Funktion');
INSERT INTO "connection" VALUES(58,'Selbstbezug','mit nur einem Aufruf','linear-rekursiv');
INSERT INTO "connection" VALUES(58,'Selbstbezug','entweder','direkt rekursiv');
INSERT INTO "connection" VALUES(58,'Signatur','beschreibt','Syntax');
INSERT INTO "connection" VALUES(58,'direkt rekursiv','oder','indirekt rekursiv');
INSERT INTO "connection" VALUES(58,'define','ist ein','special forms');
INSERT INTO "connection" VALUES(59,'Benutzer','entdeckt','Problem(e)');
INSERT INTO "connection" VALUES(59,'Programiersprache','ist verständlich für','Maschine');
INSERT INTO "connection" VALUES(59,'Formales Modell','muss verstanden werden von','Maschine');
INSERT INTO "connection" VALUES(59,'Informatiker','entwickelt basierend auf Problem','Formales Modell');
INSERT INTO "connection" VALUES(59,'Formales Modell','ist in meisten Fällen','Programm');
INSERT INTO "connection" VALUES(59,'Programm','basiert auf','Programiersprache');
INSERT INTO "connection" VALUES(59,'Informatiker','Interpretiert','Problem(e)');
INSERT INTO "connection" VALUES(59,'Programm','beschreibt','Semantik');
INSERT INTO "connection" VALUES(59,'Benutzer','erwartet Lösung','Informatiker');
INSERT INTO "connection" VALUES(59,'Benutzer','muss zur Lösung anwenden können','Maschine');
INSERT INTO "connection" VALUES(59,'Problem(e)','basiert auf','Realität');
INSERT INTO "connection" VALUES(59,'Informatiker','Analyse / Abstraktion / Darstellung','Realität');
INSERT INTO "connection" VALUES(59,'Programm','beschreibt','Funktionalität');
INSERT INTO "connection" VALUES(60,'Boolesche Algebra','veranschaulicht','Special forms');
INSERT INTO "connection" VALUES(60,'Special forms','sind','cond Ausdrücke');
INSERT INTO "connection" VALUES(60,'"Informatik 1"','beinhaltet','Definition');
INSERT INTO "connection" VALUES(60,'Beispiele','erstellen von','Funktionsrumpf');
INSERT INTO "connection" VALUES(60,'Racket','benutzt für','Erstellung von Programmen');
INSERT INTO "connection" VALUES(60,'Funktionsrumpf','überprüfen von','Funktionsweise');
INSERT INTO "connection" VALUES(60,'Menge von Werten','definiert auf','diesen Werten');
INSERT INTO "connection" VALUES(60,'Datentyp','ist eine','Menge von Werten');
INSERT INTO "connection" VALUES(60,'funktionaler Baukasten','beinhaltet','funktionale Programmierung');
INSERT INTO "connection" VALUES(60,'Datentyp','ist eine','Menge von Operationen');
INSERT INTO "connection" VALUES(60,'define-struct','für','zusammengesetzte Daten');
INSERT INTO "connection" VALUES(60,'Racket','gehört zu','Lisp-Sprachfamilie');
INSERT INTO "connection" VALUES(60,'Racket','integriert in','funktionaler Baukasten');
INSERT INTO "connection" VALUES(60,'Definition','von','Datentyp');
INSERT INTO "connection" VALUES(60,'Erstellung von Programmen','hat','Schritte');
INSERT INTO "connection" VALUES(60,'Special forms','haben','Auswertungsreihenfolge');
INSERT INTO "connection" VALUES(60,'Erstellung von Programmen','beinhaltet','Entwurf von Funktionen');
INSERT INTO "connection" VALUES(60,'Special forms','sind','define-struct');
INSERT INTO "connection" VALUES(60,'funktionale Programmiersprache','gehört zu','funktionale Programmierung');
INSERT INTO "connection" VALUES(60,'Racket','ist eine','multiparadigmatische Programmiersprache');
INSERT INTO "connection" VALUES(60,'funktionale Programmierung','gehört zu','"Informatik 1"');
INSERT INTO "connection" VALUES(60,'funktionaler Baukasten','beinhaltet','funktionale Programmiersprache');
INSERT INTO "connection" VALUES(60,'Entwurf von Funktionen','werden verwendet','Hilfsfunktionen');
INSERT INTO "connection" VALUES(60,'Schritte','angeben von','Signatur, Zweck und Funktionskopf');
INSERT INTO "connection" VALUES(60,'Signatur, Zweck und Funktionskopf','erstellen von','Beispiele');
INSERT INTO "connection" VALUES(60,'Racket','ist eine','funktionale Programmiersprache');
INSERT INTO "connection" VALUES(60,'Racket','besitzt','Special forms');
INSERT INTO "connection" VALUES(60,'Menge von Operationen','definiert auf','diesen Werten');
INSERT INTO "connection" VALUES(61,'Algorithmus','ist kein','Funktion');
INSERT INTO "connection" VALUES(61,'Algorithmus','kann realisiert werden in','Programmiersprache');
INSERT INTO "connection" VALUES(61,'Programmiersprache','kann sein','funktional');
INSERT INTO "connection" VALUES(61,'Programmiersprache','kann sein','imperativ');
INSERT INTO "connection" VALUES(61,'Information','enthält','Semantischer Bestandteil');
INSERT INTO "connection" VALUES(61,'elementarer Datentyp','Grundbaustein für','Datentyp');
INSERT INTO "connection" VALUES(61,'Datentyp','kann bestehen aus (mehreren)','Datentyp');
INSERT INTO "connection" VALUES(61,'Java','ist getypt','Java');
INSERT INTO "connection" VALUES(61,'arithmetischer Ausdruck','benötig ein','Alphabet');
INSERT INTO "connection" VALUES(61,'Racket','kennte keine','Variabeln');
INSERT INTO "connection" VALUES(61,'Racket','kann umgehen mit','konstante Datenbündel');
INSERT INTO "connection" VALUES(61,'Funktion','ist kein','Algorithmus');
INSERT INTO "connection" VALUES(61,'Java','ist','imperativ');
INSERT INTO "connection" VALUES(61,'Racket','ist eine','Programmiersprache');
INSERT INTO "connection" VALUES(61,'Abbildung (Interpretationsvorschrift)','verknüpft mit Repräsentation','Information');
INSERT INTO "connection" VALUES(61,'Java','kann umgehen mit','Variabeln');
INSERT INTO "connection" VALUES(61,'Funktion','beschreibt, WAS berechnet wird','Funktion');
INSERT INTO "connection" VALUES(61,'Problem','ist eine','Fragestellung (hinreichend genug beschrieben)');
INSERT INTO "connection" VALUES(61,'Racket','ist nicht in allen Dialekten explizit getypt','Racket');
INSERT INTO "connection" VALUES(61,'Abbildung (Interpretationsvorschrift)','verknüpft mit Information','Repräsentation');
INSERT INTO "connection" VALUES(61,'Java','ist eine','Programmiersprache');
INSERT INTO "connection" VALUES(61,'Algorithmus','beschreibt, WIE etwas berechnet wird','Algorithmus');
INSERT INTO "connection" VALUES(61,'Informationssystem','beinhaltet Menge von (konkreten)','Repräsentation');
INSERT INTO "connection" VALUES(61,'Problemklasse','gruppiert','Problem');
INSERT INTO "connection" VALUES(61,'Algorithmus','ist ein Verfahren zur Lösung eines','Problem');
INSERT INTO "connection" VALUES(61,'Racket','ist','funktional');
INSERT INTO "connection" VALUES(61,'Programmiersprache','kann sein','prädikativ');
INSERT INTO "connection" VALUES(61,'Funktion','hat eine','Signatur');
INSERT INTO "connection" VALUES(61,'Information','enthält','Syntaktischer Bestandteil');
INSERT INTO "connection" VALUES(61,'Informationssystem','beinhaltet Menge von (konkreten)','Information');
INSERT INTO "connection" VALUES(61,'Programm','muss getestet werden','Programm');
INSERT INTO "connection" VALUES(61,'Problem','wird zerlegt in (Modularisierung)','Teilprobleme');
INSERT INTO "connection" VALUES(61,'Repräsentation','stellt dar','Information');
INSERT INTO "connection" VALUES(61,'Boolescher Wert','ist','Datentyp');
INSERT INTO "connection" VALUES(61,'Information','enthält','Pragmatischer Anteil');
INSERT INTO "connection" VALUES(61,'Datenstruktur','ist eine mögliche konkrete Realisierung eines','ADT');
INSERT INTO "connection" VALUES(62,'Funktionale Programmiersprache','verwendet','funktionalen Baukasten');
INSERT INTO "connection" VALUES(62,'Dr. Racket','verwendet','Racket');
INSERT INTO "connection" VALUES(62,'Menge von Operationen','sind definiert auf','Menge von Werten');
INSERT INTO "connection" VALUES(62,'int','ist ein','Elementare Datentypen');
INSERT INTO "connection" VALUES(62,'String','ist ein','Elementare Datentypen');
INSERT INTO "connection" VALUES(62,'Datentypen','bestehen aus','Menge von Werten');
INSERT INTO "connection" VALUES(62,'Arithmetischer Ausdruck','bezieht sich auf','Alphabet');
INSERT INTO "connection" VALUES(62,'Alphabet','nutzt','Hilfszeichen');
INSERT INTO "connection" VALUES(62,'Dr. Racket','ist ein','Programm');
INSERT INTO "connection" VALUES(62,'Alphabet','nutzt','Operatorsymbole');
INSERT INTO "connection" VALUES(62,'Arithmetischer Ausdruck','sind','Funktionen');
INSERT INTO "connection" VALUES(62,'Funktionen','kann sich selbst aufrufen durch','Rekursion');
INSERT INTO "connection" VALUES(62,'Programm','Menge durch Rechenvorschriften definierter','Funktionen');
INSERT INTO "connection" VALUES(62,'Racket','ist eine','Funktionale Programmiersprache');
INSERT INTO "connection" VALUES(62,'Boolean','ist ein','Elementare Datentypen');
INSERT INTO "connection" VALUES(62,'Datentypen','bestehen aus','Menge von Operationen');
INSERT INTO "connection" VALUES(62,'Dr. Racket','arbeitet mit','Funktionen');
INSERT INTO "connection" VALUES(62,'Datentypen','können aufgebrochen werden in','Elementare Datentypen');
INSERT INTO "connection" VALUES(62,'Funktionen','bestehen aus','Eingabeparameter');
INSERT INTO "connection" VALUES(62,'Funktionen','bestehen aus','Berechnungsvorschrift');
INSERT INTO "connection" VALUES(62,'Alphabet','nutzt','Ziffern');
INSERT INTO "connection" VALUES(62,'Funktionen','bestehen aus','Funktionsname');
INSERT INTO "connection" VALUES(62,'Funktionen','kann sich selbst aufrufen durch','Iteration');
INSERT INTO "connection" VALUES(62,'Informatik 1 Vorlesung','arbeitet mit','Dr. Racket');
INSERT INTO "connection" VALUES(62,'Funktionen','verwenden','Datentypen');
INSERT INTO "connection" VALUES(63,'Programme','beinhalten','Beispiele');
INSERT INTO "connection" VALUES(63,'Speicherbedarf','abhängig von Anzahl der','Zustandsvariablen');
INSERT INTO "connection" VALUES(63,'rekursive(n/r) Prozess','schiebt ... bis zum Ende auf','Oprerationen');
INSERT INTO "connection" VALUES(63,'Auswertung','ist manchmal','nicht-linear rekursiv');
INSERT INTO "connection" VALUES(63,'rekursive(n/r) Prozess','besitzt linaer wachsenden','Speicherbedarf');
INSERT INTO "connection" VALUES(63,'Boolesche Algebra','beinhaltet','Gesetz');
INSERT INTO "connection" VALUES(63,'Signatur','beinhaltet Art von','Ausgabe');
INSERT INTO "connection" VALUES(63,'Programme','verwenden andere','Programme');
INSERT INTO "connection" VALUES(63,'Funktionale Programmiersprache','bildet','Programme');
INSERT INTO "connection" VALUES(63,'Programme','beinhalten','Signatur');
INSERT INTO "connection" VALUES(63,'abstrakter Datentyp','beinhaltet','Wert(e)');
INSERT INTO "connection" VALUES(63,'Programme','beinhalten manchmal','Schablonen');
INSERT INTO "connection" VALUES(63,'Infix-Notation','ist eine Art von','Notation');
INSERT INTO "connection" VALUES(63,'Schablonen','geben einen','Überblick');
INSERT INTO "connection" VALUES(63,'Signatur','beschreibt','Funktion');
INSERT INTO "connection" VALUES(63,'Schablonen','basieren auf','Datenanalyse und -definition');
INSERT INTO "connection" VALUES(63,'Programme','beinhalten','Tests');
INSERT INTO "connection" VALUES(63,'iterative(n/r) Prozess','beschrieben durch konstante Anzahl von','Zustandsvariablen');
INSERT INTO "connection" VALUES(63,'Hilfsfunktionen','zur','Modulariesierung');
INSERT INTO "connection" VALUES(63,'foldr','wird angewendet auf','Liste');
INSERT INTO "connection" VALUES(63,'Datentyp','ist eine','Menge');
INSERT INTO "connection" VALUES(63,'Prädikat(e)','sind','Boolesche Abbildungen');
INSERT INTO "connection" VALUES(63,'Postfix-Notation','ist eine Art von','Notation');
INSERT INTO "connection" VALUES(63,'boolean?','überprüft','Wert(e)');
INSERT INTO "connection" VALUES(63,'Programme','beinhalten einen','Zweck');
INSERT INTO "connection" VALUES(63,'direkt rekursiv','direkte','Abstützung');
INSERT INTO "connection" VALUES(63,'endrekursiv','beinhaltet','iterative(n/r) Prozess');
INSERT INTO "connection" VALUES(63,'map','wird angewendet auf','Liste');
INSERT INTO "connection" VALUES(63,'Liste','definiert durch','Induktive Definfition');
INSERT INTO "connection" VALUES(63,'Programme','verwendet eingebaute','Oprerationen');
INSERT INTO "connection" VALUES(63,'Typen','sind z. B.','Boolesche Werte');
INSERT INTO "connection" VALUES(63,'symbol?','überprüft','Wert(e)');
INSERT INTO "connection" VALUES(63,'Induktive Definfition','konstruiert','(neue) Elemente');
INSERT INTO "connection" VALUES(63,'rekursive(n/r) Prozess','enthält','rekursive(r) Funktionsaufruf(e)');
INSERT INTO "connection" VALUES(63,'Programme','können beinhalten','Liste');
INSERT INTO "connection" VALUES(63,'Programme','erzeugen','Ausgabe');
INSERT INTO "connection" VALUES(63,'Racket','verwendet geklammerte','Präfix-Notation');
INSERT INTO "connection" VALUES(63,'Typen','sind z. B.','Symbole');
INSERT INTO "connection" VALUES(63,'Boolesche Algebra','ist eine','Menge');
INSERT INTO "connection" VALUES(63,'Eingabe','enthält','Informationen');
INSERT INTO "connection" VALUES(63,'Schablonen','enthalten','Informationen');
INSERT INTO "connection" VALUES(63,'foldr','ist eine','Funktion');
INSERT INTO "connection" VALUES(63,'Typen','sind z. B.','Benutzerdefinierte Strukturen');
INSERT INTO "connection" VALUES(63,'Datenbündel','ist eine konstante','Liste');
INSERT INTO "connection" VALUES(63,'Paare','besitzen nicht mehr als zwei','Komponente');
INSERT INTO "connection" VALUES(63,'Funktion','ist manchmal ... definiert','endrekursiv');
INSERT INTO "connection" VALUES(63,'Boolesche Algebra','beinhaltet','Boolesche Abbildungen');
INSERT INTO "connection" VALUES(63,'nicht-linear rekursiv','mehr als ein weiterer','rekursive(r) Funktionsaufruf(e)');
INSERT INTO "connection" VALUES(63,'Funktion','erzeugt manchmal einen','iterative(n/r) Prozess');
INSERT INTO "connection" VALUES(63,'foldr','ist eine rechtsassoziative','Aggregat-Funktion');
INSERT INTO "connection" VALUES(63,'Induktive Definfition','basiert auf','Bildungsregeln');
INSERT INTO "connection" VALUES(63,'Involution','ist ein','Gesetz');
INSERT INTO "connection" VALUES(63,'Typen','sind z. B.','Zahlen');
INSERT INTO "connection" VALUES(63,'Funktionale Programmiersprache','arbeitet mit','Funktion');
INSERT INTO "connection" VALUES(63,'Funktion','erzeugt manchmal einen','rekursive(n/r) Prozess');
INSERT INTO "connection" VALUES(63,'string?','überprüft','Wert(e)');
INSERT INTO "connection" VALUES(63,'Paare','sind Vorform der','Liste');
INSERT INTO "connection" VALUES(63,'Selbstbezug','bedeutet','rekursive(r) Funktionsaufruf(e)');
INSERT INTO "connection" VALUES(63,'Modulariesierung','dient der','Lesbarkeit');
INSERT INTO "connection" VALUES(63,'Funktion','ist manchmal ... definiert','indirekt rekursiv');
INSERT INTO "connection" VALUES(63,'abstrakter Datentyp','beinhaltet','Oprerationen');
INSERT INTO "connection" VALUES(63,'Funktion','besitzt eine','Auswertung');
INSERT INTO "connection" VALUES(63,'linear rekursiv','höchstens ein weiterer','rekursive(r) Funktionsaufruf(e)');
INSERT INTO "connection" VALUES(63,'Auswertung','ist manchmal','linear rekursiv');
INSERT INTO "connection" VALUES(63,'abstrakter Datentyp','ist eine','Menge');
INSERT INTO "connection" VALUES(63,'Racket','ist eine','Funktionale Programmiersprache');
INSERT INTO "connection" VALUES(63,'number?','ist ein vordefiniertes','Prädikat(e)');
INSERT INTO "connection" VALUES(63,'struct?','überprüft','Wert(e)');
INSERT INTO "connection" VALUES(63,'Programme','beinhalten oft','Hilfsfunktionen');
INSERT INTO "connection" VALUES(63,'Signatur','beinhaltet einen','Namen');
INSERT INTO "connection" VALUES(63,'symbol?','ist ein vordefiniertes','Prädikat(e)');
INSERT INTO "connection" VALUES(63,'abstrakter Datentyp','ist Spezialform von','Datentyp');
INSERT INTO "connection" VALUES(63,'Schablonen','betrachten','Eingabe');
INSERT INTO "connection" VALUES(63,'Programme','beinhalten manchmal eine','Datenanalyse und -definition');
INSERT INTO "connection" VALUES(63,'Modulariesierung','dient der','Wartbarkeit');
INSERT INTO "connection" VALUES(63,'rekursive Datendefinition','beinhaltet mindestens zwei','Fälle');
INSERT INTO "connection" VALUES(63,'rekursive Funktionsdefintion','beinhaltet','Selbstbezug');
INSERT INTO "connection" VALUES(63,'iterative(n/r) Prozess','besitzt konstanten','Speicherbedarf');
INSERT INTO "connection" VALUES(63,'Variable','zur','Modulariesierung');
INSERT INTO "connection" VALUES(63,'Signatur','beinhaltet Art von','Eingabe');
INSERT INTO "connection" VALUES(63,'rekursive Datendefinition','beinhaltet','Selbstbezug');
INSERT INTO "connection" VALUES(63,'map','ist eine','Funktion');
INSERT INTO "connection" VALUES(63,'Racket','kennt','Typen');
INSERT INTO "connection" VALUES(63,'string?','ist ein vordefiniertes','Prädikat(e)');
INSERT INTO "connection" VALUES(63,'number?','überprüft','Wert(e)');
INSERT INTO "connection" VALUES(63,'Oprerationen','sind definiert auf','Wert(e)');
INSERT INTO "connection" VALUES(63,'Programme','beinhalten oft','Variable');
INSERT INTO "connection" VALUES(63,'boolean?','ist ein vordefiniertes','Prädikat(e)');
INSERT INTO "connection" VALUES(63,'Datentyp','beinhaltet','Oprerationen');
INSERT INTO "connection" VALUES(63,'foldr','aggregiert alle','Wert(e)');
INSERT INTO "connection" VALUES(63,'indirekt rekursiv','schrittweise','Abstützung');
INSERT INTO "connection" VALUES(63,'Datentyp','beinhaltet','Wert(e)');
INSERT INTO "connection" VALUES(63,'Variable','Platzhalter für','Unbekannte');
INSERT INTO "connection" VALUES(63,'Boolesche Werte','befolgen','Boolesche Algebra');
INSERT INTO "connection" VALUES(63,'Funktion','ist manchmal ... definiert','direkt rekursiv');
INSERT INTO "connection" VALUES(63,'Programme','verarbeiten','Eingabe');
INSERT INTO "connection" VALUES(63,'Präfix-Notation','ist eine Art von','Notation');
INSERT INTO "connection" VALUES(63,'struct?','ist ein vordefiniertes','Prädikat(e)');
INSERT INTO "connection" VALUES(64,'Induktion','besteht aus','Konstruktionsregeln');
INSERT INTO "connection" VALUES(64,'arithmetischer Ausdruck','ausgewertet in','Präorder');
INSERT INTO "connection" VALUES(64,'Operatorsymbole','verknüpft','Numerale');
INSERT INTO "connection" VALUES(64,'arithmetischer Ausdruck','ausgewertet in','Postorder');
INSERT INTO "connection" VALUES(64,'Numerale','fordert','Interpretation');
INSERT INTO "connection" VALUES(64,'Kommentaren','enthält','Zweck');
INSERT INTO "connection" VALUES(64,'Kommentaren','enthält','Beispiele');
INSERT INTO "connection" VALUES(64,'Programm','besteht aus','Kommentaren');
INSERT INTO "connection" VALUES(64,'Induktion','besteht aus','Basisbaustein');
INSERT INTO "connection" VALUES(64,'arithmetischer Ausdruck','enthält','Operatorsymbole');
INSERT INTO "connection" VALUES(64,'Kommentaren','enthält','Schablone');
INSERT INTO "connection" VALUES(64,'arithmetischer Ausdruck','ausgewertet in','Inorder');
INSERT INTO "connection" VALUES(64,'Kommentaren','enthält','Signatur');
INSERT INTO "connection" VALUES(64,'Funktionen','besteht aus','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(64,'Schablone','nimmt Bezug auf','Datenstruktur');
INSERT INTO "connection" VALUES(64,'arithmetischer Ausdruck','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(64,'Rekursion','hat','Selbstbezug');
INSERT INTO "connection" VALUES(64,'arithmetischer Ausdruck','enthält','Numerale');
INSERT INTO "connection" VALUES(64,'Funktionen','erstellt','Rekursiver Prozess');
INSERT INTO "connection" VALUES(64,'Programm','besteht aus','Funktionen');
INSERT INTO "connection" VALUES(64,'Funktionen','erstellt','Iterativer Prozess');
INSERT INTO "connection" VALUES(64,'arithmetischer Ausdruck','darstellbar als','Baum');
INSERT INTO "connection" VALUES(64,'Numerale','definiert als','Induktion');
INSERT INTO "connection" VALUES(65,'Funktion','benötigt eventuell','Abbruchbedingung');
INSERT INTO "connection" VALUES(65,'Funktion','kann verwenden','Fallunterscheidung');
INSERT INTO "connection" VALUES(65,'Daten','können überprüft werden für','Fallunterscheidung');
INSERT INTO "connection" VALUES(65,'Listen','enthalten und sind','Daten');
INSERT INTO "connection" VALUES(65,'Fallunterscheidung','ermöglicht','Abbruchbedingung');
INSERT INTO "connection" VALUES(65,'Funktion','verarbeitet','Daten');
INSERT INTO "connection" VALUES(66,'Dokumentation','enthält','Schablone');
INSERT INTO "connection" VALUES(66,'Prozess','kann sein','iterativ');
INSERT INTO "connection" VALUES(66,'Prozess','kann sein','rekursiv');
INSERT INTO "connection" VALUES(66,'Funktion','definiert','Prozess');
INSERT INTO "connection" VALUES(66,'rekursiv','kann sein','linear rekursiv');
INSERT INTO "connection" VALUES(66,'Funktionskopf','enthält','Parameter');
INSERT INTO "connection" VALUES(66,'Funktion','hat','Funktionskopf');
INSERT INTO "connection" VALUES(66,'Abstrakter Datentyp','hat','Operationen');
INSERT INTO "connection" VALUES(66,'Signatur','gibt an','Definitionsbereich');
INSERT INTO "connection" VALUES(66,'Dokumentation','enthält','Signatur');
INSERT INTO "connection" VALUES(66,'Gleichungen','sind äquivalent','Semantik');
INSERT INTO "connection" VALUES(66,'Datentyp','kann defniert sein','rekursiv');
INSERT INTO "connection" VALUES(66,'Funktionskopf','bestimmt','Schablone');
INSERT INTO "connection" VALUES(66,'endrekursiv','führt zu','iterativ');
INSERT INTO "connection" VALUES(66,'Operationen','sind definiert auf','Menge von Werten');
INSERT INTO "connection" VALUES(66,'Signatur','beschreibt','Syntax');
INSERT INTO "connection" VALUES(66,'Signatur','führt zu','Funktionskopf');
INSERT INTO "connection" VALUES(66,'Beispiele','bestimmen','Tests');
INSERT INTO "connection" VALUES(66,'Datentyp','wird zusammengesetzt','Datentyp');
INSERT INTO "connection" VALUES(66,'Signatur','gibt an','Wertebereich');
INSERT INTO "connection" VALUES(66,'Abstrakter Datentyp','wird bestimmt durch','Gleichungen');
INSERT INTO "connection" VALUES(66,'Abstrakter Datentyp','hat','Menge von Werten');
INSERT INTO "connection" VALUES(66,'Gleichungen','kann enthalten','Konditionen');
INSERT INTO "connection" VALUES(66,'Funktion','hat (hoffentlich)','Dokumentation');
INSERT INTO "connection" VALUES(66,'Dokumentation','enthält','Beispiele');
INSERT INTO "connection" VALUES(66,'Abstrakter Datentyp','wird implementiert','Datentyp');
INSERT INTO "connection" VALUES(66,'Funktionsrumpf','enthält','Semantik');
INSERT INTO "connection" VALUES(66,'Abstrakter Datentyp','wird bestimmt durch','Signatur');
INSERT INTO "connection" VALUES(66,'Funktion','hat','Funktionsrumpf');
INSERT INTO "connection" VALUES(67,'Baum','besteht aus','Knoten');
INSERT INTO "connection" VALUES(67,'make-struct','nicht explizit','typisiert');
INSERT INTO "connection" VALUES(67,'Notation (-fix)','oder','Prä');
INSERT INTO "connection" VALUES(67,'Schablone','benutzt','define-struct');
INSERT INTO "connection" VALUES(67,'Fallunterscheidung','wertet aus','Teilausdruck');
INSERT INTO "connection" VALUES(67,'endrekursiv','ist ... definiert','rekursiv');
INSERT INTO "connection" VALUES(67,'Variation (-order)','entweder','In');
INSERT INTO "connection" VALUES(67,'make-struct','definiert','konstantes Datenbündel');
INSERT INTO "connection" VALUES(67,'Signatur','enthält','Name');
INSERT INTO "connection" VALUES(67,'Wurzel','ist ein','Knoten');
INSERT INTO "connection" VALUES(67,'Prozess','kann ... sein','Iterativer Prozess');
INSERT INTO "connection" VALUES(67,'Prozess','rekursiv wenn alle ... aufgeschoben werden','Operationen');
INSERT INTO "connection" VALUES(67,'Iterativer Prozess','besitzt','Zustand');
INSERT INTO "connection" VALUES(67,'Junktor','verbindet zwei','Aussage');
INSERT INTO "connection" VALUES(67,'Binärbaum','Besuchen aller Knoten mit','Traversierung');
INSERT INTO "connection" VALUES(67,'Funktion','wertet aus','Arithmetische Ausdruck');
INSERT INTO "connection" VALUES(67,'Variation (-order)','oder','Post');
INSERT INTO "connection" VALUES(67,'typisiert','abgesichert durch','Fallunterscheidung');
INSERT INTO "connection" VALUES(67,'Argumente','ersetzen','Namen');
INSERT INTO "connection" VALUES(67,'Kanten','stellen dar','Strukturinformation');
INSERT INTO "connection" VALUES(67,'Dokumentation','von','Programm');
INSERT INTO "connection" VALUES(67,'Entwurf von Programmen','iv) Identifikation','Berechnungsvorschrift');
INSERT INTO "connection" VALUES(67,'Variation (-order)','oder','Prä');
INSERT INTO "connection" VALUES(67,'Alphabet','enhält','Numeral');
INSERT INTO "connection" VALUES(67,'Notation (-fix)','entweder','In');
INSERT INTO "connection" VALUES(67,'rekursiv','erzeugt rekursiven','Prozess');
INSERT INTO "connection" VALUES(67,'Schablone','benutzt','Datendefinition in Racket');
INSERT INTO "connection" VALUES(67,'indirekt rekursiv','Fkt. stützt sich schrittweise','rekursiv');
INSERT INTO "connection" VALUES(67,'Aussage','besitzt','Wahrheitswert');
INSERT INTO "connection" VALUES(67,'Schablone','gibt alle an','Selektoren');
INSERT INTO "connection" VALUES(67,'erfüllt','für konkrete Variablen wahr','Wahrheitswert');
INSERT INTO "connection" VALUES(67,'Aussage','oder','erfüllt');
INSERT INTO "connection" VALUES(67,'Arithmetische Ausdruck','eindeutig dargestellt durch','Binärbaum');
INSERT INTO "connection" VALUES(67,'Alphabet','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(67,'Auswertung','ersetzen durch aktuelle Parameter','Eingabeparameter');
INSERT INTO "connection" VALUES(67,'atomare Aussage','enthält keinen','Junktor');
INSERT INTO "connection" VALUES(67,'Datentyp','definiert durch','Induktive Definition');
INSERT INTO "connection" VALUES(67,'Datendefinition in Racket','definiert durch','define-struct');
INSERT INTO "connection" VALUES(67,'Operationen','definiert auf','Werte');
INSERT INTO "connection" VALUES(67,'list','Implementierung von','ADT Liste');
INSERT INTO "connection" VALUES(67,'Baum','besteht aus','Kanten');
INSERT INTO "connection" VALUES(67,'Knoten','stellen dar','strukturierte Objekte');
INSERT INTO "connection" VALUES(67,'Abbildungen','definiert auf','1 und 0');
INSERT INTO "connection" VALUES(67,'rekursiv','höchstens ein weiterer rek. Aufruf ... ist linear rek.','Auswertung');
INSERT INTO "connection" VALUES(67,'Baum','definiert durch','Induktive Definition');
INSERT INTO "connection" VALUES(67,'Numeral','verknüpft','ganze Zahlen');
INSERT INTO "connection" VALUES(67,'abstrakter Datentyp','ohne Implementierung von','Operationen');
INSERT INTO "connection" VALUES(67,'Iterativer Prozess','feste Regeln für die','Abbruchbedingung');
INSERT INTO "connection" VALUES(67,'Aussage','ist ein','Satz');
INSERT INTO "connection" VALUES(67,'(if...) oder (cond...)','ist eine','Specialform');
INSERT INTO "connection" VALUES(67,'Hierarchisch strukturierte Information','dargestellt als','Baum');
INSERT INTO "connection" VALUES(67,'Dokumentation','enthält','Signatur');
INSERT INTO "connection" VALUES(67,'Arithmetische Ausdruck','gebildet aus','Alphabet');
INSERT INTO "connection" VALUES(67,'abstrakter Datentyp','ohne Implementierung von','Werte');
INSERT INTO "connection" VALUES(67,'Name','hinzugefügt zu','Operatorsymbol');
INSERT INTO "connection" VALUES(67,'Aufgabenstellung','in Form einer','Textaufgabe');
INSERT INTO "connection" VALUES(67,'Ausgabe','Elemente des','Wertebereich');
INSERT INTO "connection" VALUES(67,'Alphabet','enthält','Operatorsymbol');
INSERT INTO "connection" VALUES(67,'Datentyp','besteht aus','Operationen');
INSERT INTO "connection" VALUES(67,'rekursiv','besitzt','Abbruchbedingung');
INSERT INTO "connection" VALUES(67,'abstrakter Datentyp','ist ein','Datentyp');
INSERT INTO "connection" VALUES(67,'Algebra','besitzt','Menge M');
INSERT INTO "connection" VALUES(67,'Abbildungen','iii)','NICHT');
INSERT INTO "connection" VALUES(67,'Menge B','ist eine','Boolesche Algebra');
INSERT INTO "connection" VALUES(67,'rekursiv','mehr als ein weiterer Aufruf','nicht-linear rekursiv');
INSERT INTO "connection" VALUES(67,'atomare Aussage','ist eine','Aussage');
INSERT INTO "connection" VALUES(67,'Binärbaum','spezielle Art eines','Baum');
INSERT INTO "connection" VALUES(67,'Arithmetische Ausdruck','mehrere Möglichkeiten der','Notation (-fix)');
INSERT INTO "connection" VALUES(67,'Auswertung','einsetzen der','Berechnungsvorschrift');
INSERT INTO "connection" VALUES(67,'Algebra','alle sind Elemente von M','Wertebereich');
INSERT INTO "connection" VALUES(67,'endrekursiv','erzeugt','Iterativer Prozess');
INSERT INTO "connection" VALUES(67,'Interpretationsvorschrift','wertet aus mit','Selbstbezug');
INSERT INTO "connection" VALUES(67,'Eingabeparameter','Element des','Definitionsbereich');
INSERT INTO "connection" VALUES(67,'Programm','verwendet andere','Programm');
INSERT INTO "connection" VALUES(67,'Programm','definiert durch','Berechnungsvorschrift');
INSERT INTO "connection" VALUES(67,'Abbildungen','ii)','ODER');
INSERT INTO "connection" VALUES(67,'Entwurf von Programmen','iii) Identifikation','Ausgabe');
INSERT INTO "connection" VALUES(67,'Funktion','definiert auf dem','Definitionsbereich');
INSERT INTO "connection" VALUES(67,'Obertyp','für mehrere Objekte','define-struct');
INSERT INTO "connection" VALUES(67,'Aussage','oder','allgemeingültig');
INSERT INTO "connection" VALUES(67,'Entwurf von Programmen','ii) Identifikation','Eingabeparameter');
INSERT INTO "connection" VALUES(67,'Definition','Fkt.benutzt andere Fkt.','direkt');
INSERT INTO "connection" VALUES(67,'Menge B','mit','true = 1 false=0');
INSERT INTO "connection" VALUES(67,'Textaufgabe','besteht aus','Aussage');
INSERT INTO "connection" VALUES(67,'Numeral','definiert durch','Induktive Definition');
INSERT INTO "connection" VALUES(67,'Aussage','kann enthalten','Variabel');
INSERT INTO "connection" VALUES(67,'Textaufgabe','impliziert','Fallunterscheidung');
INSERT INTO "connection" VALUES(67,'Zustand','beschrieben durch','Zustandsvariablen');
INSERT INTO "connection" VALUES(67,'Definition','beschreibt','Programm');
INSERT INTO "connection" VALUES(67,'Notation (-fix)','oder','Post');
INSERT INTO "connection" VALUES(67,'Dokumentation','enthält','Tests');
INSERT INTO "connection" VALUES(67,'Programm','definiert durch','Eingabeparameter');
INSERT INTO "connection" VALUES(67,'Traversierung','Umkehrung der','Induktive Definition');
INSERT INTO "connection" VALUES(67,'Fallunterscheidung','Implementierung von','Menge B');
INSERT INTO "connection" VALUES(67,'allgemeingültig','ist immer wahr','Wahrheitswert');
INSERT INTO "connection" VALUES(67,'define-struct','erzeugt','make-struct');
INSERT INTO "connection" VALUES(67,'rekursiv','mindestens ein Fall ohne Selbstbezug','rekursiv');
INSERT INTO "connection" VALUES(67,'define-struct','ist eine','Specialform');
INSERT INTO "connection" VALUES(67,'Boolesche Algebra','spezielle Form von','Algebra');
INSERT INTO "connection" VALUES(67,'Arithmetische Ausdruck','definiert durch','Induktive Definition');
INSERT INTO "connection" VALUES(67,'Arithmetische Ausdruck','besitzt','Interpretationsvorschrift');
INSERT INTO "connection" VALUES(67,'Definition','kann ... sein','endrekursiv');
INSERT INTO "connection" VALUES(67,'Definition','kann ... sein','rekursiv');
INSERT INTO "connection" VALUES(67,'Signatur','Art der','Ausgabe');
INSERT INTO "connection" VALUES(67,'Baum','besitzt','Teilbaum');
INSERT INTO "connection" VALUES(67,'Binärbaum','jeder Knoten höchstens zwei','Teilbaum');
INSERT INTO "connection" VALUES(67,'direkt rekursiv','Fkt. benutzt sich selbst','rekursiv');
INSERT INTO "connection" VALUES(67,'Entwurf von Programmen','i) Identifikationen relevanter Aspekte','Aufgabenstellung');
INSERT INTO "connection" VALUES(67,'Algebra','Menge von','Funktion');
INSERT INTO "connection" VALUES(67,'Baum','besitzt','Wurzel');
INSERT INTO "connection" VALUES(67,'Berechnungsvorschrift','verwendet','Fallunterscheidung');
INSERT INTO "connection" VALUES(67,'Datendefinition in Racket','mit Hilfe','Specialform');
INSERT INTO "connection" VALUES(67,'Boolesche Algebra','mit','Abbildungen');
INSERT INTO "connection" VALUES(67,'Fallunterscheidung','in Racket','(if...) oder (cond...)');
INSERT INTO "connection" VALUES(67,'eingebaute Operation','repräsentiert durch','Operatorsymbol');
INSERT INTO "connection" VALUES(67,'Programm','definiert durch','Name');
INSERT INTO "connection" VALUES(67,'erfüllbar','ist für bestimmte Variabeln','erfüllt');
INSERT INTO "connection" VALUES(67,'Datentyp','besteht aus','Werte');
INSERT INTO "connection" VALUES(67,'Programm','verwendet','eingebaute Operation');
INSERT INTO "connection" VALUES(67,'Algebra','alle sind Elemente von M','Definitionsbereich');
INSERT INTO "connection" VALUES(67,'Berechnungsvorschrift','definiert eine','Funktion');
INSERT INTO "connection" VALUES(67,'Induktive Definition','besitzt','Selbstbezug');
INSERT INTO "connection" VALUES(67,'Aussage','entweder','erfüllbar');
INSERT INTO "connection" VALUES(67,'Operatorsymbol','repräsentiert eine','Funktion');
INSERT INTO "connection" VALUES(67,'make-struct','konkretes Einsetzen','Argumente');
INSERT INTO "connection" VALUES(67,'list','Definition ist','rekursiv');
INSERT INTO "connection" VALUES(67,'Abbildungen','i)','UND');
INSERT INTO "connection" VALUES(67,'Datendefinition in Racket','nur als Kommentar','Obertyp');
INSERT INTO "connection" VALUES(67,'Datendefinition in Racket','Modellierung mit','make-struct');
INSERT INTO "connection" VALUES(67,'typisiert','als Kommentar','Datendefinition in Racket');
INSERT INTO "connection" VALUES(67,'define-struct','erzeugt','Selektoren');
INSERT INTO "connection" VALUES(67,'Traversierung','mit Hilfe einer','Variation (-order)');
INSERT INTO "connection" VALUES(67,'Signatur','Art der','Eingabeparameter');
INSERT INTO "connection" VALUES(67,'Dokumentation','enthält','Beispiele');
INSERT INTO "connection" VALUES(67,'ADT Liste','ist ein','abstrakter Datentyp');
INSERT INTO "connection" VALUES(67,'define-struct','als Platzhalter','Namen');
INSERT INTO "connection" VALUES(67,'Funktion','Auswertung ergibt','Wertebereich');
INSERT INTO "connection" VALUES(68,'First Class Functions','erlaubt Abstraktion','Abstrakte Algorithmen');
INSERT INTO "connection" VALUES(68,'Listen','Werden rekursiv definiert und verarbeitet','Rekursion');
INSERT INTO "connection" VALUES(68,'Rekursion','erzeugt','Iterativer Prozess');
INSERT INTO "connection" VALUES(68,'Rekursion','erzeugt','Rekursiver Prozess');
INSERT INTO "connection" VALUES(68,'"Alles" ist ein Ausdruck','führt zu','Zustandslosigkeit');
INSERT INTO "connection" VALUES(68,'Higher-Order Functions','erlaubt Abstraktion','Abstrakte Algorithmen');
INSERT INTO "connection" VALUES(69,'Lisp-Sprachfamilie','ist','funktionale Programmierung');
INSERT INTO "connection" VALUES(69,'funktionale Programmierung','basiert auf','Lambda-Kalkül');
INSERT INTO "connection" VALUES(69,'Programmierung','unterscheidet sich durch','Programmierparadigma');
INSERT INTO "connection" VALUES(69,'Dokumentation','beinhaltet den','Zweck');
INSERT INTO "connection" VALUES(69,'Programmiersprache','ist','Racket');
INSERT INTO "connection" VALUES(69,'gültiger Ausdruck','beschreibt die','Syntax');
INSERT INTO "connection" VALUES(69,'Programm','wird ausgeführt durch','Funktionsaufruf');
INSERT INTO "connection" VALUES(69,'Signatur','ist Bestandteil der','Dokumentation');
INSERT INTO "connection" VALUES(69,'Liste','basiert auf','Rekursive Definition');
INSERT INTO "connection" VALUES(69,'Liste','ist ein','Abstrakter Datentyp');
INSERT INTO "connection" VALUES(69,'Baum','besteht aus','Teilbäumen');
INSERT INTO "connection" VALUES(69,'Funktionen','besitzen einen','Funktionskopf');
INSERT INTO "connection" VALUES(69,'Funktionen','besitzen einen','Funktionsrumpf');
INSERT INTO "connection" VALUES(69,'Rechenvorschrift/en','werden ausgelagert in','Hilfsfunktionen');
INSERT INTO "connection" VALUES(69,'Baum','besteht aus','Knoten');
INSERT INTO "connection" VALUES(69,'Operatorsymbole','sind Teil von','Alphabet');
INSERT INTO "connection" VALUES(69,'Funktionen','liefern einen','Rückgabewert');
INSERT INTO "connection" VALUES(69,'Ausdruck','muss sein','gültiger Ausdruck');
INSERT INTO "connection" VALUES(69,'Präfix','ist eine','Notation');
INSERT INTO "connection" VALUES(69,'Modularisierung','unterstützt die','Wartbarkeit');
INSERT INTO "connection" VALUES(69,'Induktive Definition','ist Bestandteil von','Rekursive Definition');
INSERT INTO "connection" VALUES(69,'Baum','enthält','Informationen');
INSERT INTO "connection" VALUES(69,'Rechenvorschrift/en','ist ein','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(69,'arithmetischer Ausdruck','wird dargestellt durch','Notation');
INSERT INTO "connection" VALUES(69,'Scheme','gehört zur','Lisp-Sprachfamilie');
INSERT INTO "connection" VALUES(69,'Semantik','ergibt sich aus der','Syntax');
INSERT INTO "connection" VALUES(69,'Hierarchische Struktur','beschreibt','Informationen');
INSERT INTO "connection" VALUES(69,'Präorder','ist Reihenfolge der','Traversierung');
INSERT INTO "connection" VALUES(69,'Hierarchische Struktur','ist ein','Baum');
INSERT INTO "connection" VALUES(69,'Namen','besitzen einen','Wert');
INSERT INTO "connection" VALUES(69,'Kontrollstrukturen','sind','Verzweigungen');
INSERT INTO "connection" VALUES(69,'Zweck','erläutert die','Funktionen');
INSERT INTO "connection" VALUES(69,'Knoten','ist eine','Wurzel');
INSERT INTO "connection" VALUES(69,'Modularisierung','bewahrt die','Konsistenz');
INSERT INTO "connection" VALUES(69,'Knoten','sind','Strukturobjekte');
INSERT INTO "connection" VALUES(69,'Racket','basiert auf','Scheme');
INSERT INTO "connection" VALUES(69,'Modularisierung','unterstützt die','Lesbarkeit');
INSERT INTO "connection" VALUES(69,'Kontrollstrukturen','unterscheiden','Rechenvorschrift/en');
INSERT INTO "connection" VALUES(69,'Funktionen','haben einen eindeutigen','Namen');
INSERT INTO "connection" VALUES(69,'Postorder','ist Reihenfolge der','Traversierung');
INSERT INTO "connection" VALUES(69,'Funktionsrumpf','enthält','Rechenvorschrift/en');
INSERT INTO "connection" VALUES(69,'Baum','besteht aus','Kanten');
INSERT INTO "connection" VALUES(69,'Hilfszeichen','dient der','Strukturierung');
INSERT INTO "connection" VALUES(69,'Selbstbezug','ist Bestandteil von','Rekursive Definition');
INSERT INTO "connection" VALUES(69,'Induktive Definition','basiert auf','Regeln');
INSERT INTO "connection" VALUES(69,'Kanten','enthalten','Strukturinformationen');
INSERT INTO "connection" VALUES(69,'Variablen','sind','zustandslos');
INSERT INTO "connection" VALUES(69,'arithmetischer Ausdruck','benötigt','Hilfszeichen');
INSERT INTO "connection" VALUES(69,'Inorder','ist Reihenfolge der','Traversierung');
INSERT INTO "connection" VALUES(69,'Binärbaum','eignet sich gut zur','Traversierung');
INSERT INTO "connection" VALUES(69,'Baum','ist ein','Abstrakter Datentyp');
INSERT INTO "connection" VALUES(69,'funktionale Programmierung','beschreibt ein','Programm');
INSERT INTO "connection" VALUES(69,'Programmierung','erfordert','Testen');
INSERT INTO "connection" VALUES(69,'Programmierparadigma','beschreibt','funktionale Programmierung');
INSERT INTO "connection" VALUES(69,'Hilfsfunktionen','ermöglichen','Modularisierung');
INSERT INTO "connection" VALUES(69,'Infix','ist eine','Notation');
INSERT INTO "connection" VALUES(69,'Syntax','ist Aufbau von','Ausdruck');
INSERT INTO "connection" VALUES(69,'Testen','validiert den','Rückgabewert');
INSERT INTO "connection" VALUES(69,'Funktionen','definieren eine','Rechenvorschrift/en');
INSERT INTO "connection" VALUES(69,'Beispiele','sind Bestandteil der','Dokumentation');
INSERT INTO "connection" VALUES(69,'arithmetischer Ausdruck','kann beinhalten','Selbstbezug');
INSERT INTO "connection" VALUES(69,'Wert','entstammt aus','Alphabet');
INSERT INTO "connection" VALUES(69,'Funktionsaufruf','mit','Parameter');
INSERT INTO "connection" VALUES(69,'Knoten','ist ein','interner Knoten');
INSERT INTO "connection" VALUES(69,'Programm','beinhaltet','Variablen');
INSERT INTO "connection" VALUES(69,'Kommentare','dienen zur','Dokumentation');
INSERT INTO "connection" VALUES(69,'Rekursive Definition','ermöglicht','Traversierung');
INSERT INTO "connection" VALUES(69,'Beispiele','sind Grundlage zum','Testen');
INSERT INTO "connection" VALUES(69,'Regeln','beschreiben einen','gültiger Ausdruck');
INSERT INTO "connection" VALUES(69,'Signatur','beschreibt den','Funktionskopf');
INSERT INTO "connection" VALUES(69,'arithmetischer Ausdruck','benötigt','Operatorsymbole');
INSERT INTO "connection" VALUES(69,'Funktionen','ermöglichen','Selbstbezug');
INSERT INTO "connection" VALUES(69,'Hilfszeichen','sind Teil von','Alphabet');
INSERT INTO "connection" VALUES(69,'Binärbaum','ist ein Spezialfall von','Baum');
INSERT INTO "connection" VALUES(69,'Hilfsfunktionen','sind','Funktionen');
INSERT INTO "connection" VALUES(69,'Baum','basiert auf','Rekursive Definition');
INSERT INTO "connection" VALUES(69,'arithmetischer Ausdruck','ist ein','Ausdruck');
INSERT INTO "connection" VALUES(69,'Operatorsymbole','repräsentieren','Funktionen');
INSERT INTO "connection" VALUES(69,'Semantik','ist Bedeutung von','Ausdruck');
INSERT INTO "connection" VALUES(69,'Programmierung','geschieht mit','Programmiersprache');
INSERT INTO "connection" VALUES(69,'Namen','zählen zu','Operatorsymbole');
INSERT INTO "connection" VALUES(69,'Programm','wird erläutert durch','Kommentare');
INSERT INTO "connection" VALUES(69,'Hilfszeichen','dient der','Worttrennung');
INSERT INTO "connection" VALUES(69,'arithmetischer Ausdruck','ist darstellbar als','Baum');
INSERT INTO "connection" VALUES(69,'arithmetischer Ausdruck','ist definiert durch','Induktive Definition');
INSERT INTO "connection" VALUES(69,'Variablen','sind','Namen');
INSERT INTO "connection" VALUES(69,'Knoten','ist ein','Blatt');
INSERT INTO "connection" VALUES(69,'Ziffern','sind Teil von','Alphabet');
INSERT INTO "connection" VALUES(69,'Zahlen','bestehen aus','Ziffern');
INSERT INTO "connection" VALUES(69,'Kontrollstrukturen','sind','Bedingte Anweisungen');
INSERT INTO "connection" VALUES(69,'Kontrollstrukturen','sind','Fallunterscheidungen');
INSERT INTO "connection" VALUES(69,'Zeichen','werden konkateniert zu','Wort');
INSERT INTO "connection" VALUES(69,'Funktionsrumpf','enthält','Kontrollstrukturen');
INSERT INTO "connection" VALUES(69,'Postfix','ist eine','Notation');
INSERT INTO "connection" VALUES(69,'arithmetischer Ausdruck','beinhaltet','Numerale');
INSERT INTO "connection" VALUES(69,'Variablen','sind kein','Speicherbereich');
INSERT INTO "connection" VALUES(69,'Knoten','sind verbunden durch','Kanten');
INSERT INTO "connection" VALUES(69,'funktionale Programmierung','ist','zustandslos');
INSERT INTO "connection" VALUES(69,'Funktionen','verfügen über','Parameter');
INSERT INTO "connection" VALUES(69,'Numerale','repräsentieren','Zahlen');
INSERT INTO "connection" VALUES(69,'Alphabet','ist','endlich');
INSERT INTO "connection" VALUES(69,'Rückgabewert','ist ein','Wert');
INSERT INTO "connection" VALUES(69,'Programm','besteht aus','Funktionen');
INSERT INTO "connection" VALUES(69,'Alphabet','beinhaltet','Zeichen');
INSERT INTO "connection" VALUES(70,'Verzweigungen','*','cond');
INSERT INTO "connection" VALUES(70,'Funktionale Progammierung','verarbeitet','Funktionen');
INSERT INTO "connection" VALUES(70,'Funktionen','verarbeitet','Listen');
INSERT INTO "connection" VALUES(70,'Funktionen','stützt sich auf','Hilfsfunktionen');
INSERT INTO "connection" VALUES(70,'Hilfsfunktionen','erstellt mit Hilfe von','Schema');
INSERT INTO "connection" VALUES(70,'Funktionen','enthalten','Rekursion');
INSERT INTO "connection" VALUES(70,'Verzweigungen','*','if');
INSERT INTO "connection" VALUES(70,'Rekursion','durch','Wiederaufruf der Funktion selbst');
INSERT INTO "connection" VALUES(70,'Funktionen','erstellt mit HIlfe von','Schema');
INSERT INTO "connection" VALUES(70,'Schema','enthält','Zweck');
INSERT INTO "connection" VALUES(70,'Verzweigungen','*','else');
INSERT INTO "connection" VALUES(70,'Schema','enthält','Schablone');
INSERT INTO "connection" VALUES(70,'Funktionen','enthalten','Verzweigungen');
INSERT INTO "connection" VALUES(70,'Schema','enthält','Datenstruktur');
INSERT INTO "connection" VALUES(71,'Racket','verwendet','Präfix-Notation');
INSERT INTO "connection" VALUES(71,'Funktionsrumpf',6,'Test');
INSERT INTO "connection" VALUES(71,'Racket','ist funktionale','Programmiersprache');
INSERT INTO "connection" VALUES(71,'Beispiele',4,'Schablone');
INSERT INTO "connection" VALUES(71,'Programme','lass sich erstellen durch','Racket');
INSERT INTO "connection" VALUES(71,'(cons bzw.) list','...oder','cons symbol listofsymbols');
INSERT INTO "connection" VALUES(71,'elementare Schritte','sind 1.','Datendefinition');
INSERT INTO "connection" VALUES(71,'Special-Forms','...oder auch','(cons bzw.) list');
INSERT INTO "connection" VALUES(71,'Special-Forms','diese sind...','define, lambda, if, cond, else, ...');
INSERT INTO "connection" VALUES(71,'elementare Schritte','zum Schreiben von','Programme');
INSERT INTO "connection" VALUES(71,'Datendefinition',2,'Singnatur, Zweck, Funktionskopf');
INSERT INTO "connection" VALUES(71,'Racket','enthält','Special-Forms');
INSERT INTO "connection" VALUES(71,'(cons bzw.) list','ist entweder...','leere liste empty');
INSERT INTO "connection" VALUES(71,'Singnatur, Zweck, Funktionskopf',3,'Beispiele');
INSERT INTO "connection" VALUES(71,'Schablone',5,'Funktionsrumpf');
INSERT INTO "connection" VALUES(72,'Algorithmus','verarbeitet','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(72,'Datentyp','nutzt','Rekursion');
INSERT INTO "connection" VALUES(72,'Zusammengesetzte Daten','ermöglichen','typisierung');
INSERT INTO "connection" VALUES(72,'Definitionen','definieren','arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(72,'special form','definieren','konstante Datenbündel');
INSERT INTO "connection" VALUES(72,'Racket / Programmiersprache','ist / kann sein','Funktionale Programmierung');
INSERT INTO "connection" VALUES(72,'Funktionale Programmierung','ermöglicht','special form');
INSERT INTO "connection" VALUES(72,'Zusammengesetzte Daten','sind','konstante Datenbündel');
INSERT INTO "connection" VALUES(72,'Funktionale Programmierung','ermöglicht','Definitionen');
INSERT INTO "connection" VALUES(72,'Bäume','sind manchmal','Binärbäume');
INSERT INTO "connection" VALUES(72,'Definitionen','definieren','Bäume');
INSERT INTO "connection" VALUES(72,'Bedingete Ausdrücke','ermöglichen','Fallunterscheidung');
INSERT INTO "connection" VALUES(72,'Wörter','bestimmen','Ausgabe');
INSERT INTO "connection" VALUES(72,'Boolesche Algebra','ist eine','Algebra');
INSERT INTO "connection" VALUES(72,'Definitionen','ermöglichen','Bedingete Ausdrücke');
INSERT INTO "connection" VALUES(72,'Boolesche Algebra','hat Funktion','and');
INSERT INTO "connection" VALUES(72,'Fallunterscheidung','ermöglicht','typisierung');
INSERT INTO "connection" VALUES(72,'cons','ist ein','Datentyp');
INSERT INTO "connection" VALUES(72,'Algorithmus','liefert','Ausgabe');
INSERT INTO "connection" VALUES(72,'Algorithmus','verarbeitet','Eingabe');
INSERT INTO "connection" VALUES(72,'typisierung','benötigt','Datentyp');
INSERT INTO "connection" VALUES(72,'Bedingete Ausdrücke','benötigen','Algebra');
INSERT INTO "connection" VALUES(72,'Definitionen','haben spezialfall','special form');
INSERT INTO "connection" VALUES(72,'Bäume','haben','Knoten');
INSERT INTO "connection" VALUES(72,'Boolesche Algebra','hat funktion','not');
INSERT INTO "connection" VALUES(72,'Zusammengesetzte Daten','werden definiert durch','special form');
INSERT INTO "connection" VALUES(72,'Fallunterscheidung','wird umgesetzt durch','cond');
INSERT INTO "connection" VALUES(72,'Binärbäume','können darstellen','arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(72,'Datentyp','erfordert','Schablone');
INSERT INTO "connection" VALUES(72,'Definitionen','bilden','Algorithmus');
INSERT INTO "connection" VALUES(72,'Boolesche Algebra','hat Funktion','or');
INSERT INTO "connection" VALUES(72,'Eingabe','bestimmt','Definitionen');
INSERT INTO "connection" VALUES(72,'Bäume','ermöglichen','Traversierung');
INSERT INTO "connection" VALUES(72,'Algorithmus','nutzt','arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(72,'Racket / Programmiersprache','wertet aus','Definitionen');
INSERT INTO "connection" VALUES(72,'konstante Datenbündel','benötigen','Schablone');
INSERT INTO "connection" VALUES(72,'Wörter','Bestimmen','Eingabe');
INSERT INTO "connection" VALUES(72,'Definitionen','definieren','Wörter');
INSERT INTO "connection" VALUES(73,'Liste','ist','zusammengestzte Daten');
INSERT INTO "connection" VALUES(73,'Wertebereich','von','Funktion');
INSERT INTO "connection" VALUES(73,'Liste','ist','iterativ Definiert');
INSERT INTO "connection" VALUES(73,'Liste','Verarbeitung der Daten','Rekursion');
INSERT INTO "connection" VALUES(73,'Funktion','nach','Definitionsbereich');
INSERT INTO "connection" VALUES(73,'Datentyp','ist','Definitionsbereich');
INSERT INTO "connection" VALUES(73,'zusammengestzte Daten','enthält','Datentyp');
INSERT INTO "connection" VALUES(73,'Datentyp','ist','Wertebereich');
INSERT INTO "connection" VALUES(74,'Schritte Zum Entwurf eines Programms','besteht aus','Identifikation relevante Informationen der Aufgabenstellung,Identifikation von Eingabe und Ausgabe des Programms,Identifikation der Berechnungsvorschrift, Abbldung der Berechnungsvorschrift auf Konstrukte der Programmiersprache, Überprüfung der Korrekthei');
INSERT INTO "connection" VALUES(74,'Programm','beinhaltet','Identifikation relevante Informationen der Aufgabenstellung,Identifikation von Eingabe und Ausgabe des Programms,Identifikation der Berechnungsvorschrift, Abbldung der Berechnungsvorschrift auf Konstrukte der Programmiersprache, Überprüfung der Korrekthei');
INSERT INTO "connection" VALUES(74,'Racket','selektiert','Komponente');
INSERT INTO "connection" VALUES(74,'Student','verwendet','Hilfsfunktionen');
INSERT INTO "connection" VALUES(74,'Student','entwirft','Einfache und mehrfache Fallunterscheidungen');
INSERT INTO "connection" VALUES(74,'Student','entwirft','Programm');
INSERT INTO "connection" VALUES(74,'Student','arbeitet mit','Zahlen (number), Wahrheitswerte (boolean), symbolischen Informationen(symbole/string)');
INSERT INTO "connection" VALUES(74,'Racket','gibt nach Algorithmus aus','Parameter für Ausgaben');
INSERT INTO "connection" VALUES(74,'Racket','erkennt und verarbeitet','Arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(74,'Student','gibt ein','Funktion mit Parametern');
INSERT INTO "connection" VALUES(74,'Signatur zum Verstehen und Dokumentieren eines Programms','erläutert','Programm');
INSERT INTO "connection" VALUES(74,'Racket','ist eine','Programmiersprache der Lisp-Sprachfamilie');
INSERT INTO "connection" VALUES(74,'Racket','erkennt und wertet aus','1. Signatur, 2. Zweck, 3. Beispiele, 4. Schablonen, 5. Definition, 6. Tests');
INSERT INTO "connection" VALUES(74,'Student','entwirft und bearbeitet','1. Signatur, 2. Zweck, 3. Beispiele, 4. Schablonen, 5. Definition, 6. Tests');
INSERT INTO "connection" VALUES(74,'Parameter für Eingaben','wird eingegeben und ausgewertet','Racket');
INSERT INTO "connection" VALUES(74,'Programm','ist auch','Einfache und mehrfache Fallunterscheidungen');
INSERT INTO "connection" VALUES(74,'Programm','ist in der Sprache geschrieben','Racket');
INSERT INTO "connection" VALUES(74,'Strukturen','besteht aus','Komponente');
INSERT INTO "connection" VALUES(74,'Racket','Rechnet aus','Einfache und mehrfache Fallunterscheidungen');
INSERT INTO "connection" VALUES(74,'Programm','entsteht durch','1. Signatur, 2. Zweck, 3. Beispiele, 4. Schablonen, 5. Definition, 6. Tests');
INSERT INTO "connection" VALUES(74,'Student','erzeugt','Arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(74,'Student','definiert','Variablen');
INSERT INTO "connection" VALUES(74,'Programm','besteht aus','Arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(74,'Student','Angabe in Racket','Signatur zum Verstehen und Dokumentieren eines Programms');
INSERT INTO "connection" VALUES(74,'Racket','erkennt','Zahlen (number), Wahrheitswerte (boolean), symbolischen Informationen(symbole/string)');
INSERT INTO "connection" VALUES(74,'Arithmetische Ausdrücke','besteht aus','Zeichenvorrat(Alphabet) für arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(74,'Parameter für Ausgaben','kann dargestellt werden als','Listen');
INSERT INTO "connection" VALUES(74,'Student','arbeitet mit','Racket');
INSERT INTO "connection" VALUES(74,'Student','abarbeiten','Schritte Zum Entwurf eines Programms');
INSERT INTO "connection" VALUES(74,'Racket','konstruiert','Strukturen');
INSERT INTO "connection" VALUES(74,'Student','wählt aus','Zeichenvorrat(Alphabet) für arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(74,'Programm','beinhalten','rekursive Funktionen');
INSERT INTO "connection" VALUES(74,'Programm','ruft auf um zu starten','Funktion mit Parametern');
INSERT INTO "connection" VALUES(75,'Funktion','kann sein','unbenannte Funktion');
INSERT INTO "connection" VALUES(75,'Aussage','kann enthalten','Variablen');
INSERT INTO "connection" VALUES(75,'Funktion','benutzt','Datentyp');
INSERT INTO "connection" VALUES(75,'Liste','hat','Konstruktor');
INSERT INTO "connection" VALUES(75,'Baum','besteht aus','Kanten');
INSERT INTO "connection" VALUES(75,'Boolean','ist','Datentyp');
INSERT INTO "connection" VALUES(75,'Ausdruck','besteht aus','Ziffern');
INSERT INTO "connection" VALUES(75,'Speicherbedarf','unabhängig von','Eingabegröße');
INSERT INTO "connection" VALUES(75,'Zustandsvariablenanzahl','ist konstant','Zustandsvariablenanzahl');
INSERT INTO "connection" VALUES(75,'iterartiver Prozess','hat','Zustand');
INSERT INTO "connection" VALUES(75,'Zustand','wird beschrieben durch','Zustandsvariablenanzahl');
INSERT INTO "connection" VALUES(75,'Ausdruck','besteht aus','Liste');
INSERT INTO "connection" VALUES(75,'Funktion','kann sein','Hauptfunktion');
INSERT INTO "connection" VALUES(75,'Number','ist','Datentyp');
INSERT INTO "connection" VALUES(75,'Funktion','besteht aus','Funktion');
INSERT INTO "connection" VALUES(75,'Struktur','kann genutzt werden als','Datentyp');
INSERT INTO "connection" VALUES(75,'Funktion','kann sein','Hilfsfunktion');
INSERT INTO "connection" VALUES(75,'Baum','besteht aus','Knoten');
INSERT INTO "connection" VALUES(75,'Ausdruck','besteht aus','Hilfssymbolen');
INSERT INTO "connection" VALUES(75,'Funktion','besteht aus','Ausdruck');
INSERT INTO "connection" VALUES(75,'Integer','ist','Datentyp');
INSERT INTO "connection" VALUES(75,'Ausdruck','besteht aus','Struktur');
INSERT INTO "connection" VALUES(75,'Liste','hat','Selektor');
INSERT INTO "connection" VALUES(75,'Liste','enthält','Elemente');
INSERT INTO "connection" VALUES(75,'Ausdruck','besteht aus','Funktion');
INSERT INTO "connection" VALUES(75,'Rekursion','kann sein','endrekursive Definition');
INSERT INTO "connection" VALUES(75,'Baum','kann sein','Binärbaum');
INSERT INTO "connection" VALUES(75,'iterartiver Prozess','benutzt','Schleifen');
INSERT INTO "connection" VALUES(75,'Liste','kann enthalten','Struktur');
INSERT INTO "connection" VALUES(75,'Struktur','kann enthalten','Liste');
INSERT INTO "connection" VALUES(75,'Speicherbedarf','abhängig von','Zustandsvariablenanzahl');
INSERT INTO "connection" VALUES(75,'Aussage','hat','Wahrheitswert');
INSERT INTO "connection" VALUES(75,'endrekursive Definition','erzeugt','iterartiver Prozess');
INSERT INTO "connection" VALUES(75,'Hilfsfunktion','erhöht','Lesbarkeit');
INSERT INTO "connection" VALUES(75,'Ausdruck','besteht aus','Special forms');
INSERT INTO "connection" VALUES(75,'Funktion','kann nutzen','Rekursion');
INSERT INTO "connection" VALUES(75,'Parameter','beschreibt','Zustand');
INSERT INTO "connection" VALUES(75,'Struktur','hat','Konstruktor');
INSERT INTO "connection" VALUES(75,'Signatur','erhöht','Lesbarkeit');
INSERT INTO "connection" VALUES(75,'Rekursion','kann sein','nicht-lineare Definition');
INSERT INTO "connection" VALUES(75,'Ausdruck','kann dargestellt werden als','Baum');
INSERT INTO "connection" VALUES(75,'Racket-Programm','besteht aus','Funktion');
INSERT INTO "connection" VALUES(75,'Baum','kann haben','Teilbäume');
INSERT INTO "connection" VALUES(75,'Funktion','kann nutzen','Fallunterscheidung');
INSERT INTO "connection" VALUES(75,'Struktur','hat','Selektor');
INSERT INTO "connection" VALUES(75,'Ausdruck','besteht aus','Operatorsymbolen');
INSERT INTO "connection" VALUES(75,'Racket-Programm','hat','Signatur');
INSERT INTO "connection" VALUES(75,'Funktion','besteht aus','Parameter');
INSERT INTO "connection" VALUES(75,'String','ist','Datentyp');
INSERT INTO "connection" VALUES(75,'Liste','kann enthalten','Liste');
INSERT INTO "connection" VALUES(75,'Symbol','ist','Datentyp');
INSERT INTO "connection" VALUES(76,'Präorder-Prinzip','darstellbar als','Binärbaum');
INSERT INTO "connection" VALUES(76,'Operationen','funktionieren nach','Präorder-Prinzip');
INSERT INTO "connection" VALUES(76,'Repräsentation','ist Abstraktion von','Interpretation');
INSERT INTO "connection" VALUES(76,'Racket','verwendet Konzept','funktionale Programmierung');
INSERT INTO "connection" VALUES(76,'Programmierung','wird beschrieben durch','Baukastenprinzip');
INSERT INTO "connection" VALUES(76,'Kommunikation','ist Teil von','Programmierung');
INSERT INTO "connection" VALUES(76,'Ausdruck','besteht aus','Repräsentation');
INSERT INTO "connection" VALUES(76,'rekursiv definierte Funktion','durchläuft rekursiv','Liste');
INSERT INTO "connection" VALUES(76,'iterativ definierte Funktion','durchläuft iterativ','Liste');
INSERT INTO "connection" VALUES(76,'Programmiersprache','beinhaltet','Sonderzeichen');
INSERT INTO "connection" VALUES(76,'Kommunikation','basiert auf','Verständnis');
INSERT INTO "connection" VALUES(76,'rekursiv definierte Funktion','ruft sich selbst auf','rekursiv definierte Funktion');
INSERT INTO "connection" VALUES(76,'Funktionen','besteht aus','Ausdruck');
INSERT INTO "connection" VALUES(76,'Grammatik','beschreibt','Backus-Naur-Form');
INSERT INTO "connection" VALUES(76,'Dokumentation','trägt bei','Verständnis');
INSERT INTO "connection" VALUES(76,'Objekt','ist','Repräsentation');
INSERT INTO "connection" VALUES(76,'Objekt','ist','Interpretation');
INSERT INTO "connection" VALUES(76,'Funktionen','wird beschrieben durch','Wertebereich');
INSERT INTO "connection" VALUES(76,'Liste','speichert','Objekt');
INSERT INTO "connection" VALUES(76,'Objekt','kann sein','Struktur');
INSERT INTO "connection" VALUES(76,'Funktionen','besteht aus','Rumpf');
INSERT INTO "connection" VALUES(76,'DrRacket','wird genutzt für','Programmierung');
INSERT INTO "connection" VALUES(76,'funktionaler Baukasten','besteht aus','Programm');
INSERT INTO "connection" VALUES(76,'DrRacket','kompiliert','Racket');
INSERT INTO "connection" VALUES(76,'Operationen','lassen sich ableiten','Binärbaum');
INSERT INTO "connection" VALUES(76,'Funktionen','wird definiert durch','Definitionsbereich');
INSERT INTO "connection" VALUES(76,'Objekt','hat','Datentyp');
INSERT INTO "connection" VALUES(76,'funktionale Programmierung','ist Teil von','Programmierung');
INSERT INTO "connection" VALUES(76,'funktionaler Baukasten','besitzt kein','Variablenkonzept');
INSERT INTO "connection" VALUES(76,'Programmiersprache','beinhaltet','Schlüsselwörter');
INSERT INTO "connection" VALUES(76,'funktionaler Baukasten','besteht aus','Operationen');
INSERT INTO "connection" VALUES(76,'funktionaler Baukasten','besteht aus','Modell');
INSERT INTO "connection" VALUES(76,'Ausdruck','besteht aus','Operationen');
INSERT INTO "connection" VALUES(76,'Funktionen','besteht aus','Kopf');
INSERT INTO "connection" VALUES(76,'Programmiersprache','wird ausgewertet nach','Grammatik');
INSERT INTO "connection" VALUES(76,'iterativ definierte Funktion','ruft sich selbst auf','iterativ definierte Funktion');
INSERT INTO "connection" VALUES(76,'Racket','ist','Programmiersprache');
INSERT INTO "connection" VALUES(76,'funktionaler Baukasten','wird abgeschlossen durch','Programmstart');
INSERT INTO "connection" VALUES(76,'Programmierung','wird erstellt','Dokumentation');
INSERT INTO "connection" VALUES(76,'Operationen','wirken in','Programm');
INSERT INTO "connection" VALUES(76,'funktionale Programmierung','besteht aus','Funktionen');
INSERT INTO "connection" VALUES(76,'Datentyp','ist','Struktur');
INSERT INTO "connection" VALUES(76,'funktionaler Baukasten','ist','Baukastenprinzip');
INSERT INTO "connection" VALUES(76,'Hilfsfunktionen','kann bestehen aus','Hilfsfunktionen');
INSERT INTO "connection" VALUES(76,'Programmiersprache','beinhaltet','Literale');
INSERT INTO "connection" VALUES(76,'Rumpf','kann bestehen aus','Hilfsfunktionen');
INSERT INTO "connection" VALUES(76,'Liste','ist dynamische','Struktur');
INSERT INTO "connection" VALUES(77,'Programm','Menge von Rechenvorschriften','Funktionaler Baukasten');
INSERT INTO "connection" VALUES(77,'Modell','Lambda-Kalkül','Funktionaler Baukasten');
INSERT INTO "connection" VALUES(77,'Aufruf von Funktionen als Variable','bildet','VariablenKonzept');
INSERT INTO "connection" VALUES(77,'VariablenKonzept','Keine Behälter-Variablen','Funktionaler Baukasten');
INSERT INTO "connection" VALUES(77,'Rekursion','ermöglicht Schleifen/Listen','Funktionale Programmierung');
INSERT INTO "connection" VALUES(77,'Funktionaler Baukasten','bildet','Funktionale Programmierung');
INSERT INTO "connection" VALUES(77,'Elementare Bestandteile','Operationen','Funktionaler Baukasten');
INSERT INTO "connection" VALUES(77,'Start eines Programms','Funktionsaufruf','Funktionaler Baukasten');
INSERT INTO "connection" VALUES(78,'Datentypen','zum Beispiel','Boolsche Werte');
INSERT INTO "connection" VALUES(78,'Zusammengesetze Daten','besteht aus','Datentypen');
INSERT INTO "connection" VALUES(78,'Datentypen','zum Beispiel','Bäume');
INSERT INTO "connection" VALUES(78,'Boolsche Werte','ermöglicht','if Abfragen');
INSERT INTO "connection" VALUES(78,'ADT','sind vom Benutzer definierte','Datentypen');
INSERT INTO "connection" VALUES(78,'Datentypen','z.B.','Bäume');
INSERT INTO "connection" VALUES(78,'Bäume','Traversierungsmethoden','Auswertung/Interpretation eines arithmetischen Ausdrucks');
INSERT INTO "connection" VALUES(79,'Funktionen','manchmal definiert durch','Rekursion');
INSERT INTO "connection" VALUES(79,'Programm','wird erzeugt aus','Schablone');
INSERT INTO "connection" VALUES(79,'Programm','enthält manchmal','Struktur');
INSERT INTO "connection" VALUES(79,'Funktionen','unterteilt und vereinfacht','Hilfsfunktionen');
INSERT INTO "connection" VALUES(79,'Programm','enthält manchmal','Liste');
INSERT INTO "connection" VALUES(79,'Programm','arbeitet mit','Funktionen');
INSERT INTO "connection" VALUES(79,'Struktur','besteht aus','Funktionen');
INSERT INTO "connection" VALUES(79,'Programm','basiert auf der','Funktionale Programmierung');
INSERT INTO "connection" VALUES(79,'Liste','benötigt','Rekursion');
INSERT INTO "connection" VALUES(79,'Datenanalyse','definiert Art der','Schablone');
INSERT INTO "connection" VALUES(80,'Programm','in','Racket');
INSERT INTO "connection" VALUES(80,'Teilbaum','ist Teil von','Binärbaum');
INSERT INTO "connection" VALUES(80,'Boolesche Algebra','folgt','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Programmentwurf','führt zu','Datendefinition');
INSERT INTO "connection" VALUES(80,'Äquivalenz','ist','Junktor');
INSERT INTO "connection" VALUES(80,'Präfix','ist Art von','Notation');
INSERT INTO "connection" VALUES(80,'Implikation','ist','Junktor');
INSERT INTO "connection" VALUES(80,'Binärbaum','ausgewertet als','Inorder');
INSERT INTO "connection" VALUES(80,'Postfix','ist Art von','Notation');
INSERT INTO "connection" VALUES(80,'Programmentwurf','mithilfe','Schablone');
INSERT INTO "connection" VALUES(80,'Aussage','ohne Junktor ist','atomare Aussage');
INSERT INTO "connection" VALUES(80,'Binärbaum','besteht aus','Knoten');
INSERT INTO "connection" VALUES(80,'Programmentwurf','mithilfe','Signatur');
INSERT INTO "connection" VALUES(80,'Binärbaum','besteht aus','Kante');
INSERT INTO "connection" VALUES(80,'Lösungsansatz','führt zu','Programmentwurf');
INSERT INTO "connection" VALUES(80,'Absorptionsgesetz','ist','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Arithmetischer Ausdruck','unterschiedliche','Notation');
INSERT INTO "connection" VALUES(80,'Kommutativgesetz','ist','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Kante','verbindet','Knoten');
INSERT INTO "connection" VALUES(80,'Neutralitätsgesetz','ist','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Programmentwurf','führt zu','Funktion');
INSERT INTO "connection" VALUES(80,'Zeichenkette','arbeitet mit','symbolische Information');
INSERT INTO "connection" VALUES(80,'Knoten','ist uU','Blatt');
INSERT INTO "connection" VALUES(80,'Informatik I','beinhaltet','Funktionale Programmierung');
INSERT INTO "connection" VALUES(80,'Programmentwurf','mithilfe','Funktionsrumpf');
INSERT INTO "connection" VALUES(80,'Binärbaum','ausgewertet als','Präorder');
INSERT INTO "connection" VALUES(80,'Aussage','arbeitet mit','Boolean');
INSERT INTO "connection" VALUES(80,'Boolean','Menge der Werte der','Boolesche Algebra');
INSERT INTO "connection" VALUES(80,'Knoten','ist uU','innerer Knoten');
INSERT INTO "connection" VALUES(80,'Programmentwurf','mithilfe','Funktionskopf');
INSERT INTO "connection" VALUES(80,'Distributivgesetz','ist','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Junktor','verbindet','Aussage');
INSERT INTO "connection" VALUES(80,'Regeln von de Morgan','sind','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Knoten','ist uU','Wurzel');
INSERT INTO "connection" VALUES(80,'Datendefinition','enthalten in','Programm');
INSERT INTO "connection" VALUES(80,'Programmentwurf','mithilfe','Zweck');
INSERT INTO "connection" VALUES(80,'Problem','erfordert','Lösungsansatz');
INSERT INTO "connection" VALUES(80,'Funktion','erzeugt uU','Iterativer Prozess');
INSERT INTO "connection" VALUES(80,'Binärbaum','ausgewertet als','Postorder');
INSERT INTO "connection" VALUES(80,'Assoziativgesetz','ist','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Arithmetischer Ausdruck','arbeitet mit','Zahl');
INSERT INTO "connection" VALUES(80,'Funktion','erzeugt uU','Rekursiver Prozess');
INSERT INTO "connection" VALUES(80,'Idempotenz','ist','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Infix','ist Art von','Notation');
INSERT INTO "connection" VALUES(80,'Funktion','enthalten in','Programm');
INSERT INTO "connection" VALUES(80,'Funktionale Programmierung','enthält','Zeichenkette');
INSERT INTO "connection" VALUES(80,'Aussage','enthält','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(80,'Disjunktion','ist','Junktor');
INSERT INTO "connection" VALUES(80,'Negation','ist','Junktor');
INSERT INTO "connection" VALUES(80,'Programmentwurf','mithilfe','Beispiele');
INSERT INTO "connection" VALUES(80,'Involution','ist','Gesetz der Booleschen Algebra');
INSERT INTO "connection" VALUES(80,'Arithmetischer Ausdruck','als','Binärbaum');
INSERT INTO "connection" VALUES(80,'Funktionale Programmierung','mit','Racket');
INSERT INTO "connection" VALUES(80,'Funktionale Programmierung','enthält','Aussage');
INSERT INTO "connection" VALUES(80,'Konjunktion','ist','Junktor');
INSERT INTO "connection" VALUES(80,'Funktionale Programmierung','berechnet','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(81,'Präfix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(81,'Funktionsrumpf','enthält','Schlüsselwort');
INSERT INTO "connection" VALUES(81,'Signatur','enthält','Eingabebereich');
INSERT INTO "connection" VALUES(81,'Struktur','ist','zusammengesetzte Daten');
INSERT INTO "connection" VALUES(81,'Hilfszeichen','dient zur','Worttrennung');
INSERT INTO "connection" VALUES(81,'Baum','wird genutzt bei','Traversierung');
INSERT INTO "connection" VALUES(81,'rekursive Definition','hat','Rekursionsanker');
INSERT INTO "connection" VALUES(81,'zusammengesetzte Daten','hat','Selektor');
INSERT INTO "connection" VALUES(81,'Wort','wird erzeugt über','Alphabet');
INSERT INTO "connection" VALUES(81,'Racket','benutzt geklammerte','Präfix-Notation');
INSERT INTO "connection" VALUES(81,'arithmetischer Ausdruck','wird dargestellt in','Baum');
INSERT INTO "connection" VALUES(81,'Signatur','enthält','Programmname');
INSERT INTO "connection" VALUES(81,'rekursive Definition','hat besondere','Auswertung');
INSERT INTO "connection" VALUES(81,'arithmetischer Ausdruck','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(81,'special form','hat besondere','Auswertungsreihenfolge');
INSERT INTO "connection" VALUES(81,'Inorder','ist','Traversierung');
INSERT INTO "connection" VALUES(81,'Funktion','hat eventuell','rekursive Definition');
INSERT INTO "connection" VALUES(81,'Dokumentation','enthält','Beispiele');
INSERT INTO "connection" VALUES(81,'Teilbaum','heißt','Kind');
INSERT INTO "connection" VALUES(81,'ADT','beschreibt','Syntax');
INSERT INTO "connection" VALUES(81,'Binärbaum','ist','Baum');
INSERT INTO "connection" VALUES(81,'Liste','ist','zusammengesetzte Daten');
INSERT INTO "connection" VALUES(81,'Baum','hat','Wurzel');
INSERT INTO "connection" VALUES(81,'Knoten','wird verbunden durch','Kante');
INSERT INTO "connection" VALUES(81,'Operatorsymbol','enthalten in','Alphabet');
INSERT INTO "connection" VALUES(81,'Signatur','enthält','Ausgabebereich');
INSERT INTO "connection" VALUES(81,'Auswertung','erzeugt','Prozess');
INSERT INTO "connection" VALUES(81,'cond','ist','special form');
INSERT INTO "connection" VALUES(81,'Programm','hat','Tests');
INSERT INTO "connection" VALUES(81,'Liste','realisiert einen','ADT');
INSERT INTO "connection" VALUES(81,'Baum','hat eventuell','Teilbaum');
INSERT INTO "connection" VALUES(81,'Zahl','enthalten in','Alphabet');
INSERT INTO "connection" VALUES(81,'Funktion','hat','Funktionsrumpf');
INSERT INTO "connection" VALUES(81,'zusammengesetzte Daten','hat','Typ-Prädikat');
INSERT INTO "connection" VALUES(81,'lambda','gibt zurück','anonyme Funktion');
INSERT INTO "connection" VALUES(81,'Wort','hat','Länge');
INSERT INTO "connection" VALUES(81,'arithmetischer Ausdruck','enthält','Numeral');
INSERT INTO "connection" VALUES(81,'leeres Wort','ist','Wort');
INSERT INTO "connection" VALUES(81,'lambda','ist','special form');
INSERT INTO "connection" VALUES(81,'Funktion','hat','Wert');
INSERT INTO "connection" VALUES(81,'Dokumentation','enthält','Schablone');
INSERT INTO "connection" VALUES(81,'Racket','ist','multiparadigmisch');
INSERT INTO "connection" VALUES(81,'zusammengesetzte Daten','werden definiert in','Datendefinition');
INSERT INTO "connection" VALUES(81,'Dokumentation','enthält','Zweck');
INSERT INTO "connection" VALUES(81,'Postorder','ist','Traversierung');
INSERT INTO "connection" VALUES(81,'Numeral','repräsentiert','Zahl');
INSERT INTO "connection" VALUES(81,'ADT','unabhängig von','konkrete Realisierung');
INSERT INTO "connection" VALUES(81,'Teilbaum','wird verbunden durch','Kante');
INSERT INTO "connection" VALUES(81,'if','ist','special form');
INSERT INTO "connection" VALUES(81,'Rekursionsanker','wichtig für','Terminierung');
INSERT INTO "connection" VALUES(81,'arithmetischer Ausdruck','enthält','Operatorsymbol');
INSERT INTO "connection" VALUES(81,'rekursiver Prozess','ist','Prozess');
INSERT INTO "connection" VALUES(81,'Programm','besteht aus','Funktion');
INSERT INTO "connection" VALUES(81,'Operatorsymbol','repräsentiert','Funktion');
INSERT INTO "connection" VALUES(81,'and','ist','special form');
INSERT INTO "connection" VALUES(81,'or','ist','special form');
INSERT INTO "connection" VALUES(81,'Infix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(81,'Programm','hat','Dokumentation');
INSERT INTO "connection" VALUES(81,'Funktion','hat eventuell','Parameter');
INSERT INTO "connection" VALUES(81,'Hilfszeichen','enthalten in','Alphabet');
INSERT INTO "connection" VALUES(81,'Dokumentation','enthält','Datendefinition');
INSERT INTO "connection" VALUES(81,'define','ist','special form');
INSERT INTO "connection" VALUES(81,'Funktion','hat','Funktionskopf');
INSERT INTO "connection" VALUES(81,'rekursive Definition','hat','Rekursionsaufruf');
INSERT INTO "connection" VALUES(81,'define-struct','ist','special form');
INSERT INTO "connection" VALUES(81,'Numeral','werden verknüpft durch','Operatorsymbol');
INSERT INTO "connection" VALUES(81,'Funktionskopf','enthält','Schlüsselwort');
INSERT INTO "connection" VALUES(81,'ADT','beschreibt','Semantik');
INSERT INTO "connection" VALUES(81,'zusammengesetzte Daten','hat','Konstruktor');
INSERT INTO "connection" VALUES(81,'Dokumentation','enthält','Signatur');
INSERT INTO "connection" VALUES(81,'Wurzel','ist','Knoten');
INSERT INTO "connection" VALUES(81,'Präorder','ist','Traversierung');
INSERT INTO "connection" VALUES(81,'Funktion','hat eventuell','Hilfsfunktion');
INSERT INTO "connection" VALUES(81,'Hilfszeichen','dient zur','Strukturierung');
INSERT INTO "connection" VALUES(81,'Postfix-Notation','ist','Notation');
INSERT INTO "connection" VALUES(81,'arithmetischer Ausdruck','wird notiert in','Notation');
INSERT INTO "connection" VALUES(81,'konkateniertes Wort','ist','Wort');
INSERT INTO "connection" VALUES(81,'special form','ist ein','Schlüsselwort');
INSERT INTO "connection" VALUES(81,'Endrekursion','erzeugt','iterativer Prozess');
INSERT INTO "connection" VALUES(81,'iterativer Prozess','ist','Prozess');
INSERT INTO "connection" VALUES(82,'Fallunterscheidung','wertet aus','Variable');
INSERT INTO "connection" VALUES(82,'Listen','beinhalten','Variable');
INSERT INTO "connection" VALUES(82,'Programm','beinhaltet','Funktion');
INSERT INTO "connection" VALUES(82,'Funktion','arbeitet mit','Variable');
INSERT INTO "connection" VALUES(82,'direkte Rekursion','benötigt','Abbruchbedingung');
INSERT INTO "connection" VALUES(82,'Funktion','beinhaltet','direkte Rekursion');
INSERT INTO "connection" VALUES(82,'Funktion','nimmt entgegen','Parameter');
INSERT INTO "connection" VALUES(82,'Programm','baut auf','Syntax');
INSERT INTO "connection" VALUES(82,'Schablone','hilft bei','Funktion');
INSERT INTO "connection" VALUES(82,'Programm','erfüllt','Zweck');
INSERT INTO "connection" VALUES(82,'Programm','nutzt','Variable');
INSERT INTO "connection" VALUES(82,'Fallunterscheidung','wertet aus','Boolesche Algebra');
INSERT INTO "connection" VALUES(82,'Programm','beinhaltet','Fallunterscheidung');
INSERT INTO "connection" VALUES(83,'universeller Datentyp','ist','Datentyp');
INSERT INTO "connection" VALUES(83,'Symbol','ist','Datentyp');
INSERT INTO "connection" VALUES(83,'String','ist','Datentyp');
INSERT INTO "connection" VALUES(83,'Fallunterscheidung','benötigt','Boolean');
INSERT INTO "connection" VALUES(83,'Boolean','ist ein Teil von','Boolesche Algebra');
INSERT INTO "connection" VALUES(83,'abstrakter Datentyp','ist','Datentyp');
INSERT INTO "connection" VALUES(83,'Funktion','hat','Beispiele');
INSERT INTO "connection" VALUES(83,'Struktur','repräsentiert','Konstantes Datenbündel');
INSERT INTO "connection" VALUES(83,'Schablone','enthält','Fallunterscheidung');
INSERT INTO "connection" VALUES(83,'Funktion','hat','Signatur');
INSERT INTO "connection" VALUES(83,'Tests','sichern ab','Funktion');
INSERT INTO "connection" VALUES(83,'Fallunterscheidung','ist','special form');
INSERT INTO "connection" VALUES(83,'Schablone','enthält','Definition');
INSERT INTO "connection" VALUES(83,'Funktionsrumpf','hat mehrere','Hilfsfunktion');
INSERT INTO "connection" VALUES(83,'Zahl','ist','Datentyp');
INSERT INTO "connection" VALUES(83,'Funktionsrumpf','kann enthalten','special form');
INSERT INTO "connection" VALUES(83,'Hilfsfunktion','ist eine','Funktion');
INSERT INTO "connection" VALUES(83,'Rekursion','ruft auf','Funktion');
INSERT INTO "connection" VALUES(83,'Beispielauswertungen','verdeutlichen','Zweck');
INSERT INTO "connection" VALUES(83,'Funktion','erfüllt','Zweck');
INSERT INTO "connection" VALUES(83,'Schablone','Vorläufer von','Funktionsrumpf');
INSERT INTO "connection" VALUES(83,'Liste','ist','abstrakter Datentyp');
INSERT INTO "connection" VALUES(83,'Prozess','erstellt','Funktion');
INSERT INTO "connection" VALUES(83,'Tests','enthalten','Beispielauswertungen');
INSERT INTO "connection" VALUES(83,'abstrakter Datentyp','ist','special form');
INSERT INTO "connection" VALUES(83,'Struktur','ist','special form');
INSERT INTO "connection" VALUES(83,'Boolean','ist','Datentyp');
INSERT INTO "connection" VALUES(83,'Rekursion','benötigt','Terminierung');
INSERT INTO "connection" VALUES(83,'Prozess','ist entweder','rekursiver Prozess');
INSERT INTO "connection" VALUES(83,'Beispiele','enthalten','Beispielauswertungen');
INSERT INTO "connection" VALUES(83,'Prozess','oder','iterativer Prozess');
INSERT INTO "connection" VALUES(83,'Lambda Kalkül','ist','universeller Datentyp');
INSERT INTO "connection" VALUES(84,'induktive Definition','Basiselement bei der induktiven entspricht dem Rekursionsanker der rekursiven Definition','Basiselement/Rekursionsanker');
INSERT INTO "connection" VALUES(84,'Rekursion','kann darstellen','rekursiver Prozess');
INSERT INTO "connection" VALUES(84,'Funktions- und Leistungsüberprüfung','erfüllt Programm Vorgaben/Aufgabe?','Tests');
INSERT INTO "connection" VALUES(84,'Funktion','Auswertung von','Ausdruck');
INSERT INTO "connection" VALUES(84,'Rekursion','MUSS bei Gültigkeit darauf hinauslaufen','Basiselement/Rekursionsanker');
INSERT INTO "connection" VALUES(84,'Zusammengesetzte Daten','Erstellung','Konstruktor (make-sname)');
INSERT INTO "connection" VALUES(84,'Rekursion','kann darstellen','iterativer Prozess');
INSERT INTO "connection" VALUES(84,'Fallunterscheidung','Jeden Fall abschließend implementieren','Implementierung');
INSERT INTO "connection" VALUES(84,'Induktionsanfang','Induktion gilt bei Gültigkeit immer bis zu dem n','Induktionsvoraussetzung');
INSERT INTO "connection" VALUES(84,'Zusammengesetzte Daten','Passende Bearbeitung eines Datenbündels','Absicherung');
INSERT INTO "connection" VALUES(84,'Rekursion','kann sein','nicht-linear rekursiv');
INSERT INTO "connection" VALUES(84,'Entwurf','Passende Variablenbezeichnung wählen','Funktionskopf');
INSERT INTO "connection" VALUES(84,'Induktionsvoraussetzung','Aussage gilt bis zu einem bestimmten n','vollständige Induktion');
INSERT INTO "connection" VALUES(84,'Problemanalyse','welche Daten sollten gebündelt werden?','Datenanalyse und -definition');
INSERT INTO "connection" VALUES(84,'Listen','leicht verarbeitbar mittels','Rekursion');
INSERT INTO "connection" VALUES(84,'define','Definition einer Funktion','Funktion');
INSERT INTO "connection" VALUES(84,'Programm','Auswertung von','Funktion');
INSERT INTO "connection" VALUES(84,'Teilausdruck/-ausdruecke','ggf. Auswertung von','Funktion');
INSERT INTO "connection" VALUES(84,'Entwurf','gewünschte Funktionalität beschreiben','Zweck');
INSERT INTO "connection" VALUES(84,'Induktionsanfang','Beweis für (gewollt-)kleinstes n','vollständige Induktion');
INSERT INTO "connection" VALUES(84,'iterativer Prozess','rekursiv definiert und iterativer Prozess','endrekursiv');
INSERT INTO "connection" VALUES(84,'Induktionsschritt','Beweis für alle weiteren n','vollständige Induktion');
INSERT INTO "connection" VALUES(84,'Software Life Cycle','Schritt 1','Problemanalyse');
INSERT INTO "connection" VALUES(84,'Schablone','Vorlage ggf. nutzen','Implementierung');
INSERT INTO "connection" VALUES(84,'Problemanalyse','Eingabe- und Ausgabetypen festlegen','Signatur');
INSERT INTO "connection" VALUES(84,'Entwurf','Spezifikation der Auswertung','Beispiele');
INSERT INTO "connection" VALUES(84,'Software Life Cycle','Schritt 4','Funktions- und Leistungsüberprüfung');
INSERT INTO "connection" VALUES(84,'Tests','Vorgaben erfüllt? Sonst Wartung','Implementierung');
INSERT INTO "connection" VALUES(84,'Datenanalyse und -definition','Voraussetzungen für das Auswerten von Daten','Absicherung');
INSERT INTO "connection" VALUES(84,'Zusammengesetzte Daten','Auswahl eines Argumentes','Selektor (sname-arg)');
INSERT INTO "connection" VALUES(84,'Semantik','sinnvoller Ausdruck?','Ausdruck');
INSERT INTO "connection" VALUES(84,'Zusammengesetzte Daten','kann aufweisen','Datendefinition mit Selbstbezug');
INSERT INTO "connection" VALUES(84,'Listen','Bearbeitung der Daten einer Liste','map');
INSERT INTO "connection" VALUES(84,'Beispiele','Beispiele sollten geprüft werden','Tests');
INSERT INTO "connection" VALUES(84,'Software Life Cycle','Schritt 3','Implementierung');
INSERT INTO "connection" VALUES(84,'Datendefinition mit Selbstbezug','Benötigt einen Basisfall','Basiselement/Rekursionsanker');
INSERT INTO "connection" VALUES(84,'Syntax','gültiger Ausdruck?','Ausdruck');
INSERT INTO "connection" VALUES(84,'Software Life Cycle','Schritt 2','Entwurf');
INSERT INTO "connection" VALUES(84,'define-struct','...mitsamt Parametern','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(84,'Beispiele','Für jeden möglichen Fall mind. ein Beispiel','Fallunterscheidung');
INSERT INTO "connection" VALUES(84,'Listen','(bestimmte) Listen: immer Selbstbezug','Datendefinition mit Selbstbezug');
INSERT INTO "connection" VALUES(84,'Ausdruck','besteht aus','Teilausdruck/-ausdruecke');
INSERT INTO "connection" VALUES(84,'Listen','Verarbeitung der Daten einer Liste','foldr');
INSERT INTO "connection" VALUES(84,'Datenanalyse und -definition','Definition eines konstanten Datenbündels...','define-struct');
INSERT INTO "connection" VALUES(84,'Abstrakter Datentyp','Gibt Vorgaben','Programm');
INSERT INTO "connection" VALUES(84,'Rekursion','kann sein','linear rekursiv');
INSERT INTO "connection" VALUES(84,'Funktion','Funktion kann rekursiv DEFINIERT sein','Rekursion');
INSERT INTO "connection" VALUES(84,'Zusammengesetzte Daten','Zugriffsbeschreibung für die verschiedenen Argumente','Schablone');
INSERT INTO "connection" VALUES(84,'Programm','Erstellt nach','Software Life Cycle');
INSERT INTO "connection" VALUES(84,'vollständige Induktion','stellt fest, ob eine Funktion induktiv definiert ist','induktive Definition');
INSERT INTO "connection" VALUES(84,'Absicherung','sollte auf Datentypen abgesichert sein','Funktion');
INSERT INTO "connection" VALUES(85,'Notationen','Variante 2','Präfix-Notation');
INSERT INTO "connection" VALUES(85,'Boolsche Algebra','haben','Verknüpfungen');
INSERT INTO "connection" VALUES(85,'Fallunterscheindungen','in','Mehrfach');
INSERT INTO "connection" VALUES(85,'Kapitel 3','enthält','Boolsche Algebra');
INSERT INTO "connection" VALUES(85,'Erzeugte Prozesse','iterativ','konstante Anzahl an Zustandsvariablen');
INSERT INTO "connection" VALUES(85,'Abstrakte Datentypen','ist z.B.','Pair und List');
INSERT INTO "connection" VALUES(85,'Kapitel 6','enthält','rekursiv definierte Funktion');
INSERT INTO "connection" VALUES(85,'Kapitel 3','enthält','Fallunterscheindungen');
INSERT INTO "connection" VALUES(85,'arithmetischer Ausdruck','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(85,'Kapitel 4','enthält','Definition strukturierte Daten');
INSERT INTO "connection" VALUES(85,'Grundlagen der Programmierung','beinhaltet','Kapitel 2');
INSERT INTO "connection" VALUES(85,'Präfix-Notation','gelesen','wie in Racket');
INSERT INTO "connection" VALUES(85,'Verknüpfungen','Möglichkeit 4','nand');
INSERT INTO "connection" VALUES(85,'Grundlagen der Programmierung','beinhaltet','Kapitel 4');
INSERT INTO "connection" VALUES(85,'Arithmetische Ausdrücke auswerten','durch','Notationen');
INSERT INTO "connection" VALUES(85,'Notationen','Variante 3','Postfix-Notation');
INSERT INTO "connection" VALUES(85,'Verknüpfungen','Möglichkeit 2','or');
INSERT INTO "connection" VALUES(85,'Verknüpfungen','Möglichkeit 3','nor');
INSERT INTO "connection" VALUES(85,'Kapitel 5','enthält','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(85,'Zusammengesetze Daten','in Racket','Strukturdefinition');
INSERT INTO "connection" VALUES(85,'rekursiv definierte Funktion','hat','Terminierung');
INSERT INTO "connection" VALUES(85,'Definition strukturierte Daten','hat','Konstruktor');
INSERT INTO "connection" VALUES(85,'Kapitel 5','enthält','Datentypen und Wertebereiche');
INSERT INTO "connection" VALUES(85,'Notationen','Variante 1','Infix-Notation');
INSERT INTO "connection" VALUES(85,'arithmetischer Ausdruck','enthält','Numeral');
INSERT INTO "connection" VALUES(85,'Boolsche Algebra','basiert auf','Gesetzten');
INSERT INTO "connection" VALUES(85,'Grundlagen der Programmierung','beinhaltet','Kapitel 3');
INSERT INTO "connection" VALUES(85,'Infix-Notation','gelesen','normale mathematische Schreibweise');
INSERT INTO "connection" VALUES(85,'Kapitel 2','enthält','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(85,'Verknüpfungen','Möglichkeit 1','and');
INSERT INTO "connection" VALUES(85,'Zusammengesetze Daten','umgangssprachlich','Datendefinition');
INSERT INTO "connection" VALUES(85,'arithmetischer Ausdruck','enthält','Operatorsymbol');
INSERT INTO "connection" VALUES(85,'arithmetischer Ausdruck','auswerten','Arithmetische Ausdrücke auswerten');
INSERT INTO "connection" VALUES(85,'Postfix-Notation','gelesen','umgekehrt wie in Racket');
INSERT INTO "connection" VALUES(85,'Definition strukturierte Daten','hat','Typ-Prädikat');
INSERT INTO "connection" VALUES(85,'Fallunterscheindungen','in','Einfach');
INSERT INTO "connection" VALUES(85,'Abstrakte Datentypen','hat','Syntax und Semantik');
INSERT INTO "connection" VALUES(85,'Kapitel 6','enthält','Erzeugte Prozesse');
INSERT INTO "connection" VALUES(85,'Erzeugte Prozesse','rekursiv','Aufschieben von Operationen');
INSERT INTO "connection" VALUES(85,'Datentypen und Wertebereiche','Bildung','kartesische Produkt');
INSERT INTO "connection" VALUES(85,'Kapitel 4','enthält','Zusammengesetze Daten');
INSERT INTO "connection" VALUES(85,'Grundlagen der Programmierung','beinhaltet','Kapitel 6');
INSERT INTO "connection" VALUES(85,'Grundlagen der Programmierung','beinhaltet','Kapitel 5');
INSERT INTO "connection" VALUES(85,'Datentypen und Wertebereiche','konstruktion von','Wertebereichen');
INSERT INTO "connection" VALUES(85,'Definition strukturierte Daten','hat','Selektor');
INSERT INTO "connection" VALUES(86,'Prozess','erstellt','Funktion');
INSERT INTO "connection" VALUES(86,'Liste','ist','Abstrakter Datentyp');
INSERT INTO "connection" VALUES(86,'Wahrheitswert','ist Teil von','Boolesche Algebra');
INSERT INTO "connection" VALUES(86,'Struktur','definiert','Konstantes Datenbündel');
INSERT INTO "connection" VALUES(86,'Prozess','ist entweder','rekursiver Prozess');
INSERT INTO "connection" VALUES(86,'Rekursion','braucht','Terminierung');
INSERT INTO "connection" VALUES(86,'Prozess','oder','iterativer Prozess');
INSERT INTO "connection" VALUES(86,'Zahl','ist','Datentyp');
INSERT INTO "connection" VALUES(86,'Funktion','sollte haben','Zweck');
INSERT INTO "connection" VALUES(86,'Hilfsfunktion','ist eine','Funktion');
INSERT INTO "connection" VALUES(86,'Rekursion','ruft auf','Funktion');
INSERT INTO "connection" VALUES(86,'Abstrakter Datentyp','ist','Special form');
INSERT INTO "connection" VALUES(86,'Schablone','enthält','Fallunterscheidung');
INSERT INTO "connection" VALUES(86,'Funktion','hat','Beispiele');
INSERT INTO "connection" VALUES(86,'Funktion','hat','Funktionsrumpf');
INSERT INTO "connection" VALUES(86,'Liste','realisiert durch','Rekursion');
INSERT INTO "connection" VALUES(86,'Funktion','hat','Signatur');
INSERT INTO "connection" VALUES(86,'Funktionsrumpf','definiert','Rekursion');
INSERT INTO "connection" VALUES(86,'Abstrakter Datentyp','ist','Datentyp');
INSERT INTO "connection" VALUES(86,'Symbol','ist','Datentyp');
INSERT INTO "connection" VALUES(86,'Fallunterscheidung','ist','Special form');
INSERT INTO "connection" VALUES(86,'Funktionsrumpf','sollte haben','Hilfsfunktion');
INSERT INTO "connection" VALUES(86,'Fallunterscheidung','benötigt','Wahrheitswert');
INSERT INTO "connection" VALUES(86,'Boolesche Algebra','ist ein','Datentyp');
INSERT INTO "connection" VALUES(86,'Struktur','ist','Special form');
INSERT INTO "connection" VALUES(86,'Schablone','ist Vorläufer von','Funktionsrumpf');
INSERT INTO "connection" VALUES(86,'Beispiele','verdeutlicht','Zweck');
INSERT INTO "connection" VALUES(86,'Funktionsrumpf','kann enthalten','Special form');
INSERT INTO "connection" VALUES(87,'Programm (define)','bearbeitet / liest aus','Datenbündel');
INSERT INTO "connection" VALUES(87,'Programm (define)','benutzt','Fallunterscheidung');
INSERT INTO "connection" VALUES(87,'Elementare Bestandteile','beinhaltet','Rekursion');
INSERT INTO "connection" VALUES(87,'Funktionale Programmierung','beinhaltet','Allgemeines Modell');
INSERT INTO "connection" VALUES(87,'Funktionale Programmierung','beinhaltet','Programm (define)');
INSERT INTO "connection" VALUES(87,'Elementare Bestandteile','beinhaltet','Operatoren');
INSERT INTO "connection" VALUES(87,'Funktionale Programmierung','benutzt','Elementare Bestandteile');
INSERT INTO "connection" VALUES(87,'Programm (define)','bearbeitet / liest / benutzt','Werte');
INSERT INTO "connection" VALUES(87,'Programm (define)','verwendet','Elementare Bestandteile');
INSERT INTO "connection" VALUES(87,'Programm (define)','Selbstbezug','Programm (define)');
INSERT INTO "connection" VALUES(87,'Fallunterscheidung','liest aus','Werte');
INSERT INTO "connection" VALUES(87,'Datenbündel','bearbeitet / liest aus','Programm (define)');
INSERT INTO "connection" VALUES(87,'Werteunterscheidung','überprüft','Werte');
INSERT INTO "connection" VALUES(87,'Programm (define)','bearbeitet / liest aus','Listen');
INSERT INTO "connection" VALUES(87,'Datenbündel','Vorlage für neue Datenbündel','Datenbündel');
INSERT INTO "connection" VALUES(87,'Listen','bearbeitet / liest aus','Programm (define)');
INSERT INTO "connection" VALUES(88,'mehrfache Fallunterscheidung','mit','cond-Ausdruck');
INSERT INTO "connection" VALUES(88,'Bedingte Ausdrücke und Funktionen','beinhaltet','Fallunterscheidung');
INSERT INTO "connection" VALUES(88,'Funktionen','sind z. B.','Hilsfunktionen');
INSERT INTO "connection" VALUES(88,'Datentyp','ist eine','Menge von Werten und Menge von Operationen');
INSERT INTO "connection" VALUES(88,'Abstrakte Datentypen','beispielsweise','ADT List');
INSERT INTO "connection" VALUES(88,'Aussagen','verbindbar durch','Junktoren');
INSERT INTO "connection" VALUES(88,'Fallunterscheidung','sind','mehrfache Fallunterscheidung');
INSERT INTO "connection" VALUES(88,'Programme','enthält','Variablen');
INSERT INTO "connection" VALUES(88,'Baum','ausgewertet durch','Traversierung');
INSERT INTO "connection" VALUES(88,'Funktionen','angeben','Signatur, Zweck und Funktionskopf');
INSERT INTO "connection" VALUES(88,'Fallunterscheidung','sind','einfache Fallunterscheidung');
INSERT INTO "connection" VALUES(88,'Fallunterscheidung','beinhaltet','Aussagen');
INSERT INTO "connection" VALUES(88,'Aussagen','hat','Wahrheitswerte');
INSERT INTO "connection" VALUES(88,'Zusammengesetzte Daten','haben ein','Typ-Prädikat');
INSERT INTO "connection" VALUES(88,'Auswertung','erzeugt mölicherweise einen','iterativer Prozess');
INSERT INTO "connection" VALUES(88,'Datentyp','ist eine','Liste');
INSERT INTO "connection" VALUES(88,'Zusammengesetzte Daten','haben einen','Konstruktor');
INSERT INTO "connection" VALUES(88,'Zusammengesetzte Daten','bestehen aus','Strukturdefinition');
INSERT INTO "connection" VALUES(88,'Funktionen','erstellen','Beispiele');
INSERT INTO "connection" VALUES(88,'Zusammengesetzte Daten','haben einen','Selektor');
INSERT INTO "connection" VALUES(88,'Datentyp','ist ein','spezifizierter Datentyp');
INSERT INTO "connection" VALUES(88,'rekursiv definierte Funktionen','sind','linear rekursiv');
INSERT INTO "connection" VALUES(88,'Abstrakte Datentypen','beispielsweise','ADT Pair');
INSERT INTO "connection" VALUES(88,'Liste','können sein','Parameter');
INSERT INTO "connection" VALUES(88,'rekursiv definierte Funktionen','haben eine','Auswertung');
INSERT INTO "connection" VALUES(88,'Funktionsrumpf','kann beinhalten','Arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(88,'Funktionsrumpf','kann beinhalten','Fallunterscheidung');
INSERT INTO "connection" VALUES(88,'Funktionale Programmierung','beinhaltet','rekursiv definierte Funktionen');
INSERT INTO "connection" VALUES(88,'Zusammengesetzte Daten','bestehen aus','Datendefinition');
INSERT INTO "connection" VALUES(88,'rekursiv definierte Funktionen','sind','nicht-linear rekursiv');
INSERT INTO "connection" VALUES(88,'Zusammengesetzte Daten','sind','Konstante Datenbündel');
INSERT INTO "connection" VALUES(88,'Arithmetische Ausdrücke','dargestellt in einem','Baum');
INSERT INTO "connection" VALUES(88,'Funktionale Programmierung','beinhaltet','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(88,'Funktionen','erstellen','Funktionsrumpf');
INSERT INTO "connection" VALUES(88,'spezifizierter Datentyp','enthält','Signatur');
INSERT INTO "connection" VALUES(88,'rekursiv definierte Funktionen','können','terminieren');
INSERT INTO "connection" VALUES(88,'Funktionale Programmierung','beinhaltet','Datentyp');
INSERT INTO "connection" VALUES(88,'Funktionale Programmierung','kann beinhalten','Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(88,'Auswertung','erzeugt mölicherweise einen','rekursiver Prozess');
INSERT INTO "connection" VALUES(88,'Funktionen','sind z. B.','rekursiv definierte Funktionen');
INSERT INTO "connection" VALUES(88,'spezifizierter Datentyp','enthält','Syntax');
INSERT INTO "connection" VALUES(88,'Funktionale Programmierung','beinhaltet','Bedingte Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(88,'Ausdrücke und Funktionen','entwerfen','Programme');
INSERT INTO "connection" VALUES(88,'einfache Fallunterscheidung','mit','if-Ausdruck');
INSERT INTO "connection" VALUES(88,'Programme','enthält','Funktionen');
INSERT INTO "connection" VALUES(88,'Funktionen','überprüfen','Funktionsweise');
INSERT INTO "connection" VALUES(88,'Funktionale Programmierung','b','Bedingte Ausdrücke und Funktionen');
INSERT INTO "connection" VALUES(88,'Liste','können sein','Rückgabewerte');
INSERT INTO "connection" VALUES(88,'Datentyp','Vorschreiben von Verhalten ohne Bezug zu konkreter Implementierung','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(88,'Fallunterscheidung','durchführen','Datenanalyse');
INSERT INTO "connection" VALUES(89,'Boolsche Algebra','definiert auf','Wahrheitswerte');
INSERT INTO "connection" VALUES(89,'Fallunterscheidungen','benutzen','Wahrheitswerte');
INSERT INTO "connection" VALUES(89,'Funktionale Programmierung','basiert auf','arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(89,'Abstrakte Datentypen','besteht aus','Menge von Werten');
INSERT INTO "connection" VALUES(89,'Funktionale Programmierung','nutzt','zusammengesetzte Daten');
INSERT INTO "connection" VALUES(89,'nicht-linear rekursive Funktion','sind','rekursive Ausdrücke');
INSERT INTO "connection" VALUES(89,'Funktionale Programmierung','ermöglicht','rekursive Ausdrücke');
INSERT INTO "connection" VALUES(89,'Strukturen zur Objektbeschreibung mit mehreren Komponenten','beschrieben durch','konstante Datenbündel');
INSERT INTO "connection" VALUES(89,'arithmetische Ausdrücke','darstellbar als','Baum');
INSERT INTO "connection" VALUES(89,'bedingte Ausdrücke','bestehen aus','arithmetische Ausdrücke');
INSERT INTO "connection" VALUES(89,'Abstrakte Datentypen','erlauben','Verhaltensvorschrift ohne Bezug zu konkreter Realisierung');
INSERT INTO "connection" VALUES(89,'Hilfsfunktionen','vereinfachen','Entwurf und Lesbarkeit');
INSERT INTO "connection" VALUES(89,'konstante Datenbündel','sind eine Art konstanter','Funktionen');
INSERT INTO "connection" VALUES(89,'Listen','sind Realisierung von','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(89,'Variablen','sind konstante','Funktionen');
INSERT INTO "connection" VALUES(89,'Funktionale Programmierung','betrachtet','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(89,'arithmetische Ausdrücke','rufen auf','Funktionen');
INSERT INTO "connection" VALUES(89,'Hilfsfunktionen','sind','Funktionen');
INSERT INTO "connection" VALUES(89,'Entwurf und Lesbarkeit','von','Programme');
INSERT INTO "connection" VALUES(89,'endrekursive Prozesse','sind','rekursive Ausdrücke');
INSERT INTO "connection" VALUES(89,'Variablen','vereinfachen','Entwurf und Lesbarkeit');
INSERT INTO "connection" VALUES(89,'endrekursive Prozesse','werten aus zu','iterative Prozesse');
INSERT INTO "connection" VALUES(89,'Listen','ermöglichen','Datendefinitionen und Funktionen mit Selbstbezug');
INSERT INTO "connection" VALUES(89,'Abstrakte Datentypen','besteht aus','Menge von Operationen');
INSERT INTO "connection" VALUES(89,'Programme','verwenden und werden nach Def. verwendet als','Funktionen');
INSERT INTO "connection" VALUES(89,'linear rekursive Funktion','sind','rekursive Ausdrücke');
INSERT INTO "connection" VALUES(89,'bedingte Ausdrücke','beschrieben durch','Fallunterscheidungen');
INSERT INTO "connection" VALUES(89,'Menge von Operationen','definiert auf','Menge von Werten');
INSERT INTO "connection" VALUES(89,'zusammengesetzte Daten','sind','Strukturen zur Objektbeschreibung mit mehreren Komponenten');
INSERT INTO "connection" VALUES(89,'Funktionale Programmierung','verwendet','bedingte Ausdrücke');
INSERT INTO "connection" VALUES(90,'Fallunterscheidung','einfach oder mehrfach','Funktion');
INSERT INTO "connection" VALUES(90,'Funktion','als','Binärbaum');
INSERT INTO "connection" VALUES(90,'Funktion','.','Listen');
INSERT INTO "connection" VALUES(90,'Variablen','statt Konstanten','Funktion');
INSERT INTO "connection" VALUES(90,'Listen','als','Parameter und Rückgabewerte');
INSERT INTO "connection" VALUES(90,'Arithmetischer Ausdruck','hat immer','Binärbaum');
INSERT INTO "connection" VALUES(90,'Funktion','müssen nicht realisiert werden','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(90,'Schablone','individuell bearbeitbar','Funktion');
INSERT INTO "connection" VALUES(90,'Rekursive Definition','Selbstbezug','Funktion');
INSERT INTO "connection" VALUES(90,'Hilfsfunktion','für bessere Übersicht','Funktion');
INSERT INTO "connection" VALUES(90,'Listen','für','strukturierte Daten');
INSERT INTO "connection" VALUES(91,'abstrakter Datentyp','schreibt nicht vor','Realisierung');
INSERT INTO "connection" VALUES(91,'M','enthält','Ausgabe');
INSERT INTO "connection" VALUES(91,'arithmetischer Ausdruck','enthält','Hilfssymbole');
INSERT INTO "connection" VALUES(91,'bedingter Ausdruck','enthält','Operatoren');
INSERT INTO "connection" VALUES(91,'Maschine','verarbeitet','Information');
INSERT INTO "connection" VALUES(91,'Informatik','beschäftigt sich mit','Berechenbarkeit');
INSERT INTO "connection" VALUES(91,'Programm','besteht aus','Ausdruck');
INSERT INTO "connection" VALUES(91,'Hilfsfunktion','liefert','Konstistenz');
INSERT INTO "connection" VALUES(91,'Auswertung','hat','Auswertungsreihenfolge');
INSERT INTO "connection" VALUES(91,'Racket Programm','enthält','Schablone');
INSERT INTO "connection" VALUES(91,'Programm','besteht aus','Funktion');
INSERT INTO "connection" VALUES(91,'Racket Programm','enthält','Tests');
INSERT INTO "connection" VALUES(91,'Racket','erstellt','Racket Programm');
INSERT INTO "connection" VALUES(91,'Baum','besteht aus und ist','Teilbaum');
INSERT INTO "connection" VALUES(91,'Abstraktion','erlaubt','Modellierung');
INSERT INTO "connection" VALUES(91,'Teilbaum','hat','Wurzel');
INSERT INTO "connection" VALUES(91,'Funktion','hat','Wert');
INSERT INTO "connection" VALUES(91,'Informatik','"entschlüsselt"','Informationssystem');
INSERT INTO "connection" VALUES(91,'M','enthält','Eingabe');
INSERT INTO "connection" VALUES(91,'Funktion','gibt aus','Ausgabe');
INSERT INTO "connection" VALUES(91,'bedingter Ausdruck','enthält','Wahrheitswert');
INSERT INTO "connection" VALUES(91,'abstrakter Datentyp','definiert','Semantik');
INSERT INTO "connection" VALUES(91,'Typ-Prädikat','untersucht auf Typ','strukturierte Daten');
INSERT INTO "connection" VALUES(91,'Objektoriertierung','gehört zu','Prädikative Programmierung');
INSERT INTO "connection" VALUES(91,'Datentyp','enthält Menge von','Operation');
INSERT INTO "connection" VALUES(91,'Repräsentation','steht für','Information');
INSERT INTO "connection" VALUES(91,'Fallunterscheidung','beeinflusst','Auswertungsreihenfolge');
INSERT INTO "connection" VALUES(91,'Eingabe','ist','Wert');
INSERT INTO "connection" VALUES(91,'Baum','liefert','Auswertung');
INSERT INTO "connection" VALUES(91,'Fallunterscheidung','hängt ab von','bedingter Ausdruck');
INSERT INTO "connection" VALUES(91,'Wort','ist','Ausdruck');
INSERT INTO "connection" VALUES(91,'Von-Neumann Rechner','ist','Maschine');
INSERT INTO "connection" VALUES(91,'Hilfsfunktion','ist','Funktion');
INSERT INTO "connection" VALUES(91,'Funktion','ist','Ausdruck');
INSERT INTO "connection" VALUES(91,'Menge','besteht aus','Wert');
INSERT INTO "connection" VALUES(91,'Traversierung','durchläuft','Baum');
INSERT INTO "connection" VALUES(91,'Interpretation','"entschlüsselt"','Repräsentation');
INSERT INTO "connection" VALUES(91,'abstrakter Datentyp','schreibt vor','Verhalten');
INSERT INTO "connection" VALUES(91,'Modellierung','bildet ab','Daten');
INSERT INTO "connection" VALUES(91,'Auswertung','ermittelt','Wert');
INSERT INTO "connection" VALUES(91,'Informationssystem','verwaltet, speichert, versendet','Information');
INSERT INTO "connection" VALUES(91,'Problem','wird untersucht auf','Berechenbarkeit');
INSERT INTO "connection" VALUES(91,'Imperative Programmierung','ist','Paradigmen');
INSERT INTO "connection" VALUES(91,'Alphabet','bestimmt','Zeichen');
INSERT INTO "connection" VALUES(91,'Interpretation','liefert','Information');
INSERT INTO "connection" VALUES(91,'Konstruktor','erzeugt','strukturierte Daten');
INSERT INTO "connection" VALUES(91,'boolesche Algebra','ist','Algebra');
INSERT INTO "connection" VALUES(91,'Baum','besteht aus','Wurzel');
INSERT INTO "connection" VALUES(91,'Hilfsfunktion','liefert','Wartbarkeit');
INSERT INTO "connection" VALUES(91,'Turing Maschine','ist','Maschine');
INSERT INTO "connection" VALUES(91,'bedingter Ausdruck','ist','Ausdruck');
INSERT INTO "connection" VALUES(91,'Informatik','beschäftigt sich mit','Modellierung');
INSERT INTO "connection" VALUES(91,'Ausgabe','ist','Wert');
INSERT INTO "connection" VALUES(91,'Racket Programm','enthält','Zweck');
INSERT INTO "connection" VALUES(91,'Repräsentation','stellt dar','Abstraktion');
INSERT INTO "connection" VALUES(91,'abstrakter Datentyp','definiert','Syntax');
INSERT INTO "connection" VALUES(91,'Wort','enthält','Zeichen');
INSERT INTO "connection" VALUES(91,'arithmetischer Ausdruck','ist','Ausdruck');
INSERT INTO "connection" VALUES(91,'Selektor','wählt aus','strukturierte Daten');
INSERT INTO "connection" VALUES(91,'Selektor','gehört zu','Strukturdefinitionen');
INSERT INTO "connection" VALUES(91,'Datendefinitionen','definiert umgangssprachlich','zusammengesetzte Daten');
INSERT INTO "connection" VALUES(91,'Länge','hat','Wort');
INSERT INTO "connection" VALUES(91,'Informatik','strukuriert, abstrahiert, löst','Problem');
INSERT INTO "connection" VALUES(91,'Racket Programm','enthält','Beispiele');
INSERT INTO "connection" VALUES(91,'Programmierung','löst','Problem');
INSERT INTO "connection" VALUES(91,'strukturierte Daten','sind','Daten');
INSERT INTO "connection" VALUES(91,'Typ-Prädikat','gehört zu','Strukturdefinitionen');
INSERT INTO "connection" VALUES(91,'Strukturdefinitionen','definiert in Racket','zusammengesetzte Daten');
INSERT INTO "connection" VALUES(91,'Algebra','enthält','M');
INSERT INTO "connection" VALUES(91,'Racket','orientiert sich an','Funktionale Programmierung');
INSERT INTO "connection" VALUES(91,'Modellierung','bildet ab','Ablauf');
INSERT INTO "connection" VALUES(91,'Datentyp','enthält Menge von','Wert');
INSERT INTO "connection" VALUES(91,'M','ist','Menge');
INSERT INTO "connection" VALUES(91,'Prädikative Programmierung','ist','Paradigmen');
INSERT INTO "connection" VALUES(91,'Programmierung','liefert','Programm');
INSERT INTO "connection" VALUES(91,'abstrakter Datentyp','ist','Datentyp');
INSERT INTO "connection" VALUES(91,'Racket Programm','enthält','Definition');
INSERT INTO "connection" VALUES(91,'Konstruktor','gehört zu','Strukturdefinitionen');
INSERT INTO "connection" VALUES(91,'Maschine','hat','Zustand');
INSERT INTO "connection" VALUES(91,'zusammengesetzte Daten','sind','strukturierte Daten');
INSERT INTO "connection" VALUES(91,'Daten','sind','Information');
INSERT INTO "connection" VALUES(91,'Operation','ist definiert auf','Wert');
INSERT INTO "connection" VALUES(91,'List','ist','abstrakter Datentyp');
INSERT INTO "connection" VALUES(91,'arithmetischer Ausdruck','enthält','Operatoren');
INSERT INTO "connection" VALUES(91,'Racket Programm','ist','Programm');
INSERT INTO "connection" VALUES(91,'Maschine','wird untersucht auf','Berechenbarkeit');
INSERT INTO "connection" VALUES(91,'Funktionale Programmierung','ist','Paradigmen');
INSERT INTO "connection" VALUES(91,'Funktion','bildet ab','Eingabe');
INSERT INTO "connection" VALUES(91,'arithmetischer Ausdruck','enthält','Numerale');
INSERT INTO "connection" VALUES(91,'Racket Programm','enthält','Signatur');
INSERT INTO "connection" VALUES(91,'Wertebereich','definiert','Wert');
INSERT INTO "connection" VALUES(91,'Prädikat','ist äquivalent zu','bedingter Ausdruck');
INSERT INTO "connection" VALUES(91,'Algebra','enthält','Funktion');
INSERT INTO "connection" VALUES(91,'Modellierung','abstrahiert','Problem');
INSERT INTO "connection" VALUES(91,'Pair','ist','abstrakter Datentyp');
INSERT INTO "connection" VALUES(91,'Programmierung','orientiert sich an','Paradigmen');
INSERT INTO "connection" VALUES(91,'Programmierung','setzt um','Modellierung');
INSERT INTO "connection" VALUES(91,'Hilfsfunktion','liefert','Lesbarkeit');
INSERT INTO "connection" VALUES(92,'Funktionsrumpf','gefolgt von','Prüfung der Funktionsweise');
INSERT INTO "connection" VALUES(92,'Operationen','besteht aus','elementare Operationen');
INSERT INTO "connection" VALUES(92,'Programm','besitzt','Dokumentation');
INSERT INTO "connection" VALUES(92,'Programmiersprache','besitzt','Semantik');
INSERT INTO "connection" VALUES(92,'elementare Operationen','enthält','Addition');
INSERT INTO "connection" VALUES(92,'Schablone','gefolgt von','Funktionsrumpf');
INSERT INTO "connection" VALUES(92,'Dokumentation','beinhaltet','Kommentare');
INSERT INTO "connection" VALUES(92,'Kontrollstrukturen','enthält','Bedingte Ausdrücke');
INSERT INTO "connection" VALUES(92,'Kontrollstrukturen','enthält','Rekursion');
INSERT INTO "connection" VALUES(92,'Programmiersprache','ermöglicht','Programm');
INSERT INTO "connection" VALUES(92,'Programmiersprache','besitzt','Syntax');
INSERT INTO "connection" VALUES(92,'Datentypen','sind','Strukturen');
INSERT INTO "connection" VALUES(92,'Funktionen','verarbeitet','Parameter');
INSERT INTO "connection" VALUES(92,'Funktionen','besteht aus','Operationen');
INSERT INTO "connection" VALUES(92,'Dokumentation','beginnt mit','Datenanalyse und -definition');
INSERT INTO "connection" VALUES(92,'Programm','enthält','Funktionen');
INSERT INTO "connection" VALUES(92,'Signatur, Zweck und Funktionskopf','gefolgt von','Beispiele');
INSERT INTO "connection" VALUES(92,'Dokumentation','verbessert','Übersicht');
INSERT INTO "connection" VALUES(92,'Funktionale Programmierung','ermöglicht','Programmiersprache');
INSERT INTO "connection" VALUES(92,'Operationen','besteht aus','Kontrollstrukturen');
INSERT INTO "connection" VALUES(92,'Parameter','besitzen','Datentypen');
INSERT INTO "connection" VALUES(92,'Datentypen','sind','primitiv');
INSERT INTO "connection" VALUES(92,'elementare Operationen','enthält','Subtraktion');
INSERT INTO "connection" VALUES(92,'Beispiele','gefolgt von','Schablone');
INSERT INTO "connection" VALUES(92,'Programm','enthält','Parameter');
INSERT INTO "connection" VALUES(92,'Funktionen','berechnet','Ergebnis');
INSERT INTO "connection" VALUES(92,'elementare Operationen','enthält','Operation auf lineare Listen');
INSERT INTO "connection" VALUES(92,'Datenanalyse und -definition','gefolgt von','Signatur, Zweck und Funktionskopf');
INSERT INTO "connection" VALUES(93,'Aussagenlogik','Junktoren: und/oder/impliziert/äquivalent/nicht','Aussagenverknüpfung');
INSERT INTO "connection" VALUES(93,'endrekursiv','Auswertung','Iteration');
INSERT INTO "connection" VALUES(93,'Getypt','4. Art','Listen');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','Alternativer Auswertungsprozess','Iteration');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','Menge homogener Werte','Liste');
INSERT INTO "connection" VALUES(93,'Datentyp','3. Bildungsregel','Bildung von Funktionen');
INSERT INTO "connection" VALUES(93,'Datentyp','2. Bildungsregel','Disjunkte Vereinigung');
INSERT INTO "connection" VALUES(93,'Algorithmus','Ergebnis','Ausgabe');
INSERT INTO "connection" VALUES(93,'Datentyp','kein Bezug zu konkreter Implementierung','abstrakter Datentyp');
INSERT INTO "connection" VALUES(93,'Aussagenlogik','Grundbegriffe','erfüllt, erfüllbar, allgemeingültig');
INSERT INTO "connection" VALUES(93,'Boolsche Werte','Benutzt Wo','Aussagenlogik');
INSERT INTO "connection" VALUES(93,'Racket','Variablenkonzept','Subtition durch Wertübergabe, textuelle Ersetzung, Verzögerte Auswertung');
INSERT INTO "connection" VALUES(93,'Datenstrukturen',3,'Typ-Prädikat');
INSERT INTO "connection" VALUES(93,'Rekursion','Funktion stützt sich schrittweise auf sich selbst ab','indirekt rekursiv');
INSERT INTO "connection" VALUES(93,'Rekursion','Funktion stützt sich direkt auf sich selbst ab','direkt rekursiv');
INSERT INTO "connection" VALUES(93,'Getypt','2. Art','Boolsche Werte');
INSERT INTO "connection" VALUES(93,'Getypt','5. Art','Pair');
INSERT INTO "connection" VALUES(93,'Racket','Vorbereitung einer Implementierung','Schablone');
INSERT INTO "connection" VALUES(93,'Getypt','1. Art','Zahlen');
INSERT INTO "connection" VALUES(93,'Datenstrukturen',4,'Datenbündel');
INSERT INTO "connection" VALUES(93,'Racket','Start des Programms','Aufruf einer Funktion mit Parametern');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','Datendefinition','Datenstrukturen');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','Werkzeug','Rekursion');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','4. Art','Basis Konzept');
INSERT INTO "connection" VALUES(93,'Eingabe','Umsetzung','Algorithmus');
INSERT INTO "connection" VALUES(93,'Rekursion','rekursive Funktion die einen iterativen Prozess erzeugt','endrekursiv');
INSERT INTO "connection" VALUES(93,'Liste','Wert: Null','Leere Liste');
INSERT INTO "connection" VALUES(93,'Rekursion','jede Auswertung des Funktionsrumpfes führt nur zu einem weiterem rekursiven Aufruf','linear Rekursiv');
INSERT INTO "connection" VALUES(93,'abstrakter Datentyp','Beispiel 1','Liste');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','Menge von Werte mit einer Menge von Operationen auf diesem Wert','Datentyp');
INSERT INTO "connection" VALUES(93,'Liste','Verarbeitung von Listen','Listen-Operationen');
INSERT INTO "connection" VALUES(93,'Datenstrukturen',2,'Selektor(en)');
INSERT INTO "connection" VALUES(93,'Rekursion','gegenstück','Iteration');
INSERT INTO "connection" VALUES(93,'Racket','f: Definitionsbereich zu Wertebereich','Funktionsdefinition');
INSERT INTO "connection" VALUES(93,'Datentyp','1. Bildungsregel','Kartesisches Produkt');
INSERT INTO "connection" VALUES(93,'Funktionsdefinition','Wert aus Definitionsbereich zu (Beschreibung von f(-))','Racket');
INSERT INTO "connection" VALUES(93,'abstrakter Datentyp','Beispiel2','Pair');
INSERT INTO "connection" VALUES(93,'abstrakter Datentyp','Beispiel1','Listen');
INSERT INTO "connection" VALUES(93,'Datentyp','4. Bildungsregel','Anwendung rekursiver Gleichungen');
INSERT INTO "connection" VALUES(93,'Getypt','3. Art','Symbole');
INSERT INTO "connection" VALUES(93,'Racket','Elementare Bestandteile','Addition, Subtraktion, Listenoperationen, Rekursion, Paramentisierung');
INSERT INTO "connection" VALUES(93,'Iteration','gegenstück','Rekursion');
INSERT INTO "connection" VALUES(93,'Ausgabe','Problem gelöst','Basis Konzept');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','Bestandteil','Aussagenlogik');
INSERT INTO "connection" VALUES(93,'Datenstrukturen',1,'Konstruktor');
INSERT INTO "connection" VALUES(93,'Basis Konzept','Problem Erkennung','Eingabe');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','BeispielSprache','Racket');
INSERT INTO "connection" VALUES(93,'Rekursion','Operationen werden bis zum der rekursiven Funktionsaufrufe aufgeschoben','rekursiver Prozess');
INSERT INTO "connection" VALUES(93,'Kartesisches Produkt','2 Varianten','heterogen/homogen');
INSERT INTO "connection" VALUES(93,'Funktionale Programmierung','Belegungen eines Bezeichner auf Werte eines Wertebereichs einschränken','Getypt');
INSERT INTO "connection" VALUES(94,'Elementare Bestandteile','enthält','Subtraktion');
INSERT INTO "connection" VALUES(94,'Entwurf','besteht aus','Schritt 5');
INSERT INTO "connection" VALUES(94,'Schritt 2','beinhaltet','Benennung der Funktion');
INSERT INTO "connection" VALUES(94,'Schritt 1','beinhaltet','Datendefinition');
INSERT INTO "connection" VALUES(94,'Entwurf','besteht aus','Schritt 4');
INSERT INTO "connection" VALUES(94,'ADT','enthält','rest');
INSERT INTO "connection" VALUES(94,'Entwurf','besteht aus','Schritt 3');
INSERT INTO "connection" VALUES(94,'special form','ist','ADT');
INSERT INTO "connection" VALUES(94,'Programm','ist eine','Funktion mit Parametern');
INSERT INTO "connection" VALUES(94,'Programm','ist eine','Menge von durch Rechenvorschriften definierten Funktionen');
INSERT INTO "connection" VALUES(94,'Schritt 6','testet','Beispiele');
INSERT INTO "connection" VALUES(94,'Entwurf','besteht aus','Schritt 2');
INSERT INTO "connection" VALUES(94,'Schritt 2','beinhaltet','Funktionskopf');
INSERT INTO "connection" VALUES(94,'ADT','enthält','first');
INSERT INTO "connection" VALUES(94,'funktionale Programmierung','ist ein','Programm');
INSERT INTO "connection" VALUES(94,'ADT','enthält','(cons expt1 expt2)');
INSERT INTO "connection" VALUES(94,'Funktion mit Parametern','kann sein','special form');
INSERT INTO "connection" VALUES(94,'Elementare Bestandteile','enhält','Addition');
INSERT INTO "connection" VALUES(94,'Schritt 2','beinhaltet','Zweck');
INSERT INTO "connection" VALUES(94,'Schritt 5','erstellt','Funktionsrumpf');
INSERT INTO "connection" VALUES(94,'Entwurf','besteht aus','Schritt 6');
INSERT INTO "connection" VALUES(94,'funktionale Programmierung','verwendet','Präfix-Notation');
INSERT INTO "connection" VALUES(94,'Schritt 3','erstellt','Beispiele');
INSERT INTO "connection" VALUES(94,'Schritt 4','erstellt','Schablone');
INSERT INTO "connection" VALUES(94,'funktionale Programmierung','besteht aus','Elementare Bestandteile');
INSERT INTO "connection" VALUES(94,'Elementare Bestandteile','enthält','Rekursion');
INSERT INTO "connection" VALUES(94,'special form','ist','(if (Bedinung) expt1 (expt2))');
INSERT INTO "connection" VALUES(94,'(if (Bedinung) expt1 (expt2))','verwendet','Boolesche Algebra');
INSERT INTO "connection" VALUES(94,'special form','ist','(cond [pred1 exp1] ... [else expt2])');
INSERT INTO "connection" VALUES(94,'Funktion mit Parametern','ist definiert durch','(define (name parameter) berechnungsvorschrift)');
INSERT INTO "connection" VALUES(94,'special form','ist','(define-struct name (liste-Komponenten))');
INSERT INTO "connection" VALUES(94,'(cond [pred1 exp1] ... [else expt2])','verwendet','Boolesche Algebra');
INSERT INTO "connection" VALUES(94,'Entwurf','besteht aus','Schritt 1');
INSERT INTO "connection" VALUES(95,'Programm','besteht aus','Funktionen');
INSERT INTO "connection" VALUES(95,'define-struct','ist eine','special form');
INSERT INTO "connection" VALUES(95,'Zusammengesetzte Daten','kann übergeben werden als','Parameter');
INSERT INTO "connection" VALUES(95,'cond','ist eine','special form');
INSERT INTO "connection" VALUES(95,'list','hat mehrere (first rest)','Selektor');
INSERT INTO "connection" VALUES(95,'Parameter','werden übergeben','Funktionen');
INSERT INTO "connection" VALUES(95,'define-struct','ermöglicht','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(95,'Arithmetischer Ausdurck','eine Art von','Informationen');
INSERT INTO "connection" VALUES(95,'Funktionen','muss haben','Tests');
INSERT INTO "connection" VALUES(95,'Funktionen','brauchen eine','Signatur');
INSERT INTO "connection" VALUES(95,'Arithmetischer Ausdurck','kann dargestellt werden als','Baumdiagramm');
INSERT INTO "connection" VALUES(95,'Operatoren','können darauf ausgeführt werden','Boolsche Werte');
INSERT INTO "connection" VALUES(95,'Funktionen','so können schleifen realisiert werden','Rekursion');
INSERT INTO "connection" VALUES(95,'define-struct','erstellt','Typ-Prädikat (?)');
INSERT INTO "connection" VALUES(95,'Informatik','Kann damit programmiert werden','Funktionale Programmiersprache');
INSERT INTO "connection" VALUES(95,'Funktionen','sollte haben','Beispiel');
INSERT INTO "connection" VALUES(95,'Baumdiagramm','besteht aus','Kanten');
INSERT INTO "connection" VALUES(95,'list','hat ein','Typ-Prädikat (?)');
INSERT INTO "connection" VALUES(95,'Programm','besteht aus','special form');
INSERT INTO "connection" VALUES(95,'Zusammengesetzte Daten','können dadurch in Einzelteile zerlegt werden','Selektor');
INSERT INTO "connection" VALUES(95,'Informationen','haben einen','pragmatischer Anteil');
INSERT INTO "connection" VALUES(95,'Informatik','ist die Verarbeitung von','Informationen');
INSERT INTO "connection" VALUES(95,'Informationen','können','Hierarchisch strukturiert');
INSERT INTO "connection" VALUES(95,'Funktionen','muss angegeben werden','Zweck');
INSERT INTO "connection" VALUES(95,'Zusammengesetzte Daten','bestehen aus und sind','Datentypen');
INSERT INTO "connection" VALUES(95,'Informationen','haben einen','sematischer Bestandteil');
INSERT INTO "connection" VALUES(95,'sematischer Bestandteil','können dadurch maschinell verarbeitet werden','Repräsentation');
INSERT INTO "connection" VALUES(95,'Racket','hat eine bestimmte','Syntax');
INSERT INTO "connection" VALUES(95,'Baumdiagramm','besteht aus','Knoten');
INSERT INTO "connection" VALUES(95,'Racket','ist eine','Funktionale Programmiersprache');
INSERT INTO "connection" VALUES(95,'Zusammengesetzte Daten','können überprüft werden durch','Typ-Prädikat (?)');
INSERT INTO "connection" VALUES(95,'Informationen','brauchen','Interpretation');
INSERT INTO "connection" VALUES(95,'Programm','verabeitet','Informationen');
INSERT INTO "connection" VALUES(95,'Funktionen','sollte zuerst geschrieben werden','Funktionsrumpf');
INSERT INTO "connection" VALUES(95,'Syntax','ist bei Racket eine','Präfix-Notation');
INSERT INTO "connection" VALUES(95,'Interpretation','macht','Repräsentation');
INSERT INTO "connection" VALUES(95,'Programm','zuerst durchführen','Datenanalyse/Datendefinition');
INSERT INTO "connection" VALUES(95,'pragmatischer Anteil','kann dadurch von der Maschine erkannt werden','Repräsentation');
INSERT INTO "connection" VALUES(95,'Boolsche Werte','sind','Datentypen');
INSERT INTO "connection" VALUES(95,'define-struct','erstellt','Selektor');
INSERT INTO "connection" VALUES(95,'Baumdiagramm','eine Möglichkeit','Hierarchisch strukturiert');
INSERT INTO "connection" VALUES(95,'Racket','werden geschrieben','Programm');
INSERT INTO "connection" VALUES(95,'list','ist ein','Datentypen');
INSERT INTO "connection" VALUES(96,'Turing-Maschine','speichert','Repräsentation');
INSERT INTO "connection" VALUES(96,'Racket','verwendet','special forms');
INSERT INTO "connection" VALUES(96,'define-struct','erstellt','Struktur');
INSERT INTO "connection" VALUES(96,'Abbruchbedingung','stoppt','Rekursion');
INSERT INTO "connection" VALUES(96,'Programm','führt aus','Brechnungsvorschrift');
INSERT INTO "connection" VALUES(96,'Alphabet','besteht aus','Menge(n)');
INSERT INTO "connection" VALUES(96,'Hilfsfunktion','strukturiert','Funktion');
INSERT INTO "connection" VALUES(96,'Aussagen','arbeiten mit','Wahrheitswerte (boolean)');
INSERT INTO "connection" VALUES(96,'cond','gehört zu','special forms');
INSERT INTO "connection" VALUES(96,'Racket','bietet','vordefinierte Prädikate');
INSERT INTO "connection" VALUES(96,'Racket','liest','Aussagen');
INSERT INTO "connection" VALUES(96,'vordefinierte Prädikate','liefern','Wahrheitswerte (boolean)');
INSERT INTO "connection" VALUES(96,'Racket','verwendet','Funktion');
INSERT INTO "connection" VALUES(96,'Student','macht eine','Eingabe');
INSERT INTO "connection" VALUES(96,'Liste','besteht aus','Komponenten');
INSERT INTO "connection" VALUES(96,'Präfix-Notation','beinhaltet','Operatorsymbol');
INSERT INTO "connection" VALUES(96,'Racket','liest','Präfix-Notation');
INSERT INTO "connection" VALUES(96,'arithmetischer Ausdruck','besteht aus','Alphabet');
INSERT INTO "connection" VALUES(96,'Algorithmus','berechnet','Ausgabe');
INSERT INTO "connection" VALUES(96,'Turing-Maschine','besitzt','Alphabet');
INSERT INTO "connection" VALUES(96,'Turing-Maschine','führt aus','Programm');
INSERT INTO "connection" VALUES(96,'cond','wertet aus','Fallunterscheidung');
INSERT INTO "connection" VALUES(96,'Numeral','repräsentiert','Zahl');
INSERT INTO "connection" VALUES(96,'Struktur','besteht aus','Komponenten');
INSERT INTO "connection" VALUES(96,'Operatorsymbol','kann mehrere verknüpfen','Numeral');
INSERT INTO "connection" VALUES(96,'cons','gehört zu','special forms');
INSERT INTO "connection" VALUES(96,'Zeichenketten','arbeiten mit','Symbole');
INSERT INTO "connection" VALUES(96,'Programm','besteht aus','Algorithmus');
INSERT INTO "connection" VALUES(96,'Student','entwirft','Programm');
INSERT INTO "connection" VALUES(96,'Rekursion','wiederholt','Funktion');
INSERT INTO "connection" VALUES(96,'Racket','liest','Zeichenketten');
INSERT INTO "connection" VALUES(96,'Numeral','ist ein','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(96,'Baum','strukturiert','Information');
INSERT INTO "connection" VALUES(96,'Struktur','ist ein','konstantes Datenbündel');
INSERT INTO "connection" VALUES(96,'Anonyme Funktion','wird erstellt mit','lambda');
INSERT INTO "connection" VALUES(96,'Turing-Maschine','besitzt','Zustand');
INSERT INTO "connection" VALUES(96,'Anonyme Funktion','führt aus','Brechnungsvorschrift');
INSERT INTO "connection" VALUES(96,'define-struct','gehört zu','special forms');
INSERT INTO "connection" VALUES(96,'Eingabe','wird übergeben in die','Turing-Maschine');
INSERT INTO "connection" VALUES(96,'Funktion','sagt, was berechnet werden soll','Programm');
INSERT INTO "connection" VALUES(96,'arithmetischer Ausdruck','arbeitet mit','Zahl');
INSERT INTO "connection" VALUES(96,'cons','erzeugt','Liste');
INSERT INTO "connection" VALUES(96,'Repräsentation','wird interpretiert zu einer','Information');
INSERT INTO "connection" VALUES(97,'Entwurf','besteht aus','Schritt 1');
INSERT INTO "connection" VALUES(97,'(cond [pred1 exp1] ... [else expt2])','verwendet','Boolesche Algebra');
INSERT INTO "connection" VALUES(97,'special form','ist','(define-struct name (liste-Komponenten))');
INSERT INTO "connection" VALUES(97,'special form','ist','(cond [pred1 exp1] ... [else expt2])');
INSERT INTO "connection" VALUES(97,'Funktion mit Parametern','ist definiert durch','(define (name parameter) berechnungsvorschrift)');
INSERT INTO "connection" VALUES(97,'special form','ist','(if (Bedinung) expt1 (expt2))');
INSERT INTO "connection" VALUES(97,'(if (Bedinung) expt1 (expt2))','verwendet','Boolesche Algebra');
INSERT INTO "connection" VALUES(97,'Elementare Bestandteile','enthält','Rekursion');
INSERT INTO "connection" VALUES(97,'funktionale Programmierung','besteht aus','Elementare Bestandteile');
INSERT INTO "connection" VALUES(97,'Schritt 3','erstellt','Beispiele');
INSERT INTO "connection" VALUES(97,'Schritt 4','erstellt','Schablone');
INSERT INTO "connection" VALUES(97,'funktionale Programmierung','verwendet','Präfix-Notation');
INSERT INTO "connection" VALUES(97,'Entwurf','besteht aus','Schritt 6');
INSERT INTO "connection" VALUES(97,'Schritt 5','erstellt','Funktionsrumpf');
INSERT INTO "connection" VALUES(97,'Schritt 2','beinhaltet','Zweck');
INSERT INTO "connection" VALUES(97,'Elementare Bestandteile','enhält','Addition');
INSERT INTO "connection" VALUES(97,'ADT','enthält','(cons expt1 expt2)');
INSERT INTO "connection" VALUES(97,'Funktion mit Parametern','kann sein','special form');
INSERT INTO "connection" VALUES(97,'funktionale Programmierung','ist ein','Programm');
INSERT INTO "connection" VALUES(97,'Schritt 2','beinhaltet','Funktionskopf');
INSERT INTO "connection" VALUES(97,'ADT','enthält','first');
INSERT INTO "connection" VALUES(97,'Schritt 6','testet','Beispiele');
INSERT INTO "connection" VALUES(97,'Entwurf','besteht aus','Schritt 2');
INSERT INTO "connection" VALUES(97,'Programm','ist eine','Menge von durch Rechenvorschriften definierten Funktionen');
INSERT INTO "connection" VALUES(97,'special form','ist','ADT');
INSERT INTO "connection" VALUES(97,'Programm','ist eine','Funktion mit Parametern');
INSERT INTO "connection" VALUES(97,'Entwurf','besteht aus','Schritt 3');
INSERT INTO "connection" VALUES(97,'Entwurf','besteht aus','Schritt 4');
INSERT INTO "connection" VALUES(97,'ADT','enthält','rest');
INSERT INTO "connection" VALUES(97,'Schritt 1','beinhaltet','Datendefinition');
INSERT INTO "connection" VALUES(97,'Entwurf','besteht aus','Schritt 5');
INSERT INTO "connection" VALUES(97,'Schritt 2','beinhaltet','Benennung der Funktion');
INSERT INTO "connection" VALUES(97,'Elementare Bestandteile','enthält','Subtraktion');
INSERT INTO "connection" VALUES(98,'Anforderungen','werden gestellt an','Informatik');
INSERT INTO "connection" VALUES(98,'Berechenbarkeit','Beweis mittels','induktive Definition');
INSERT INTO "connection" VALUES(98,'Variablen','speichern','Ausdruck');
INSERT INTO "connection" VALUES(98,'Repräsentation','stellt dar','Information');
INSERT INTO "connection" VALUES(98,'Ausdruck','sind','Daten');
INSERT INTO "connection" VALUES(98,'Probleme','Lösung durch','Algorithmus');
INSERT INTO "connection" VALUES(98,'Algorithmus','wird umgesetzt in','Funktion');
INSERT INTO "connection" VALUES(98,'Variablen','speichern','Daten');
INSERT INTO "connection" VALUES(98,'Semantik','gibt Bedeutung','Syntax');
INSERT INTO "connection" VALUES(98,'Algorithmus','setzt voraus','Berechenbarkeit');
INSERT INTO "connection" VALUES(98,'Mensch','hat','Anforderungen');
INSERT INTO "connection" VALUES(98,'Syntax','beschreibt','Ausdruck');
INSERT INTO "connection" VALUES(98,'Spezifikation','besteht aus','Semantik');
INSERT INTO "connection" VALUES(98,'Analyse','wird abstrahiert in','Model');
INSERT INTO "connection" VALUES(98,'Spezifikation','besteht aus','Syntax');
INSERT INTO "connection" VALUES(98,'Funktion','verwenden','Variablen');
INSERT INTO "connection" VALUES(98,'Paradigma','gibt vor','Struktur');
INSERT INTO "connection" VALUES(98,'Model','beschreibt eine','Repräsentation');
INSERT INTO "connection" VALUES(98,'Baum','stellt grafisch dar','Model');
INSERT INTO "connection" VALUES(98,'Informatik','beschäftigt sich mit','Mensch');
INSERT INTO "connection" VALUES(98,'Baum','stellt dar','Ausdruck');
INSERT INTO "connection" VALUES(98,'Spezifikation','definiert','Datentyp');
INSERT INTO "connection" VALUES(98,'Funktion','kann berechnen','Aussagen');
INSERT INTO "connection" VALUES(98,'Informatik','beschäftigt sich mit','Analyse');
INSERT INTO "connection" VALUES(98,'Maschine','braucht und nutzt','Repräsentation');
INSERT INTO "connection" VALUES(98,'Variablen','hat einen','Typen');
INSERT INTO "connection" VALUES(98,'Programmiersprache','lehnt sich an','Paradigma');
INSERT INTO "connection" VALUES(98,'Maschine','kann berechnen','Algorithmus');
INSERT INTO "connection" VALUES(98,'Funktion','wertet aus','Ausdruck');
INSERT INTO "connection" VALUES(98,'Interpretation','spezifiziert','Repräsentation');
INSERT INTO "connection" VALUES(98,'Informatik','setzt um in','Algorithmus');
INSERT INTO "connection" VALUES(98,'Grammatik','bestimmt','Syntax');
INSERT INTO "connection" VALUES(98,'Baum','stellt dar','Syntax');
INSERT INTO "connection" VALUES(98,'Baum','ist eine','Struktur');
INSERT INTO "connection" VALUES(98,'Probleme','ergeben sich durch','Analyse');
INSERT INTO "connection" VALUES(98,'Funktion','repräsentiert','Operationen');
INSERT INTO "connection" VALUES(98,'Funktion','kann verwenden','Rekursion');
INSERT INTO "connection" VALUES(98,'Liste','speichern und verwalten','Variablen');
INSERT INTO "connection" VALUES(98,'Liste','ist','Datentyp');
INSERT INTO "connection" VALUES(98,'Interpretation','schafft','Information');
INSERT INTO "connection" VALUES(98,'Aussagen','kann beinhalten','Variablen');
INSERT INTO "connection" VALUES(98,'Aussagen','beinhaltet','Wahrheitswerte');
INSERT INTO "connection" VALUES(99,'Dr.Racket','How to Design Programms','Entwurf von Programmen');
INSERT INTO "connection" VALUES(99,'Fallunterscheidung','gibt auch','Mehrfache Fallunterscheidung');
INSERT INTO "connection" VALUES(99,'Auswertung der special form cond','führt dazu','Auswertung der Semantik');
INSERT INTO "connection" VALUES(99,'Mengenlehre','enthalten in','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(99,'Funktionsrumpf erstellen','4. Schritt','Funktionsweise ueberpruefen');
INSERT INTO "connection" VALUES(99,'Dr.Racket','Art einer Darstellungsmöglichkeit','Baumdarstellung');
INSERT INTO "connection" VALUES(99,'Entwurf von Programmen','1. Schritt','Signatur, Zweck und Funktionskopf angeben');
INSERT INTO "connection" VALUES(99,'Abstrakte Datentypen und Listen','Bsp. Datentyp','Rekursion');
INSERT INTO "connection" VALUES(99,'Beispiele erstellen','3. Schritt','Funktionsrumpf erstellen');
INSERT INTO "connection" VALUES(99,'Abstrakte Datentypen und Listen','teil von','Datenanalyse und -definition');
INSERT INTO "connection" VALUES(99,'Grundbegriffe der Aussagenlogik','Bereiche festlegen','Modellierung der Eingabe');
INSERT INTO "connection" VALUES(99,'Mehrfache Fallunterscheidung','zum Beispiel','Auswertung der special form cond');
INSERT INTO "connection" VALUES(99,'Zusammengesetze Daten','Erweiterung','Definition zusammengesetzer,strukturierter Daten');
INSERT INTO "connection" VALUES(99,'Dr.Racket','Funktionsberarbeitung','Grundbegriffe der Aussagenlogik');
INSERT INTO "connection" VALUES(99,'Dr.Racket','Teil','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(99,'Abstrakte Datentypen und Listen','Wird unterschieden','Lambda');
INSERT INTO "connection" VALUES(99,'Informatik','Funktionale&amp;getypte Programmiersprache','Dr.Racket');
INSERT INTO "connection" VALUES(99,'Grundbegriffe der Aussagenlogik','wird erklärt','Boolesche Algebra');
INSERT INTO "connection" VALUES(99,'Signatur, Zweck und Funktionskopf angeben','2. Schritt','Beispiele erstellen');
INSERT INTO "connection" VALUES(99,'Abstrakte Datentypen und Listen','Unterscheidet sich in','Getypte und Ungetypte Sprache');
INSERT INTO "connection" VALUES(99,'Boolesche Werte','ergibt','Fallunterscheidung');
INSERT INTO "connection" VALUES(99,'Dr.Racket','Bereich','Abstrakte Datentypen und Listen');
INSERT INTO "connection" VALUES(99,'Dr.Racket','Erweiterung','Zusammengesetze Daten');
INSERT INTO "connection" VALUES(99,'Boolesche Algebra','gibt wieder','Boolesche Werte');
INSERT INTO "connection" VALUES(99,'Abstrakte Datentypen und Listen','wird unterschieden','Paar-Listen');
INSERT INTO "connection" VALUES(100,'Algebra','ist Menge von','Werte');
INSERT INTO "connection" VALUES(100,'Boolesche Algebra','ist','Algebra');
INSERT INTO "connection" VALUES(100,'Spezifikationen','enthält','''Signatur');
INSERT INTO "connection" VALUES(100,'Variablen','sind','Konstanten');
INSERT INTO "connection" VALUES(100,'Datentypen','enthalten Menge von','Operationen');
INSERT INTO "connection" VALUES(100,'''Funktionsdefinition','hat für jeden','Selbstbezug');
INSERT INTO "connection" VALUES(100,'Algebra','ist Menge von','Funktionen');
INSERT INTO "connection" VALUES(100,'Kapitel 6','enthält','Rekursion');
INSERT INTO "connection" VALUES(100,'''Funktionsdefinition','ist','linear rekursiv');
INSERT INTO "connection" VALUES(100,'Aufbau','ist','Syntax');
INSERT INTO "connection" VALUES(100,'Kapitel 3','enthält','Aussagen');
INSERT INTO "connection" VALUES(100,'Hilfsfunktionen','sind','Funktion');
INSERT INTO "connection" VALUES(100,'Datenbündel','ist','konstant');
INSERT INTO "connection" VALUES(100,'Werte','haben','Typen');
INSERT INTO "connection" VALUES(100,'atomare Aussage','ist','Aussagen');
INSERT INTO "connection" VALUES(100,'''Menge von Gleichungen','beschreibt','''Semantik');
INSERT INTO "connection" VALUES(100,'Binärbäume','haben max 2','Teilbäume');
INSERT INTO "connection" VALUES(100,'atomare Aussage','enthält keine','Junktoren');
INSERT INTO "connection" VALUES(100,'Prädikate','prüfen','Typen');
INSERT INTO "connection" VALUES(100,'Hilfsfunktionen','enthalten','Variablen');
INSERT INTO "connection" VALUES(100,'cond-Klausel','für','ein Fall');
INSERT INTO "connection" VALUES(100,'Funktion','enthält','Variablen');
INSERT INTO "connection" VALUES(100,'Baumdiagramme','haben','Knoten');
INSERT INTO "connection" VALUES(100,'Funktionsaufruf','benötigt','Funktion');
INSERT INTO "connection" VALUES(100,'Struktur','enthält definierte','Datenbündel');
INSERT INTO "connection" VALUES(100,'Argumente','sind','Komponenten');
INSERT INTO "connection" VALUES(100,'''Syntax','des','Datentypen');
INSERT INTO "connection" VALUES(100,'Rekursion','entsprechende','''Datendefinition');
INSERT INTO "connection" VALUES(100,'Datentypen','enthalten Menge von','`Werte');
INSERT INTO "connection" VALUES(100,'Struktur','enthält','Komponenten');
INSERT INTO "connection" VALUES(100,'Operationen','definiert aus','`Werte');
INSERT INTO "connection" VALUES(100,'Abhängigkeit','begründet','Hilfsfunktionen');
INSERT INTO "connection" VALUES(100,'Prozess','enthält','rekursiver Funktionsaufruf');
INSERT INTO "connection" VALUES(100,'Kapitel 4','enthält','Struktur');
INSERT INTO "connection" VALUES(100,'Concept Map Informatik I','enthält','Kapitel 6');
INSERT INTO "connection" VALUES(100,'Syntax','hat','Regeln');
INSERT INTO "connection" VALUES(100,'`Werte','im','Wertebereich');
INSERT INTO "connection" VALUES(100,'abstrakter Datentyp','ist','Datentypen');
INSERT INTO "connection" VALUES(100,'Prädikate','liefern','Boolean');
INSERT INTO "connection" VALUES(100,'Baumdiagramme','haben k','Teilbäume');
INSERT INTO "connection" VALUES(100,'''Funktionsdefinition','korrespondierende','''Datendefinition');
INSERT INTO "connection" VALUES(100,'''Funktionsdefinition','hat','cond-Klausel');
INSERT INTO "connection" VALUES(100,'''Signatur','beschreibt','''Syntax');
INSERT INTO "connection" VALUES(100,'Definition','definiert','Funktion');
INSERT INTO "connection" VALUES(100,'Funktionsaufruf','benötigt','Parameter');
INSERT INTO "connection" VALUES(100,'Binärbäume','haben','Knoten');
INSERT INTO "connection" VALUES(100,'Selbstbezug','zur','''Datendefinition');
INSERT INTO "connection" VALUES(100,'Kapitel 4','enthält','Typen');
INSERT INTO "connection" VALUES(100,'Regel','begründet','Hilfsfunktionen');
INSERT INTO "connection" VALUES(100,'Boolesche Algebra','verwendet','Junktoren');
INSERT INTO "connection" VALUES(100,'Boolesche Algebra','verwendet','Aussagen');
INSERT INTO "connection" VALUES(100,'Sorte','und','Spezifikationen');
INSERT INTO "connection" VALUES(100,'Concept Map Informatik I','enthält','Kapitel 3');
INSERT INTO "connection" VALUES(100,'Funktionale Programmierung','erwartet','Funktionsaufruf');
INSERT INTO "connection" VALUES(100,'Ausdruck','hat','Bedeutung');
INSERT INTO "connection" VALUES(100,'Bedeutung','ist','Semantik');
INSERT INTO "connection" VALUES(100,'Teilbäume','haben','Knoten');
INSERT INTO "connection" VALUES(100,'Regeln','ermitteln','Semantik');
INSERT INTO "connection" VALUES(100,'Funktionsaufruf','auswerten','Ausdruck');
INSERT INTO "connection" VALUES(100,'Rekursion','entsprechende','''Funktionsdefinition');
INSERT INTO "connection" VALUES(100,'Spezifikationen','und','''Semantik');
INSERT INTO "connection" VALUES(100,'cond-Klausel','für','k Fälle');
INSERT INTO "connection" VALUES(100,'Junktoren','kombinieren','Aussagen');
INSERT INTO "connection" VALUES(100,'neues Datenbündel','erhält alte','Argumente');
INSERT INTO "connection" VALUES(100,'ein Fall','kein','Selbstbezug');
INSERT INTO "connection" VALUES(100,'linear rekursiv','Auswertung führt zu max 1','rekursiver Funktionsaufruf');
INSERT INTO "connection" VALUES(100,'Selbstbezug','einen','''Funktionsaufruf');
INSERT INTO "connection" VALUES(100,'Spezifikationen','enthält','''Menge von Gleichungen');
INSERT INTO "connection" VALUES(100,'induktive Definition','ist','Definition');
INSERT INTO "connection" VALUES(100,'Concept Map Informatik I','enthält','Kapitel 4');
INSERT INTO "connection" VALUES(100,'Concept Map Informatik I','enthält','Kapitel 2');
INSERT INTO "connection" VALUES(100,'Kapitel 5','enthält','Datentypen');
INSERT INTO "connection" VALUES(100,'Binärbäume','sind','Baumdiagramme');
INSERT INTO "connection" VALUES(100,'Datenbündel','wird','neues Datenbündel');
INSERT INTO "connection" VALUES(100,'''Semantik','gleich','Datentypen');
INSERT INTO "connection" VALUES(100,'induktive Definition','basiert auf','Bildungsregeln');
INSERT INTO "connection" VALUES(100,'Ausdruck','hat','Aufbau');
INSERT INTO "connection" VALUES(100,'Kapitel 2','enthält','Baumdiagramme');
INSERT INTO "connection" VALUES(100,'Rekursion','entsprechender','Prozess');
INSERT INTO "connection" VALUES(100,'Werte','eigegeben in','Funktionen');
INSERT INTO "connection" VALUES(100,'Concept Map Informatik I','enthält','Kapitel 5');
INSERT INTO "connection" VALUES(100,'k Fälle','dürfen','Selbstbezug');
INSERT INTO "connection" VALUES(100,'abstrakter Datentyp','ohne Bezug zu','konkrete Implementierung');
INSERT INTO "connection" VALUES(100,'Kapitel 2','enthält','Funktionale Programmierung');
INSERT INTO "connection" VALUES(101,'Implementierung','ordnet zu','Platzhalter');
INSERT INTO "connection" VALUES(101,'Programm','ist eine','Operation');
INSERT INTO "connection" VALUES(101,'Implementierung','implementiert','Operation');
INSERT INTO "connection" VALUES(101,'Implementierung','implementiert','Variable');
INSERT INTO "connection" VALUES(101,'ADT','ist ein','Datentyp');
INSERT INTO "connection" VALUES(101,'Wertebereich','steht in','Signatur');
INSERT INTO "connection" VALUES(101,'Funktion','verwendet','special form');
INSERT INTO "connection" VALUES(101,'Konstruktor','konstruiert','konstantes Datenbündel');
INSERT INTO "connection" VALUES(101,'Hilfsfunktion','eine pro','Abhängigkeit');
INSERT INTO "connection" VALUES(101,'Komponente','gehört zu','konstantes Datenbündel');
INSERT INTO "connection" VALUES(101,'Programm','liefert','Ausgabe');
INSERT INTO "connection" VALUES(101,'Datenanalyse/-definition','ergibt','Strukturdefintion');
INSERT INTO "connection" VALUES(101,'Datentyp','kann sein','rekursiver Datentyp');
INSERT INTO "connection" VALUES(101,'Strukturdefintion','definiert','Struktur');
INSERT INTO "connection" VALUES(101,'Fallunterscheidung','wertet aus nach','Prädikat');
INSERT INTO "connection" VALUES(101,'Eingabeparameter','gehört zu','Defintionsbereich');
INSERT INTO "connection" VALUES(101,'Prädikat','hat einen','Wahrheitswert');
INSERT INTO "connection" VALUES(101,'Beispiel','eins pro','Fallunterscheidung');
INSERT INTO "connection" VALUES(101,'rekursive Funktionsdefinition','ruft auf','rekursiver Prozess');
INSERT INTO "connection" VALUES(101,'Beispiel','gibt vor','Test');
INSERT INTO "connection" VALUES(101,'Datenanalyse/-definition','ergibt','Fallunterscheidung');
INSERT INTO "connection" VALUES(101,'Ausgabe','gehört zu','Wertebereich');
INSERT INTO "connection" VALUES(101,'Spezifikation','legt fest','Syntax');
INSERT INTO "connection" VALUES(101,'Struktur','erzeugt','Selektor');
INSERT INTO "connection" VALUES(101,'Test','liefert','Fehler');
INSERT INTO "connection" VALUES(101,'Selektor','liefert','Komponente');
INSERT INTO "connection" VALUES(101,'ADT','hat eine','Spezifikation');
INSERT INTO "connection" VALUES(101,'define struct','ist eine','special form');
INSERT INTO "connection" VALUES(101,'Datenanalyse/-definition','ergibt','Datentyp');
INSERT INTO "connection" VALUES(101,'Platzhalter','entspricht','Name');
INSERT INTO "connection" VALUES(101,'special form','legt fest','Fallunterscheidung');
INSERT INTO "connection" VALUES(101,'define struct','implementiert','Struktur');
INSERT INTO "connection" VALUES(101,'rekursive Funktionsdefinition','ruft auf','iterativer Prozess');
INSERT INTO "connection" VALUES(101,'Spezifikation','legt fest','Semantik');
INSERT INTO "connection" VALUES(101,'Test','testet','Programm');
INSERT INTO "connection" VALUES(101,'Funktion','kann sein','rekursive Funktionsdefinition');
INSERT INTO "connection" VALUES(101,'Struktur','erzeugt','Konstruktor');
INSERT INTO "connection" VALUES(101,'if','ist eine','special form');
INSERT INTO "connection" VALUES(101,'Unbekannte','entspricht','Eingabeparameter');
INSERT INTO "connection" VALUES(101,'cond','ist eine','special form');
INSERT INTO "connection" VALUES(101,'Variable','steht für','Konstante');
INSERT INTO "connection" VALUES(101,'Funktion','verwendet','Operation');
INSERT INTO "connection" VALUES(101,'Programm','ruft auf','Funktion');
INSERT INTO "connection" VALUES(101,'Funktion','verwendet','Hilfsfunktion');
INSERT INTO "connection" VALUES(101,'elementare Operation','ist eine','Operation');
INSERT INTO "connection" VALUES(101,'Defintionsbereich','steht in','Signatur');
INSERT INTO "connection" VALUES(101,'Name','steht in','Signatur');
INSERT INTO "connection" VALUES(101,'Liste','ist ein','ADT');
INSERT INTO "connection" VALUES(101,'lambda','ist eine','Funktion');
INSERT INTO "connection" VALUES(101,'Eingabeparameter','fließt ein','Funktion');
INSERT INTO "connection" VALUES(102,'Funktionale Programmierung','Beinhaltet','Paare');
INSERT INTO "connection" VALUES(102,'Aktuelle Parameter','ersetzen','Formale Parameter');
INSERT INTO "connection" VALUES(102,'Funktionale Programmierung','Enthält','Strukturen');
INSERT INTO "connection" VALUES(102,'Prädikate','Dazugehöriger','Ausdruck');
INSERT INTO "connection" VALUES(102,'Liste','Besteht aus','Paare');
INSERT INTO "connection" VALUES(102,'Berechnungsvorschrift','Erstellt','Ausgabe');
INSERT INTO "connection" VALUES(102,'Funktionen','besitzt','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(102,'Funktionale Programmierung','Möglich ist','Rekursion');
INSERT INTO "connection" VALUES(102,'Eingabe','In Form von','Aktuelle Parameter');
INSERT INTO "connection" VALUES(102,'Berechnungsvorschrift','Kann enthalten','Fallunterscheidung');
INSERT INTO "connection" VALUES(102,'Operationen','Definiert auf','Werte');
INSERT INTO "connection" VALUES(102,'Funktionen','Wird erstellt mit','Formale Parameter');
INSERT INTO "connection" VALUES(102,'Datentypen','Ist eine Menge von','Operationen');
INSERT INTO "connection" VALUES(102,'Funktionale Programmierung','Besitzt','Datentypen');
INSERT INTO "connection" VALUES(102,'Funktionen','Geben aus','Ausgabe');
INSERT INTO "connection" VALUES(102,'Paare','Bestehend aus zwei','Komponenten');
INSERT INTO "connection" VALUES(102,'Strukturen','Enthalten beliebig viele','Komponenten');
INSERT INTO "connection" VALUES(102,'Ausdruck','Wird ausgewertet','Ausgabe');
INSERT INTO "connection" VALUES(102,'Operationen','Definiert auf','Datentypen');
INSERT INTO "connection" VALUES(102,'Eingabe','Wird eingesetzt in','Berechnungsvorschrift');
INSERT INTO "connection" VALUES(102,'Funktionale Programmierung','besitzt','Funktionen');
INSERT INTO "connection" VALUES(102,'Fallunterscheidung','Sobald true','Prädikate');
INSERT INTO "connection" VALUES(102,'Strukturen','Sind','Funktionen');
INSERT INTO "connection" VALUES(102,'Funktionen','Benötigt','Berechnungsvorschrift');
INSERT INTO "connection" VALUES(102,'Funktionen','Benötigt','Eingabe');
INSERT INTO "connection" VALUES(102,'Funktionale Programmierung','Beinhaltet','Liste');
INSERT INTO "connection" VALUES(102,'Rekursion','Ist eine','Funktion mit Selbstaufruf');
INSERT INTO "connection" VALUES(102,'Datentypen','Ist eine Menge von','Werte');
INSERT INTO "connection" VALUES(103,'Fallunterscheidung mit cond','wertet aus nach','booleans');
INSERT INTO "connection" VALUES(103,'Strukturen','definiert','Datenbündel');
INSERT INTO "connection" VALUES(103,'booleans','benötigt','boolesche Algebra');
INSERT INTO "connection" VALUES(103,'abstrakter Datentyp','besteht aus','Semantik');
INSERT INTO "connection" VALUES(103,'Programme','verwendet','List');
INSERT INTO "connection" VALUES(103,'List','ist ein','abstrakter Datentyp');
INSERT INTO "connection" VALUES(103,'arithmetischer Ausdruck','wird angegeben in','Präfix-Notation');
INSERT INTO "connection" VALUES(103,'List','benutzt','Rekursion');
INSERT INTO "connection" VALUES(103,'Programme','verwendet','booleans');
INSERT INTO "connection" VALUES(103,'Rekursion','hat Form von','Baum');
INSERT INTO "connection" VALUES(103,'abstrakter Datentyp','besteht aus','Wertebereich');
INSERT INTO "connection" VALUES(103,'Programme','besteht aus','Signatur, Zweck und Funktionskopf');
INSERT INTO "connection" VALUES(103,'Strukturen','setzt voraus','Datendefinition');
INSERT INTO "connection" VALUES(103,'Programme','besteht aus','Funktionsrumpf');
INSERT INTO "connection" VALUES(103,'Programme','verwendet','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(103,'Programme','besteht aus','Datendefinition');
INSERT INTO "connection" VALUES(103,'Rekursion','erzeugt','rekursiver Prozess');
INSERT INTO "connection" VALUES(103,'abstrakter Datentyp','besteht aus','Spezifikation');
INSERT INTO "connection" VALUES(103,'DrRacket','interpretiert','Programme');
INSERT INTO "connection" VALUES(103,'Programme','verwendet','Strukturen');
INSERT INTO "connection" VALUES(103,'Rekursion','erzeugt','iterativer Prozess');
INSERT INTO "connection" VALUES(103,'arithmetischer Ausdruck','wird dargestellt durch','Baum');
INSERT INTO "connection" VALUES(103,'Programme','besteht aus','Beispiele');
INSERT INTO "connection" VALUES(103,'DrRacket','setzt voraus','Präfix-Notation');
INSERT INTO "connection" VALUES(104,'endrekursiv','ist ein','Iterativer Prozess');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','formuliert','Signatur');
INSERT INTO "connection" VALUES(104,'Rekursive Daten- oder Funktionsdefinition','kann sein','nicht-linear rekursiv');
INSERT INTO "connection" VALUES(104,'Rekursive Daten- oder Funktionsdefinition','muss bestehen aus','cond Klausel');
INSERT INTO "connection" VALUES(104,'Eigenbezug auf die Funktion innerhalb der Funktion','kann sein','Indirekt Rekursiv');
INSERT INTO "connection" VALUES(104,'define-struct','besteht aus','sname');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','enwtirft','Tests');
INSERT INTO "connection" VALUES(104,'Funktionale Programmiersrpache','erstellt','Programm aus funktionalem Baukasten');
INSERT INTO "connection" VALUES(104,'strukturierte Daten','besteht aus','Selektor(en)');
INSERT INTO "connection" VALUES(104,'Eigenbezug auf die Funktion innerhalb der Funktion','kann sein','Direkt Rekursiv');
INSERT INTO "connection" VALUES(104,'Datendefinition','verwendet','define-struct');
INSERT INTO "connection" VALUES(104,'DrRacket','erstellt eine','Datendefinition');
INSERT INTO "connection" VALUES(104,'Schablone','verwendet','Fallunterscheidungen');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','erstellt','Beispiele');
INSERT INTO "connection" VALUES(104,'Abbruchbedingung','sollte entsprechen','Sinn der Funktion');
INSERT INTO "connection" VALUES(104,'nicht-linear rekursiv','wächst linear','Speicherbedarf');
INSERT INTO "connection" VALUES(104,'Regeln','legt Interpretation fest','Funktionale Programmiersrpache');
INSERT INTO "connection" VALUES(104,'Signatur','lässt zu','verschiedene Belegungen in einem Wertebereich');
INSERT INTO "connection" VALUES(104,'endrekursiv','bleibt gleich','Speicherbedarf');
INSERT INTO "connection" VALUES(104,'Signatur','beschreibt nicht','Semantik');
INSERT INTO "connection" VALUES(104,'DrRacket','ist eine','Funktionale Programmiersrpache');
INSERT INTO "connection" VALUES(104,'Datendefinition','kann sein','Rekursive Daten- oder Funktionsdefinition');
INSERT INTO "connection" VALUES(104,'Funktionen','sind definiert in','Klassen');
INSERT INTO "connection" VALUES(104,'Rekursive Daten- oder Funktionsdefinition','kann sein','endrekursiv');
INSERT INTO "connection" VALUES(104,'define-struct','ist eine','specialforms');
INSERT INTO "connection" VALUES(104,'strukturierte Daten','besteht aus','Typ-Prädikat');
INSERT INTO "connection" VALUES(104,'Menge von Operationen','sind definiert auf','Menge von Werten');
INSERT INTO "connection" VALUES(104,'Funktionale Programmiersrpache','wendet an','specialforms');
INSERT INTO "connection" VALUES(104,'Funktionen','verwenden','Hilfsfunktionen');
INSERT INTO "connection" VALUES(104,'Programmiersprache','kann sein','Funktionale Programmiersrpache');
INSERT INTO "connection" VALUES(104,'Liste','kann sein','Parameter');
INSERT INTO "connection" VALUES(104,'DrRacket','benutzt','Fallunterscheidungen');
INSERT INTO "connection" VALUES(104,'Datentyp','ist eine','Menge von Werten');
INSERT INTO "connection" VALUES(104,'Signatur','lässt zu','verschiedene Wertebereiche');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','erstellt','Datenanalyse');
INSERT INTO "connection" VALUES(104,'Bäume','kann sein','Binärbaum');
INSERT INTO "connection" VALUES(104,'Programm aus funktionalem Baukasten','erhält','EIngabe');
INSERT INTO "connection" VALUES(104,'DrRacket','ist eine','typisierte Programmsprache');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','erstellt','Funktonsrumpf');
INSERT INTO "connection" VALUES(104,'pair','ist ein','abstrakte Datentypen');
INSERT INTO "connection" VALUES(104,'strukturierte Daten','besteht aus','Konstruktor');
INSERT INTO "connection" VALUES(104,'sname','enthält','comp1,....,compI');
INSERT INTO "connection" VALUES(104,'Rekursive Daten- oder Funktionsdefinition','Vorraussetzung ist','Eigenbezug auf die Funktion innerhalb der Funktion');
INSERT INTO "connection" VALUES(104,'Schablone','basierend auf','Datendefinition');
INSERT INTO "connection" VALUES(104,'Fallunterscheidungen','Wertet aus nach','Boolscher Algebra');
INSERT INTO "connection" VALUES(104,'Boolscher Algebra','besteht aus','true');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','gibt an','Zweck');
INSERT INTO "connection" VALUES(104,'Programm aus funktionalem Baukasten','bedient sich','Entwurfsschema');
INSERT INTO "connection" VALUES(104,'cond Klausel','kann gebildet werden aus','Fallunterscheidungen');
INSERT INTO "connection" VALUES(104,'Programmiersprache','bedient sich','Boolscher Algebra');
INSERT INTO "connection" VALUES(104,'Alphabet','ist eine','Menge von Ausdrücken');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','erstellt eine','Datendefinition');
INSERT INTO "connection" VALUES(104,'Programm aus funktionalem Baukasten','erzeugt','Ausgabe');
INSERT INTO "connection" VALUES(104,'Funktionen','können dargestellt werden','Bäume');
INSERT INTO "connection" VALUES(104,'DrRacket','kennt','Boolscher Algebra');
INSERT INTO "connection" VALUES(104,'Funktionen','wird gebildet aus','Alphabet');
INSERT INTO "connection" VALUES(104,'Rekursive Daten- oder Funktionsdefinition','muss vorhanden sein','Abbruchbedingung');
INSERT INTO "connection" VALUES(104,'strukturierte Daten','werden zusammengefasst als','Datentyp');
INSERT INTO "connection" VALUES(104,'Funktionale Programmiersrpache','können verwendet werden','strukturierte Daten');
INSERT INTO "connection" VALUES(104,'DrRacket','ist eine','Programmiersprache');
INSERT INTO "connection" VALUES(104,'Liste','kann sein','Rückgabewert');
INSERT INTO "connection" VALUES(104,'Signatur','ist ein','Tripel');
INSERT INTO "connection" VALUES(104,'Boolscher Algebra','besteht aus','false');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','erstellt','Fuktionskopf');
INSERT INTO "connection" VALUES(104,'Programmiersprache','benutzt','Fallunterscheidungen');
INSERT INTO "connection" VALUES(104,'Funktionale Programmiersrpache','wendet an','Funktionen');
INSERT INTO "connection" VALUES(104,'Alphabet','benötigt','Regeln');
INSERT INTO "connection" VALUES(104,'Datentyp','können sein','abstrakte Datentypen');
INSERT INTO "connection" VALUES(104,'Funktonsrumpf','Ausarbeitung','Schablone');
INSERT INTO "connection" VALUES(104,'Menge von Ausdrücken','ist konstruierbar durch','Regeln');
INSERT INTO "connection" VALUES(104,'Entwurfsschema','erzeugt','Schablone');
INSERT INTO "connection" VALUES(104,'Liste','ist ein','abstrakte Datentypen');
INSERT INTO "connection" VALUES(105,'Ausdrücke','Darst. eines Wortes','string ".."');
INSERT INTO "connection" VALUES(105,'Ausdrücke','rundet ab','floor');
INSERT INTO "connection" VALUES(105,'Ausdrücke','gibt rekursiv Rest der Liste wieder','rest');
INSERT INTO "connection" VALUES(105,'6. Tests','überprüfen mit','check-expect');
INSERT INTO "connection" VALUES(105,'Ausdrücke','rundet auf','ceiling');
INSERT INTO "connection" VALUES(105,'Ausdrücke','gibt Parameter an','lambda');
INSERT INTO "connection" VALUES(105,'5. Funktionsrumpf','überprüfen','6. Tests');
INSERT INTO "connection" VALUES(105,'Fktnale Programmierung','Methodik','6 Schritte');
INSERT INTO "connection" VALUES(105,'Ausdrücke','definiert fkt.','define');
INSERT INTO "connection" VALUES(105,'Ausdrücke','stellt Boolean dar','true/false');
INSERT INTO "connection" VALUES(105,'Ausdrücke','Bedingungsfkt','cond');
INSERT INTO "connection" VALUES(105,'4. Schablone','erstellen','5. Funktionsrumpf');
INSERT INTO "connection" VALUES(105,'Ausdrücke','gibt Befehl für Listen','cons');
INSERT INTO "connection" VALUES(105,'1. Datenalayse/-definition','erstellen','2. Signatur');
INSERT INTO "connection" VALUES(105,'3. Beispiele','erstellen','4. Schablone');
INSERT INTO "connection" VALUES(105,'2. Signatur','erstellen','3. Beispiele');
INSERT INTO "connection" VALUES(105,'5. Funktionsrumpf','Ausdrücke verwenden','Ausdrücke');
INSERT INTO "connection" VALUES(105,'Ausdrücke','Datenstruktur erst.','define-struct');
INSERT INTO "connection" VALUES(105,'6 Schritte','erstellen','1. Datenalayse/-definition');
INSERT INTO "connection" VALUES(105,'Ausdrücke','gibt leere Liste wieder','empty');
INSERT INTO "connection" VALUES(106,'Informatik (Wissenschaft der Problemlösung)','unterteilt','Technische Informatik');
INSERT INTO "connection" VALUES(106,'Informatik (Wissenschaft der Problemlösung)','Einfluss auf','Statistik, Wirtschaftswissenschaften, Biologie,Chemie, Physik');
INSERT INTO "connection" VALUES(106,'Informatik (Wissenschaft der Problemlösung)','verwendet in','Wirtschaft, Technik, Bio usw');
INSERT INTO "connection" VALUES(106,'Informatik (Wissenschaft der Problemlösung)','unterteilt','theoretische Informatik');
INSERT INTO "connection" VALUES(106,'Sprachen','unterscheidet','funktionale Sprachen');
INSERT INTO "connection" VALUES(106,'Informatik (Wissenschaft der Problemlösung)','unterteilt','praktische Informatik');
INSERT INTO "connection" VALUES(106,'Technische Informatik','nutzt','Sprachen');
INSERT INTO "connection" VALUES(106,'Sprachen','unterscheidet','objektorientierte Sparchen');
INSERT INTO "connection" VALUES(107,'Programmiersprache','aufrufbar','Rekursion');
INSERT INTO "connection" VALUES(107,'Programmiersprache','unterscheidet zwischen','Datentypen');
INSERT INTO "connection" VALUES(107,'Programmiersprache','nutzt','Datenstrukturen');
INSERT INTO "connection" VALUES(107,'Programmiersprache','differenziert mit','Fallunterscheidung');
INSERT INTO "connection" VALUES(107,'Programmiersprache','wertet aus','Ausdrücke');
INSERT INTO "connection" VALUES(108,'Menge','beinhaltet','Algebra');
INSERT INTO "connection" VALUES(108,'Abstrakte Datentypen','können sein','getypt');
INSERT INTO "connection" VALUES(108,'Abstrakte Datentypen','werden definiert','Bildungsregeln');
INSERT INTO "connection" VALUES(108,'kartesisches Produkt','kann sein','Heterogen');
INSERT INTO "connection" VALUES(108,'Neutralitätsgesetz','gehört zu','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'Algebra','ist','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'Boolesche Werte','ist','Menge');
INSERT INTO "connection" VALUES(108,'Funktionen','besitzt','Parameter');
INSERT INTO "connection" VALUES(108,'Abstrakte Datentypen','können sein','ungetypt');
INSERT INTO "connection" VALUES(108,'Äquivalenz','ist','Junktoren');
INSERT INTO "connection" VALUES(108,'Regel von de Morgan','gehört zu','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'Funktionale Programmierung','besteht aus','Programm');
INSERT INTO "connection" VALUES(108,'Baum','ausgewertet durch','Traversierung');
INSERT INTO "connection" VALUES(108,'Idempotenzgesetz','gehört zu','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'Aussage','verbinden durch','Junktoren');
INSERT INTO "connection" VALUES(108,'Abstrakte Datentypen','besitzen','Wertebereich');
INSERT INTO "connection" VALUES(108,'Funktionen','hat','Funktionsname');
INSERT INTO "connection" VALUES(108,'Kommuntativgesetz','gehört zu','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'Arithmetischer Ausdruck','enthält','Operatorsymbol');
INSERT INTO "connection" VALUES(108,'rekursive Funktion','selbstaufruf','rekursive Funktion');
INSERT INTO "connection" VALUES(108,'Negation','ist','Junktoren');
INSERT INTO "connection" VALUES(108,'Wahrheitswert','ist','Boolesche Werte');
INSERT INTO "connection" VALUES(108,'Implikation','ist','Junktoren');
INSERT INTO "connection" VALUES(108,'Absorptionsgesetz','gehört zu','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'kartesisches Produkt','kann sein','Homogen');
INSERT INTO "connection" VALUES(108,'Geometrie','arbeiten mit','zwei-dimensionalen Punkte');
INSERT INTO "connection" VALUES(108,'Rekursion','definiert','rekursive Funktion');
INSERT INTO "connection" VALUES(108,'Funktionale Programmierung','beinhaltet','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(108,'Bildungsregeln','anwenden','disjunktive Vereinigung');
INSERT INTO "connection" VALUES(108,'Baum','besteht aus','Knoten');
INSERT INTO "connection" VALUES(108,'zwei-dimensionalen Punkte','definiert durch','R x R -&gt; R');
INSERT INTO "connection" VALUES(108,'Rechenvorschriften','definiert durch','Funktionen');
INSERT INTO "connection" VALUES(108,'Funktionsaufruf','ist','Arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(108,'Programm','besitzt','Rechenvorschriften');
INSERT INTO "connection" VALUES(108,'Satz','ist','Aussage');
INSERT INTO "connection" VALUES(108,'Traversierung','Auswertung durch','Postorder');
INSERT INTO "connection" VALUES(108,'Abstrakte Datentypen','hat','Werte');
INSERT INTO "connection" VALUES(108,'Bildungsregeln','bilden','Funktionen');
INSERT INTO "connection" VALUES(108,'Assoziativgesetz','gehört zu','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'Satz','hat','Wahrheitswert');
INSERT INTO "connection" VALUES(108,'Disjunktion','ist','Junktoren');
INSERT INTO "connection" VALUES(108,'Knoten','ist','Wurzel');
INSERT INTO "connection" VALUES(108,'Konjunktion','ist','Junktoren');
INSERT INTO "connection" VALUES(108,'Involution','gehört zu','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'Programm','erzeugt','Ausgabe');
INSERT INTO "connection" VALUES(108,'Bildungsregeln','anwenden','rekursiver Gleichungen');
INSERT INTO "connection" VALUES(108,'Arithmetischer Ausdruck','enthält','Numeral');
INSERT INTO "connection" VALUES(108,'Wurzel','mit k (Teil-)','Baum');
INSERT INTO "connection" VALUES(108,'Arithmetischer Ausdruck','enthält','Hilfszeichen');
INSERT INTO "connection" VALUES(108,'Funktionen','definiert durch','Definitionsbereich-&gt;Wertebereich');
INSERT INTO "connection" VALUES(108,'Traversierung','Auswertung durch','Präorder');
INSERT INTO "connection" VALUES(108,'Bildungsregeln','bilden von','kartesisches Produkt');
INSERT INTO "connection" VALUES(108,'Zusammengesetzte Daten','in','Geometrie');
INSERT INTO "connection" VALUES(108,'Distributivgesetz','gehört zu','Boolsche Algebra');
INSERT INTO "connection" VALUES(108,'Funktionen','verwendet mithilfe','Funktionsaufruf');
INSERT INTO "connection" VALUES(108,'Programm','verarbeitet','Eingabe');
INSERT INTO "connection" VALUES(108,'Traversierung','Auswertung durch','Inorder');
INSERT INTO "connection" VALUES(108,'Abstrakte Datentypen','hat','Operationen');
INSERT INTO "connection" VALUES(109,'Zusammengesetzte Daten','bestehen aus','konstante Datenbündel');
INSERT INTO "connection" VALUES(109,'Datentypen','enthalten u.A.','abstrakte Datentypen');
INSERT INTO "connection" VALUES(109,'Prädikate','zur','Fallüberprüfung');
INSERT INTO "connection" VALUES(109,'Vorlesungsstoff der Kapitel 2-6','beinhaltet','Bäume');
INSERT INTO "connection" VALUES(109,'Listen','sind','Zusammengesetzte Daten');
INSERT INTO "connection" VALUES(109,'Funktionale Programmiersprachen','ist z.B.','Racket');
INSERT INTO "connection" VALUES(109,'Fallunterscheidungen','nutzen','Prädikate');
INSERT INTO "connection" VALUES(109,'Vorlesungsstoff der Kapitel 2-6','beinhaltet','Listen');
INSERT INTO "connection" VALUES(109,'Bäume','sind','Hierarchisch strukturierte Informationen');
INSERT INTO "connection" VALUES(109,'Bäume','sind z.B.','Binärbäume');
INSERT INTO "connection" VALUES(109,'Boolesche Werte','sind Bestandteil von','Fallunterscheidungen');
INSERT INTO "connection" VALUES(109,'Rekursion','ist enthalten in','Funktion mit Selbstbezug');
INSERT INTO "connection" VALUES(109,'Syntaktisch korrekte Programme entwerfen','dies geschieht durch','Verständnis für die Aufgabenstellung');
INSERT INTO "connection" VALUES(109,'Vorlesungsstoff der Kapitel 2-6','beinhaltet','Funktionale Programmiersprachen');
INSERT INTO "connection" VALUES(109,'Funktion mit Selbstbezug','nutzt','Rekursionsanker (sonst nicht terminierend)');
INSERT INTO "connection" VALUES(109,'Rekursion','wird hauptsächlich genutzt bei','Listen');
INSERT INTO "connection" VALUES(109,'abstrakte Datentypen','sind','Datentypen ohne Implementierung');
INSERT INTO "connection" VALUES(109,'Vorlesungsstoff der Kapitel 2-6','beinhaltet','Rekursion');
INSERT INTO "connection" VALUES(109,'konstante Datenbündel','ergeben','Datentypen');
INSERT INTO "connection" VALUES(109,'Auswertung','wertet aus zu','Daten aus gegebenen Datentypen');
INSERT INTO "connection" VALUES(109,'Racket','gelehrt wurde','Syntaktisch korrekte Programme entwerfen');
INSERT INTO "connection" VALUES(109,'Daten aus gegebenen Datentypen','wertet aus zu','Boolesche Werte');
INSERT INTO "connection" VALUES(109,'adäquate Darstellung von Programmen','nutzt','Datendefinitionen, Signatur, Schablonen, Beispiele, Tests, (...)');
INSERT INTO "connection" VALUES(109,'Daten aus gegebenen Datentypen','wertet aus zu','z.B. natürliche Zahlen oder andere Wertebereiche (angegeben in der Signatur)');
INSERT INTO "connection" VALUES(109,'Repräsentation/Interpretation von Daten','wird verarbeitet','Auswertung');
INSERT INTO "connection" VALUES(109,'Datentypen','enthalten','Daten aus gegebenen Datentypen');
INSERT INTO "connection" VALUES(109,'Syntaktisch korrekte Programme entwerfen','dies geschieht durch','Kenntnis über Befehle der genutzten Programmiersprache');
INSERT INTO "connection" VALUES(109,'Racket','gelehrt wurde','adäquate Darstellung von Programmen');
INSERT INTO "connection" VALUES(109,'Verständnis für die Aufgabenstellung','kann erarbeitet werden durch','Datendefinitionen, Signatur, Schablonen, Beispiele, Tests, (...)');
INSERT INTO "connection" VALUES(109,'Hierarchisch strukturierte Informationen','bedeutet','Reihenfolge der Auswertungsschritte vorbestimmt');
INSERT INTO "connection" VALUES(110,'Operation','über','Parameter');
INSERT INTO "connection" VALUES(110,'Syntax','bestimmt','Auswertung/ausgewertet');
INSERT INTO "connection" VALUES(110,'Rekursiver Aufruf','kann erzeugen','iterativer Prozess');
INSERT INTO "connection" VALUES(110,'Funktionale Programmierung','"Erstellt"','Programm');
INSERT INTO "connection" VALUES(110,'Rekursiver Aufruf','kann erzeugen','rekursiver Prozess');
INSERT INTO "connection" VALUES(110,'Funktion','nutzt','Variablenkonzept');
INSERT INTO "connection" VALUES(110,'Funktion','werden','Auswertung/ausgewertet');
INSERT INTO "connection" VALUES(110,'Funktion','kann enthalten','Rekursiver Aufruf');
INSERT INTO "connection" VALUES(110,'arithmetischer Ausdruck','werden','Auswertung/ausgewertet');
INSERT INTO "connection" VALUES(110,'Funktionale Programmierung','hat','Syntax');
INSERT INTO "connection" VALUES(110,'Variablenkonzept','nutzt','Datentyp');
INSERT INTO "connection" VALUES(110,'Syntax','bestimmt','Semantik');
INSERT INTO "connection" VALUES(110,'Semantik','bestimmt','Auswertung/ausgewertet');
INSERT INTO "connection" VALUES(110,'Funktion','kann sein/ nutzt','Operation');
INSERT INTO "connection" VALUES(110,'Funktionale Programmierung','nutzt','Datentyp');
INSERT INTO "connection" VALUES(110,'Programm','durch','Funktion');
INSERT INTO "connection" VALUES(110,'Parameter','bildet','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(110,'Variablenkonzept','In Form von','Parameter');
INSERT INTO "connection" VALUES(110,'Operation','bildet','arithmetischer Ausdruck');
INSERT INTO "connection" VALUES(111,'Programmcode','besteht aus','Tests');
INSERT INTO "connection" VALUES(111,'Funktionale Programmiersprache','Sprache zum Erstellen von','Programm');
INSERT INTO "connection" VALUES(111,'Programmcode','besteht ggf. aus','Datenanalyse und -definition');
INSERT INTO "connection" VALUES(111,'Beschreibung','besteht aus','Signatur');
INSERT INTO "connection" VALUES(111,'Funktionen','wertet aus','Ausdrücke');
INSERT INTO "connection" VALUES(111,'Baum','besteht ggf. aus','Knoten');
INSERT INTO "connection" VALUES(111,'Boolean','kann sein','false');
INSERT INTO "connection" VALUES(111,'Objektorientierte Programmiersprache','ist eine Art von','Programmiersprache');
INSERT INTO "connection" VALUES(111,'Programm','wendet an','Funktionen');
INSERT INTO "connection" VALUES(111,'Racket','ist ein Beispiel von','Funktionale Programmiersprache');
INSERT INTO "connection" VALUES(111,'Beschreibung','besteht aus','Beispiele');
INSERT INTO "connection" VALUES(111,'Ausdrücke','besteht aus','Aussagenlogische Ausdrücke');
INSERT INTO "connection" VALUES(111,'Programm','wendet an','special forms');
INSERT INTO "connection" VALUES(111,'Boolean','kann sein','true');
INSERT INTO "connection" VALUES(111,'Arithmetischer Ausdrücke','benötigt ggf.','Hilfszeichen');
INSERT INTO "connection" VALUES(111,'Beschreibung','besteht aus','Zweck');
INSERT INTO "connection" VALUES(111,'Wurzel','ist Ursprung von','Teilbäume');
INSERT INTO "connection" VALUES(111,'Aussagenlogische Ausdrücke','besteht ggf. aus','Junktoren');
INSERT INTO "connection" VALUES(111,'Datenanalyse und -definition','besteht aus','Definition einer Struktur');
INSERT INTO "connection" VALUES(111,'Fallunterscheidungen','besteht ggf. aus','Mehrfache Fallunterscheidungen (cond');
INSERT INTO "connection" VALUES(111,'Baum','besteht ggf. aus','Teilbäume');
INSERT INTO "connection" VALUES(111,'Fallunterscheidungen','besteht ggf. aus','Einfache Fallunterscheidungen (if)');
INSERT INTO "connection" VALUES(111,'Arithmetischer Ausdrücke','benötigt','Numeral');
INSERT INTO "connection" VALUES(111,'Dr. Racket','ist ein Beispiel von','Entwicklungsumgebung');
INSERT INTO "connection" VALUES(111,'Aussagen','hat','Wahrheitswert');
INSERT INTO "connection" VALUES(111,'Funktionsrumpf','besteht ggf. aus','Fallunterscheidungen');
INSERT INTO "connection" VALUES(111,'Programm','basiert auf','Programmcode');
INSERT INTO "connection" VALUES(111,'Junktoren','verbindet','Aussagen');
INSERT INTO "connection" VALUES(111,'Beschreibung','besteht aus','Funktionskopf');
INSERT INTO "connection" VALUES(111,'Aussagenlogische Ausdrücke','besteht aus','Aussagen');
INSERT INTO "connection" VALUES(111,'Baum','besteht aus','Wurzel');
INSERT INTO "connection" VALUES(111,'Kanten','verbindet alle miteinander','Knoten');
INSERT INTO "connection" VALUES(111,'Entwicklungsumgebung','Programm zum Erstellen von','Programm');
INSERT INTO "connection" VALUES(111,'Arithmetischer Ausdrücke','benötigt','Operatorsymbol');
INSERT INTO "connection" VALUES(111,'Binärbaum','ist eine Art von','Baum');
INSERT INTO "connection" VALUES(111,'Ausdrücke','besteht aus','Andere Ausdrücke');
INSERT INTO "connection" VALUES(111,'Baum','kann darstellen','Ausdrücke');
INSERT INTO "connection" VALUES(111,'Funktionale Programmiersprache','ist eine Art von','Programmiersprache');
INSERT INTO "connection" VALUES(111,'Beschreibung','besteht aus','Schablone');
INSERT INTO "connection" VALUES(111,'Ausdrücke','besteht aus','Arithmetischer Ausdrücke');
INSERT INTO "connection" VALUES(111,'Programmcode','besteht aus','Beschreibung');
INSERT INTO "connection" VALUES(111,'Teilbäume','besteht aus','Knoten');
INSERT INTO "connection" VALUES(111,'Wahrheitswert','ist vom Datentyp','Boolean');
INSERT INTO "connection" VALUES(111,'Programmcode','besteht aus','Funktionsrumpf');
INSERT INTO "connection" VALUES(112,'Rekursion','braucht','Abbruchbedingung');
INSERT INTO "connection" VALUES(112,'Racket','ist','getypt');
INSERT INTO "connection" VALUES(112,'funktionale Sprache','ist eine','Sprache');
INSERT INTO "connection" VALUES(112,'Modell','Bestandteil von','funktionaler Baukasten');
INSERT INTO "connection" VALUES(112,'define-struct','erschafft','make ...');
INSERT INTO "connection" VALUES(112,'Wahrheitswert','ist ein','Elementare Bestandteile');
INSERT INTO "connection" VALUES(112,'Funktion','kann','Rekursion');
INSERT INTO "connection" VALUES(112,'Sprache','unerheblich für','Mächtigkeit');
INSERT INTO "connection" VALUES(112,'Variablenkonzept','Bestandteil von','funktionaler Baukasten');
INSERT INTO "connection" VALUES(112,'Operator','Bestandteil von','ADT');
INSERT INTO "connection" VALUES(112,'Funktion','erschafft','Funktion');
INSERT INTO "connection" VALUES(112,'Aussage','ist ein','Satz');
INSERT INTO "connection" VALUES(112,'Start eines Programms','Bestandteil von','funktionaler Baukasten');
INSERT INTO "connection" VALUES(112,'Programm','Bestandteil von','funktionaler Baukasten');
INSERT INTO "connection" VALUES(112,'Racket','benutzt','Aussage');
INSERT INTO "connection" VALUES(112,'Wert','Bestandteil von','ADT');
INSERT INTO "connection" VALUES(112,'Funktion','ist ein','Operator');
INSERT INTO "connection" VALUES(112,'Racket','benutzt','Funktion');
INSERT INTO "connection" VALUES(112,'Wahrheitswert','ist ein','Wert');
INSERT INTO "connection" VALUES(112,'Elementare Bestandteile','Bestandteil von','funktionaler Baukasten');
INSERT INTO "connection" VALUES(112,'make ...','ist eine','Funktion');
INSERT INTO "connection" VALUES(112,'Aussage','hat einen','Wahrheitswert');
INSERT INTO "connection" VALUES(112,'Racket','ist eine','funktionale Sprache');
INSERT INTO "connection" VALUES(112,'true','ist eine','Aussage');
INSERT INTO "connection" VALUES(112,'define-struct','ist eine','special form');
INSERT INTO "connection" VALUES(112,'Racket','benutzt','special form');
INSERT INTO "connection" VALUES(112,'Rekursion','braucht','Fallunterscheidung');
INSERT INTO "connection" VALUES(112,'false','ist eine','Aussage');
INSERT INTO "connection" VALUES(112,'funktionale Sprache','wird gebildet aus','funktionaler Baukasten');
INSERT INTO "connection" VALUES(113,'Rekursive Definition','Selbstbezug','Funktion');
INSERT INTO "connection" VALUES(113,'Listen','für','strukturierte Daten');
INSERT INTO "connection" VALUES(113,'Hilfsfunktion','für bessere Übersicht','Funktion');
INSERT INTO "connection" VALUES(113,'Schablone','individuell bearbeitbar','Funktion');
INSERT INTO "connection" VALUES(113,'Funktion','müssen nicht realisiert werden','Abstrakte Datentypen');
INSERT INTO "connection" VALUES(113,'Arithmetischer Ausdruck','hat immer','Binärbaum');
INSERT INTO "connection" VALUES(113,'Funktion','als','Binärbaum');
INSERT INTO "connection" VALUES(113,'Funktion','.','Listen');
INSERT INTO "connection" VALUES(113,'Fallunterscheidung','einfach oder mehrfach','Funktion');
INSERT INTO "connection" VALUES(113,'Variablen','statt Konstanten','Funktion');
INSERT INTO "connection" VALUES(113,'Listen','als','Parameter und Rückgabewerte');
CREATE VIEW connection_type AS
    SELECT DISTINCT type name
        FROM connection;
CREATE VIEW map_from_degree AS
    SELECT map_id, from_name name, COUNT(*) from_degree
        FROM connection
        GROUP BY map_id, name;
CREATE VIEW map_to_degree AS
    SELECT map_id, to_name name, COUNT(*) to_degree
        FROM connection
        GROUP BY map_id, name;
CREATE VIEW map_entity AS
    SELECT map_id, name, SUM(degree) degree
        FROM (
                    SELECT map_id, name, from_degree degree FROM map_from_degree
        UNION ALL   SELECT map_id, name, to_degree   degree FROM map_to_degree
        )
        GROUP BY map_id, name;
CREATE VIEW from_degree AS
    SELECT name, SUM(from_degree) from_degree
        FROM map_from_degree
        GROUP BY name;
CREATE VIEW to_degree AS
    SELECT name, SUM(to_degree) to_degree
        FROM map_to_degree
        GROUP BY name;
CREATE VIEW entity AS
    SELECT name, SUM(degree) degree
        FROM map_entity
        GROUP BY name;
COMMIT;
