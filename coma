#!/usr/bin/env perl

use v5.20;

use Mojolicious::Lite -signatures;
use Mojo::IOLoop;
use Mojo::File 'path';
use Mojo::Util 'trim';
use Data::Dump 'dump';
use Text::Markdown 'markdown';
use Graph::Centrality::Pagerank;
use FindBin '$Bin';

use lib "$Bin/lib";
use Coma::Data;

# Set commands namespace
push @{app->commands->namespaces}, 'Coma::Command';

# Prepare data access (creation: only once, "state")
helper data => sub {
    my $data_fn = $ENV{COMA_DATA_FILE} // app->home->rel_file('data/data');
    state $data = Coma::Data->new(data_filename => $data_fn);
    return $data;
};

# Set up periodic data storage
Mojo::IOLoop->recurring(5 => sub ($loop) {
    my $data_stored = app->data->store_if_neccessary;
    app->log->info('Data stored to ' . app->data->data_filename)
        if $data_stored;
});

# Inject mojolicious log as a logger into the data model
app->data->logger(sub ($event) {
    my $data = $event->can('data') ? dump $event->data : 'NO DATA';
    app->log->info('New event ' . $event->name . ": $data");
});

# Empty? Read init data tgf files into data model
if (app->data->is_empty) {
    my $init_dn = $ENV{COMA_INIT_DIR} // app->home->rel_file('data/init_data');
    app->data->add_map_from_tgf_file(path($_)->basename('.tgf'), '', $_)
        for <$init_dn/*.tgf>;
}

# Markdown helper
helper markdown => sub ($c, $text) {
    return markdown $text;
};

# Pagerank helper: expects LoL of vertex names
# Returns a hash ref name => PR
helper calculate_pagerank => sub ($c, $graph) {
    state $pr = Graph::Centrality::Pagerank->new();
    return $pr->getPagerankOfNodes(listOfEdges => $graph);
};

# Completion helper: expects a callback returning a source data list
# and works on the term param
helper completion => sub ($c, $source_cb) {
    my $term = $c->param('term');

    # Incomplete request
    unless (defined $term) {
        $c->res->code(400);
        return $c->render(text => 'No term given');
    }

    # Find matches
    my @matches = sort grep {/\Q$term\E/} $source_cb->();

    # Render as json
    return $c->render(json => \@matches);
};

# JSON entity completion
any '/entity_completion' => sub ($c) {
    return $c->completion(sub {@{$c->data->get_entities}});
};

# JSON connection completion
any '/connection_completion' => sub ($c) {
    return $c->completion(sub {keys %{$c->data->get_connection_types}});
};

# Home: show all maps 'n' stuff
get '/' => sub ($c) {

    # Retrieve all maps
    my $map_ids = $c->data->get_all_map_ids;
    my @maps    = map {$c->data->get_map_data($_)} @$map_ids;

    $c->stash(maps => \@maps);
} => 'home';

# Add a map
post '/' => sub ($c) {

    # Create the map
    my $map_id = $c->data->add_map({
        name        => $c->param('name'),
        description => $c->param('description'),
    });

    $c->redirect_to('show_map', map_id => $map_id);
} => 'add_map';

# Show entity cloud
get '/entities' => sub ($c) {

    # Load entity => degree hash for all entities
    my $entity_degree = $c->data->get_entity_degrees;

    # Calculate reverse pagerank
    my @rev_conns = map [reverse @$_] => @{$c->data->get_connection_pairs};
    my $entity_pr = $c->calculate_pagerank(\@rev_conns);

    $c->stash(
        entities => $entity_degree,
        pagerank => $entity_pr,
    );
} => 'entities';

# Show entity data
get '/entity/:entity_name' => sub ($c) {
    my $en = $c->param('entity_name');

    # Try to retrieve entity
    return $c->reply->not_found unless $c->data->has_entity($en);

    # Get degrees
    my $degree      = $c->data->get_entity_degrees->{$en} // 0;
    my $indegree    = $c->data->get_entity_indegrees->{$en} // 0;
    my $outdegree   = $c->data->get_entity_outdegrees->{$en} // 0;

    # Get neighbourhood
    my $in_neighbours   = $c->data->get_incoming_neighbourhood($en);
    my $out_neighbours  = $c->data->get_outgoing_neighbourhood($en);

    # Calculate reverse pagerank
    my @rev_conns = map [reverse @$_] => @{$c->data->get_connection_pairs};
    my $pagerank  = $c->calculate_pagerank(\@rev_conns);

    # Find all maps with this entity
    my $map_ids = $c->data->get_map_ids_with_entity($en);

    $c->stash(
        degree          => $degree,
        indegree        => $indegree,
        outdegree       => $outdegree,
        in_neighbours   => $in_neighbours,
        out_neighbours  => $out_neighbours,
        pagerank        => $pagerank,
        map_ids         => $map_ids,
    );
} => 'show_entity';

# Under here: work on one map
under '/map/:map_id' => [map_id => qr/\d+/] => sub ($c) {

    # Try to load map
    my $map = eval {$c->data->get_map_data($c->param('map_id'))};
    $c->reply->not_found and return if $@;

    # Ok, we have a map
    $c->stash(map => $map);
    return 1;
};

# Show one map
get '/' => sub ($c) {
    my $map = $c->stash('map');

    # Load entities of this map
    my $entities = $c->data->get_entities($map->{id});

    # Calculate reverse pagerank
    my $conn_pairs  = $c->data->get_connection_pairs($map->{id});
    my $pagerank    = $c->calculate_pagerank([reverse @$conn_pairs]);

    $c->stash(
        entities => $entities,
        pagerank => $pagerank,
    );
} => 'show_map';

# Edit map meta data
post '/edit' => sub ($c) {
    my $map = $c->stash('map');

    # Update map meta data
    $c->data->update_map_data($map->{id}, {
        name        => $c->param('name'),
        description => $c->param('description'),
    });

    $c->redirect_to('show_map');
} => 'edit_map';

# Add a connection
post '/' => sub ($c) {
    my $map = $c->stash('map');

    # Insert a new connection for this map
    $c->data->add_connection($map->{id}, {
        from    => trim($c->param('from')),
        type    => trim($c->param('type')),
        to      => trim($c->param('to')),
    });

    $c->redirect_to('show_map');
} => 'add_connection';

# Delete a connection
post '/delete_connection' => sub ($c) {
    my $map  = $c->stash('map');
    my $c_id = $c->param('connection_id');

    # Connection exists?
    return $c->reply->exception(
        "Map $map->{name}: Connection $c_id not found!"
    ) unless exists $map->{connections}{$c_id};

    # Delete
    $c->data->remove_connection($map->{id}, $c_id);

    $c->redirect_to('show_map');
};

# Delete a map
post '/delete' => 'delete_map';

# Delete a map and the user is sure
post '/delete_sure' => sub ($c) {

    # Delete it
    my $map = $c->stash('map');
    $c->data->remove_map($map->{id});

    $c->redirect_to('home');
} => 'delete_map_sure';

# TGF export of one map
app->types->type(tgf => 'text/plain;charset=UTF-8');
get '/tgf_export' => sub ($c) {

    # Prepare
    my $map = $c->stash('map');

    # Prepare filename
    my $name = $map->{name};
    $name =~ s/[\s-]+/_/g;      # whitespaces/dashes -> underscore
    $name =~ s/[^a-z0-9]//ig;   # delete non-trivial characters
    my $fn = 'map_' . $name . '_' . $map->{id} . '.tgf';

    # Force download
    $c->res->headers->content_disposition("attachment; filename=$fn");

    # Render TGF template
    $c->render(format => 'tgf');
};

app->start;
